{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://kung-fu-master.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://kung-fu-master.github.io",
    "items": [
        {
            "id": "https://kung-fu-master.github.io/2021/03/16/technologies/security/openssl_update/",
            "url": "https://kung-fu-master.github.io/2021/03/16/technologies/security/openssl_update/",
            "title": "openssl update",
            "date_published": "2021-03-16T10:49:35.911Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"openssl官网下载\"><a class=\"anchor\" href=\"#openssl官网下载\">#</a> openssl 官网下载</h2><ul><li>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbnNzbC5vcmc=\">https://www.openssl.org</span></li><li>下载:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvc291cmNlLw==\">https://www.openssl.org/source/</span></li><li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5zc2wvb3BlbnNzbA==\">https://github.com/openssl/openssl</span></li></ul><p>openssl 版本</p><pre><code>openssl version\nopenssl version -a\n</code></pre><p><a id=\"more\"></a></p><h2 id=\"centos上更新openssl\"><a class=\"anchor\" href=\"#centos上更新openssl\">#</a> Centos 上更新 Openssl</h2><pre><code># 查看centos版本\ncat /etc/redhat-release\n  CentOS Linux release 7.9.2009 (Core)\n\n# 查看openssl版本\nopenssl version\n  OpenSSL 1.0.2k-fips  26 Jan 2017\n\n# 删除旧版本包\nyum remove openssl -y\n\n# 安装依赖\n(原始操作)yum install gcc gcc-c++ autoconf automake zlib zlib-devel pcre-devel -y\n# 实际安装依赖过程中因为本机已经安装更新过gcc, 因此用了如下命令安装依赖\nyum install autoconf automake zlib zlib-devel pcre-devel -y\n\n# 下载包\nwget https://www.openssl.org/source/openssl-1.1.1j.tar.gz\ntar -zxf openssl-1.1.1j.tar.gz\n\n# 编译\ncd openssl-1.1.1j/\n./config --prefix=/usr/local/openssl shared zlib\nmake -j\nmake install\n\n# 创建软链接\nln -sv /usr/local/openssl/bin/openssl /usr/bin/openssl\nln -sv /usr/local/openssl/include/openssl /usr/include/openssl\n\n# 设置动态库地址\necho '/usr/local/openssl/lib' &gt; /etc/ld.so.conf.d/openssl-ld.conf\nldconfig -v\n\n# 查看版本\nopenssl version\n  OpenSSL 1.1.1j  16 Feb 2021\n\n# 查看某个证书信息\nopenssl x509 -in public.crt -text -noout\n\n</code></pre><p>升级完成， 最好重启下服务器.</p><h2 id=\"debian9上更新openssl\"><a class=\"anchor\" href=\"#debian9上更新openssl\">#</a> debian9 上更新 Openssl</h2><pre><code># 当前版本\n# openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\n\n# 删除旧版本包\napt-get --purge remove openssl\n\n# 安装依赖\napt-get update\napt-get install build-essential checkinstall zlib1g-dev -y\n\n# 下载包\nwget https://www.openssl.org/source/openssl-1.1.1d.tar.gz\ntar -zxf openssl-1.1.1d.tar.gz \n\n# 编译\ncd ./openssl-1.1.1d/\n./config --prefix=/usr/local/openssl shared zlib\nmake\nmake install\n\n# 创建软链接\nln -sv /usr/local/openssl/bin/openssl /usr/bin/openssl\nln -sv /usr/local/openssl/include/openssl /usr/include/openssl\n\n# 设置动态库地址\necho '/usr/local/openssl/lib' &gt; /etc/ld.so.conf.d/openssl-ld.conf\nldconfig -v\n\n# 查看版本\nopenssl version\nOpenSSL 1.1.1d  10 Sep 2019\n</code></pre><p>升级完成， 最好重启下服务器。</p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/15/storage/minio/minIO_05_KMS/",
            "url": "https://kung-fu-master.github.io/2021/03/15/storage/minio/minIO_05_KMS/",
            "title": "Deploy MinIO with KMS(vault)",
            "date_published": "2021-03-15T11:39:44.945Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"referenc-link\"><a class=\"anchor\" href=\"#referenc-link\">#</a> referenc link</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcy93aWtp\">https://github.com/minio/kes/wiki</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcy93aWtpL0hhc2hpY29ycC1WYXVsdC1LZXlzdG9yZQ==\">https://github.com/minio/kes/wiki/Hashicorp-Vault-Keystore</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcy93aWtpL01pbklPLU9iamVjdC1TdG9yYWdlI21pbmlvLWNvbmZpZ3VyYXRpb24=\">https://github.com/minio/kes/wiki/MinIO-Object-Storage#minio-configuration</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL21pbmlvL2Jsb2IvbWFzdGVyL2RvY3Mva21zL1JFQURNRS5tZA==\">https://github.com/minio/minio/blob/master/docs/kms/README.md</span></p><p><a id=\"more\"></a></p><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pbi5pby9kb2NzL21pbmlvLXNlY3VyaXR5LW92ZXJ2aWV3Lmh0bWw=\">https://docs.min.io/docs/minio-security-overview.html</span><br><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MubWluaW8ub3JnLmNuL2RvY3MvbWFzdGVyL21pbmlvLWttcy1xdWlja3N0YXJ0LWd1aWRl\">http://docs.minio.org.cn/docs/master/minio-kms-quickstart-guide</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pbi5pby9kb2NzL21pbmlvLWNsaWVudC1xdWlja3N0YXJ0LWd1aWRl\">https://docs.min.io/docs/minio-client-quickstart-guide</span></p><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BldGVyd2FuZ2hhby9hcnRpY2xlL2RldGFpbHMvODMxODE5MzI=\">https://blog.csdn.net/peterwanghao/article/details/83181932</span></p><p>valut:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5oYXNoaWNvcnAuY29tL3R1dG9yaWFscy92YXVsdC9oYS13aXRoLWNvbnN1bD9pbj12YXVsdC9vcGVyYXRpb25z\">https://learn.hashicorp.com/tutorials/vault/ha-with-consul?in=vault/operations</span></p><h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2><p>MinIO 使用密钥管理系统（KMS）支持 SSE-S3。如果客户端请求 SSE-S3，或 启用了自动加密，则 MinIO 服务器会使用唯一的对象密钥对每个对象进行加密，该对象密钥受 KMS 管理的主密钥保护。</p><p>KMS 将 MinIO 作为面向应用程序的存储系统与安全密钥存储区分开，并且 可以由专门的安全团队进行管理。MinIO 通过我们的 KES project 支持常用的 KMS 实现，例如 Hashicorp Vault。 通过 KES，可以利用存储基础架构（MinIO 群集）水平扩展 KMS。 通常，MinIO-KMS 基础结构如下所示：</p><pre><code>     ┌─────────┐         ┌────────────┐         ┌─────────┐  \n     │  MinIO  ├─────────┤ KES Server ├─────────┤   KMS   │ \n     └─────────┘         └────────────┘         └─────────┘  \n</code></pre><p>当您将存储基础架构扩展到多个 MinIO 群集时，您的架构应如下所示：</p><pre><code>    ┌────────────┐\n    │ ┌──────────┴─┬─────╮          ┌────────────┐\n    └─┤ ┌──────────┴─┬───┴──────────┤ ┌──────────┴─┬─────────────────╮\n      └─┤ ┌──────────┴─┬─────┬──────┴─┤ KES Server ├─────────────────┤\n        └─┤   MinIO    ├─────╯        └────────────┘            ┌────┴────┐\n          └────────────┘                                        │   KMS   │\n                                                                └─────────┘\n</code></pre><p><strong><code>请注意</code> </strong>，所有 MinIO 群集均仅具有 <strong><code>其自己的</code> </strong>KES 实例的连接，而不能直接访问 Vault（作为一种可能的 KMS 实现）。 每个 KES 实例将处理 “其” MinIO 群集发出的所有加密 / 解密请求，从而使中央 KMS 实现不必处理 大量流量。相反，每个 KES 实例都将使用中央 KMS 实现作为安全密钥存储，并从中获取所需的主密钥。</p><p>该指南显示了如何使用 Hashicorp Vault 作为 KMS 实施来设置 MinIO-KMS 部署。 因此，它显示了如何设置和配置：</p><ul><li>Vault 服务器作为中央密钥库。</li><li>一个 KES 服务器实例，作为 MinIO 和保险柜之间的中间件。</li><li>MinIO 实例本身。</li></ul><p><strong><code>请注意，</code> </strong>为简便起见，本指南使用自签名证书。在生产部署中，应使用 由 “公共”（例如，让我们加密）或组织内部的 CA 颁发的 X.509 证书。</p><p>本指南说明如何在同一台计算机上设置三台不同的服务器：</p><ul><li>Vault 服务器为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMjcuMC4wLjE6ODIwMA==\">https://127.0.0.1:8200</span></li><li>KES 服务器为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMjcuMC4wLjE6NzM3Mw==\">https://127.0.0.1:7373</span></li><li>MinIO 在 K8s 上部署后 9000 映射到主机端口位 30007, 则服务器为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMjcuMC4wLjE6MzAwMDc=\">https://127.0.0.1:30007</span></li></ul><h2 id=\"先决条件\"><a class=\"anchor\" href=\"#先决条件\">#</a> 先决条件</h2><p>安装 MinIO，KES 和 Vault。对于 MinIO，请参阅 MinIO 快速入门指南。然后安装 KES 并下载 适用于您的操作系统和平台的最新 Vault 二进制文件.</p><h3 id=\"vault\"><a class=\"anchor\" href=\"#vault\">#</a> * Vault:</h3><pre><code>wget https://releases.hashicorp.com/vault/1.7.0-rc1/vault_1.7.0-rc1_linux_amd64.zip\nunzip vault_1.7.0-rc1_linux_amd64.zip\nmv vault /usr/local/bin/ # 如果cp过去的话, 下面启动vault server时候自动创建的vault文件夹会与此已存在的vault二进制文件冲突, 因此直接move过去.\n\n# vault 可以在Linux系统上使用 mlock syscall 来防止 OS 将内存中的数据写入磁盘（交换）\nsudo setcap cap_ipc_lock=+ep $(readlink -f $(which vault))\n</code></pre><h3 id=\"kes\"><a class=\"anchor\" href=\"#kes\">#</a> * KES:</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcyNiaW5hcnktcmVsZWFzZXM=\">https://github.com/minio/kes#binary-releases</span></p><pre><code>wget https://github.com/minio/kes/releases/latest/download/kes-linux-amd64\nmv kes-linux-amd64 kes\nchmod +x kes\ncp kes /usr/local/bin/\nkes -h\n\n# KES 可以在Linux系统上使用 mlock syscall 来防止 OS 将内存中的数据写入磁盘（交换）\nsudo setcap cap_ipc_lock=+ep $(readlink -f $(which kes))\n</code></pre><h3 id=\"minio\"><a class=\"anchor\" href=\"#minio\">#</a> * MinIO：</h3><pre><code>wget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\ncp minio /usr/local/bin/\n</code></pre><h3 id=\"mc\"><a class=\"anchor\" href=\"#mc\">#</a> * mc:</h3><pre><code>wget https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\n./mc --help\n</code></pre><h2 id=\"机器配置\"><a class=\"anchor\" href=\"#机器配置\">#</a> 机器配置</h2><table><thead><tr><th style=\"text-align:left\">IP</th><th style=\"text-align:left\">机器名</th><th style=\"text-align:left\">用途</th></tr></thead><tbody><tr><td style=\"text-align:left\">10.239.140.73</td><td style=\"text-align:left\">master</td><td style=\"text-align:left\">K8S 集群节点，master (去除污点), 部署 KMS, KES 到本机，MinIO 部署到 K8S 集群</td></tr><tr><td style=\"text-align:left\">10.239.131.157</td><td style=\"text-align:left\">laboratory</td><td style=\"text-align:left\">K8S 集群节点，master (去除污点)</td></tr></tbody></table><p>openssl 版本：</p><pre><code>$ openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\nbuilt on: reproducible build, date unspecified\nplatform: linux-x86_64\noptions:  bn(64,64) md2(int) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx)\ncompiler: gcc -I. -I.. -I../include  -fPIC -DOPENSSL_PIC -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DKRB5_MIT -m64 -DL_ENDIAN -Wall -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -Wa,--noexecstack -DPURIFY -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DRC4_ASM -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASM\nOPENSSLDIR: &quot;/etc/pki/tls&quot;\nengines:  rdrand dynamic\n</code></pre><h2 id=\"kmsvault\"><a class=\"anchor\" href=\"#kmsvault\">#</a> KMS(Vault)</h2><h3 id=\"为保险柜生成tls证书\"><a class=\"anchor\" href=\"#为保险柜生成tls证书\">#</a> 为保险柜生成 TLS 证书</h3><p>vault-crt.conf</p><pre><code>[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = state\nL = location\nO = organization\nCN = localhost\n\n[v3_req]\nsubjectAltName = @alt_names\n\n[alt_names]\n[alt_names]\nIP.1 = 127.0.0.1\nIP.2 = 10.239.140.73\nDNS.1 = localhost\nDNS.2 = master\n</code></pre><p>生成证书</p><pre><code># 使用ECDSA生成密钥\nopenssl ecparam -genkey -name prime256v1 | openssl ec -out vault-tls.key\nopenssl req -new -x509 -nodes -days 30 -key vault-tls.key -sha384 -out vault-tls.crt -config vault-crt.conf\n\n# 使用RSA生成密钥\nopenssl genrsa -out vault-tls.key 2048\nopenssl req -new -x509 -nodes -days 30 -key private.key -sha384 -out vault-tls.crt -config vault-crt.conf\n</code></pre><p>查看密钥和证书</p><pre><code># 查看ecdsa生成的密钥\nopenssl ec -in vault-tls.key -text -noout\n# 查看rsa生成的密钥\nopenssl rsa -in vault-tls.key -text -noout\n\n(Optional)# 查看csr\n(Optional)openssl req -in root-cert.csr -text -noout\n\n# 查看证书\nopenssl x509 -in vault-tls.crt -text -noout\n</code></pre><h3 id=\"创建保管库配置文件\"><a class=\"anchor\" href=\"#创建保管库配置文件\">#</a> 创建保管库配置文件</h3><pre><code>cat &gt; vault-config.json &lt;&lt;EOF\n{\n   &quot;api_addr&quot;: &quot;https://127.0.0.1:8200&quot;,\n   &quot;backend&quot;: {\n     &quot;file&quot;: {\n       &quot;path&quot;: &quot;vault/file&quot;\n     }\n   },\n  &quot;default_lease_ttl&quot;: &quot;168h&quot;,\n  &quot;max_lease_ttl&quot;: &quot;720h&quot;,\n  &quot;listener&quot;: {\n    &quot;tcp&quot;: {\n      &quot;address&quot;: &quot;0.0.0.0:8200&quot;,\n      &quot;tls_cert_file&quot;: &quot;vault-tls.crt&quot;,\n      &quot;tls_key_file&quot;: &quot;vault-tls.key&quot;,\n      &quot;tls_min_version&quot;: &quot;tls12&quot;\n    }\n  }\n}\nEOF\n</code></pre><p>请注意，我们使用文件后端运行 Vault。为了获得高可用性，您可能需要使用其他 后端，例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmF1bHRwcm9qZWN0LmlvL2RvY3MvY29uZmlndXJhdGlvbi9zdG9yYWdlL2V0Y2Q=\"> etcd</span> 或<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5oYXNoaWNvcnAuY29tL3R1dG9yaWFscy92YXVsdC9oYS13aXRoLWNvbnN1bA==\"> consul</span>.</p><h3 id=\"启动vault服务器\"><a class=\"anchor\" href=\"#启动vault服务器\">#</a> 启动 Vault 服务器：</h3><p>启动 vault server, 测试完终止后，下次直接运行此命令重启 vault server, 再用下面 三条 unseal 命令解封即可.</p><pre><code>vault server -config vault-config.json\n</code></pre><h3 id=\"初始化和解封保管箱\"><a class=\"anchor\" href=\"#初始化和解封保管箱\">#</a> 初始化和解封保管箱</h3><p>切换终端，在单独的终端窗口中设置环境 VAULT_ADDR。保险柜服务器的变量:</p><pre><code>export VAULT_ADDR='https://127.0.0.1:8200'\n// 如果Vault使用自签名TLS 证书，则可能要运行如下命令, 当Vault提供 由计算机信任的CA颁发的TLS证书（例如，让我们加密）时，则无需运行此命令.\nexport VAULT_SKIP_VERIFY=true\n// 初始化保险柜\nvault operator init\n</code></pre><p><strong><code>保管箱将打印n（默认情况下为5）解封密钥共享，其中至少m（至少3） 为重新生成实际解封密钥才能解封保管库.</code> </strong>因此，请务必 记住它们。特别是，请将那些未密封的密钥共享放在安全且持久的位置<br>您应该看到类似于以下内容的输出：</p><pre><code>CopyUnseal Key 1: eyW/+8ZtsgT81Cb0e8OVxzJAQP5lY7Dcamnze+JnWEDT\nUnseal Key 2: 0tZn+7QQCxphpHwTm6/dC3LpP5JGIbYl6PK8Sy79R+P2\nUnseal Key 3: cmhs+AUMXUuB6Lzsvgcbp3bRT6VDGQjgCBwB2xm0ANeF\nUnseal Key 4: /fTPpec5fWpGqWHK+uhnnTNMQyAbl5alUi4iq2yNgyqj\nUnseal Key 5: UPdDVPto+H6ko+20NKmagK40MOskqOBw4y/S51WpgVy/\n\nInitial Root Token: s.zaU4Gbcu0Wh46uj2V3VuUde0\n\nVault is initialized with 5 key shares and a key threshold of 3. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated master key. Without at least 3 key to\nreconstruct the master key, Vault will remain permanently sealed!\n\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See &quot;vault operator rekey&quot; for more information.\n</code></pre><p>设置环境，变量 <strong><code>VAULT_TOKEN</code> </strong>到命令之前打印的根令牌</p><pre><code>export VAULT_TOKEN=s.zaU4Gbcu0Wh46uj2V3VuUde0\n</code></pre><p>然后，使用任何先前生成的密钥共享来打开 Vault 的密封.</p><pre><code>vault operator unseal eyW/+8ZtsgT81Cb0e8OVxzJAQP5lY7Dcamnze+JnWEDT\nvault operator unseal 0tZn+7QQCxphpHwTm6/dC3LpP5JGIbYl6PK8Sy79R+P2\nvault operator unseal cmhs+AUMXUuB6Lzsvgcbp3bRT6VDGQjgCBwB2xm0ANeF\n</code></pre><p>提交足够的有效密钥共享后，保管箱将被解封 并能够处理请求。</p><h3 id=\"启用保险柜的kv后端\"><a class=\"anchor\" href=\"#启用保险柜的kv后端\">#</a> 启用保险柜的 K/V 后端.</h3><p>加密主密钥（而不是对象加密密钥）将存储 在 Vault 中。因此，我们需要启用 Vault 的 K/V 后端。为此，请运行：</p><pre><code>vault secrets enable kv\n</code></pre><p>为 K/V 引擎 创建访问策略.<br>以下策略确定应用程序（即 KES 服务器）如​​何 与 Vault 交互.</p><pre><code>cat &gt; minio-kes-policy.hcl &lt;&lt;EOF\npath &quot;kv/minio/*&quot; {\n  capabilities = [ &quot;create&quot;, &quot;read&quot;, &quot;delete&quot; ]\n}\nEOF\n</code></pre><p>观察在 <strong><code>kv/minio/*</code> </strong>的路径前缀 <strong><code>minio</code> </strong>, 此前缀确保 KES 服务器只能在 <strong><code>minio/-</code> </strong>下进行读取，而只能在 - 下进行写入 <code>some-app/</code> . 如何在 K/V 引擎上分隔域取决于您的基础结构 和安全要求。</p><p>然后，我们将政策上传到保险柜：</p><pre><code>vault policy write minio-key-policy ./minio-kes-policy.hcl\n</code></pre><h3 id=\"启用approle身份验证\"><a class=\"anchor\" href=\"#启用approle身份验证\">#</a> 启用 AppRole 身份验证</h3><p>由于我们希望稍后将一个 / 多个 KES 服务器连接到 Vault，因此必须启用 AppRole 身份验证。为此，请运行：</p><pre><code>vault auth enable approle\n</code></pre><p>创建一个新的 AppRole ID 并将其绑定到策略.<br>创建一个新的 AppRole ID 并授予该 ID 特定的权限。 该应用程序（即 KES 服务器）将通过 AppRole 角色 ID 和机密 ID 向 Vault 进行身份验证，并且仅允许执行特定策略授予的操作.</p><pre><code># 我们首先为KES服务器创建一个新角色:\nvault write auth/approle/role/kes-role token_num_uses=0  secret_id_num_uses=0  period=5m\n\n# 然后，我们将策略绑定到角色：\nvault write auth/approle/role/kes-role policies=minio-key-policy\n\n# 最后，我们从Vault请求AppRole角色ID和秘密ID。\n首先是角色ID：\nvault read auth/approle/role/kes-role/role-id \n\tfe46e329-bb70-2342-9fac-f3964a447d07\n\n# 然后是秘密ID：\nvault write -f auth/approle/role/kes-role/secret-id\n\t50646d24-5589-bba9-3f99-15ef2ae7e100\n</code></pre><p>我们只对 secret_id 感兴趣，不包括 secret_id_accessor.</p><h2 id=\"kes-2\"><a class=\"anchor\" href=\"#kes-2\">#</a> KES</h2><h3 id=\"生成kes证书和私钥\"><a class=\"anchor\" href=\"#生成kes证书和私钥\">#</a> 生成 KES 证书和私钥</h3><p><strong><code>此部署文档将Kes和MinIO共用相同的private.key和public.crt</code></strong><br>上面私匙和证书名字不要改变，因为 MinIO 的私匙和证书必须是 private.key 和 public.crt,</p><p>kes-minio-crt.conf:</p><pre><code>[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = state\nL = location\nO = organization\nCN = localhost\n\n[v3_req]\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 127.0.0.1\nIP.2 = 10.239.140.73\nDNS.1 = *.minio-hl-svc.minio.svc.cluster.local\nDNS.2 = master\nDNS.3 = localhost\n</code></pre><p>连接到 KES 服务器（mTLS）时，每个用户或应用程序必须出示有效的 X.509 证书。 KES 服务器将接受 / 拒绝连接尝试，并根据证书应用策略。</p><p>因此，每个 MinIO 群集都需要一个 X.509 TLS 证书来进行客户端身份验证。可以通过运行以下命令来创建 MinIO（自签名）证书.</p><pre><code># 使用ECDSA生成密钥\nopenssl ecparam -genkey -name prime256v1 | openssl ec -out minio-pki/private.key\nopenssl req -new -x509 -nodes -days 730 -key minio-pki/private.key -sha384 -out minio-pki/public.crt -config kes-minio-crt.conf\n\n# 使用RSA生成密钥\nopenssl genrsa -out private.key 2048\nopenssl req -new -x509 -nodes -days 730 -key minio-pki/private.key -out minio-pki/public.crt -config kes-minio-crt.conf\n\n# KES和MinIO共用相同的证书和私钥, 因此拷贝一份MinIO密钥和证书给KES用:\ncp minio-pki/private.key ./kes-server.key\ncp minio-pki/public.crt ./kes-server.crt\n</code></pre><p>注意，MinIO 是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWC41MDkjU3RydWN0dXJlX29mX2FfY2VydGlmaWNhdGU=\"> subject name</span>。 您可以为您的部署方案选择一个更合适的名称。此外，对于生产部署，我们 建议获取由 CA 颁发的用于客户端身份验证的 TLS 证书。</p><p>要获取 MinIO 的 X.509 证书的身份，请运行：</p><pre><code>kes tool identity of minio-pki/public.crt\n# 此命令可与任何（有效）X.509证书一起使用-无论如何创建它-并 产生类似于以下内容的输出：\n  Identity: dd46485bedc9ad2909d2e8f9017216eec4413bc5c64b236d992f7ec19c843c5f\n\n# 设置环境变量\nexport APP_IDENTITY=dd46485bedc9ad2909d2e8f9017216eec4413bc5c64b236d992f7ec19c843c5f\n</code></pre><h3 id=\"创建kes配置文件\"><a class=\"anchor\" href=\"#创建kes配置文件\">#</a> 创建 KES 配置文件</h3><p>创建 KES 配置文件并启动 KES 服务器.</p><pre><code>cat &gt; kes-server-config.yml &lt;&lt;EOF\naddress: 0.0.0.0:7373\nroot:    disabled  # We disable the root identity since we don't need it in this guide\n\ntls:\n  key:  kes-server.key\n  cert: kes-server.crt\n\npolicy:\n  my-app:\n    paths:\n    - /v1/key/create/minio-*\n    - /v1/key/generate/minio-*\n    - /v1/key/decrypt/minio-*\n    identities:\n    - ${APP_IDENTITY}\n\ncache:\n  expiry:\n    any:    5m0s\n    unused: 20s\n\nkeys:\n  vault:\n    endpoint: https://127.0.0.1:8200\n    prefix: minio\n    approle:\n      id:     &quot;fe46e329-bb70-2342-9fac-f3964a447d07&quot; # Your AppRole ID: $ vault read auth/approle/role/kes-role/role-id\n      secret: &quot;50646d24-5589-bba9-3f99-15ef2ae7e100&quot; # Your AppRole Secret ID: $ vault write -f auth/approle/role/kes-role/secret-id\n      retry:  15s\n    status:\n      ping: 10s\n    tls:\n      ca: &quot;vault-tls.crt&quot; # Since we use self-signed certificates\n\nEOF\n</code></pre><p>请 identities 在 policy 部分中将的值更改为您的身份 minio-pki/public.crt, 或者在终端运行 <strong><code>export APP_IDENTITY=dd46485bedc9ad2909d2e8f9017216eec4413bc5c64b236d992f7ec19c843c5f</code></strong><br>另外，插入您在保险柜设置过程中之前创建的 AppRole 角色 ID 和密码 ID。 您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcy9ibG9iL21hc3Rlci9zZXJ2ZXItY29uZmlnLnlhbWw=\">在此处</span>找到包含所有可用参数的文档化配置文件.</p><p>最后，通过以下方式启动 KES 服务器：</p><pre><code>kes server --mlock --config=kes-server-config.yml --auth=off\n</code></pre><p><strong><code>--auth=off</code> </strong>is required since our root.cert and app.cert certificates are self-signed.<br>The <strong><code>--mlock</code> </strong>option is currently only available on Linux.</p><p>有关 KES 访问控制模型和身份验证的更多信息:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL2tlcy93aWtpL0NvbmNlcHRz\">KES Concepts</span></p><h3 id=\"创建一个新的主密钥\"><a class=\"anchor\" href=\"#创建一个新的主密钥\">#</a> 创建一个新的主密钥</h3><p>在继续进行 MinIO 设置之前，我们需要创建一个新的主密钥。因此，我们使用 MinIO 身份和 KES CLI。</p><p>在新的终端窗口中，通过以下方式成为 MinIO 身份：</p><pre><code>export KES_CLIENT_CERT=minio-pki/public.crt\nexport KES_CLIENT_KEY=minio-pki/private.key\n</code></pre><p>然后运行以下命令来创建主密钥：</p><pre><code># 设置访问vault变量:\nexport VAULT_SKIP_VERIFY=true\nexport VAULT_TOKEN=s.zaU4Gbcu0Wh46uj2V3VuUde0\n\n# 创建主密钥:\nkes key create -k minio-key-1\n\n# 查看所有key-value文件夹\nvault kv list kv/\n  Keys\n  ----\n  minio/\n  test01\n\n# 查看某个文件夹下有哪些主密钥\nvault kv list kv/minio\n  Keys\n  ----\n  minio-key-1\n  minio-key-2\n\n# 获取某个主密钥数据信息\nvault kv get kv/minio/minio-key-1\n  ======= Data =======\n  Key            Value\n  ---            -----\n  minio-key-1    {&quot;bytes&quot;:&quot;rrjxB3THaSzSGaJ2mUwWDjT/+Tvgb5XbECPi3P9rgBs=&quot;}\n\n</code></pre><p>由于我们使用自签名证书，因此仅需要 <strong><code>-k</code> </strong>标志.<br>另外，请注意，基于服务器配置文件， 仅允许 MinIO 标识创建 / 使用以开头的主密钥 <code>minio-</code> . 因此，尝试创建密钥（例如） <code>kes key create my-key-1 -k</code> 将失败，并出现策略错误禁止的消息.</p><h2 id=\"minio-2\"><a class=\"anchor\" href=\"#minio-2\">#</a> MinIO</h2><p>minio 的证书和私钥请参考上面 KES 生成 minio-pki/private.key 和 minio-pki/public.crt 步骤.</p><p>MinIO 服务器将需要知道 KES 服务器端点， 用于身份验证和授权的 mTLS 客户端证书以及默认的主密钥名称.</p><h3 id=\"搭建本地minio服务\"><a class=\"anchor\" href=\"#搭建本地minio服务\">#</a> 搭建本地 minio 服务</h3><p>MinIO 服务器将需要知道 KES 服务器端点， 用于身份验证和授权的 mTLS 客户端证书以及默认的主密钥名称.</p><pre><code>export MINIO_KMS_KES_ENDPOINT=https://10.239.140.73:7373\nexport MINIO_KMS_KES_CERT_FILE=minio-pki/public.crt\nexport MINIO_KMS_KES_KEY_FILE=minio-pki/private.key\nexport MINIO_KMS_KES_CA_PATH=kes-server.crt\nexport MINIO_KMS_KES_KEY_NAME=minio-key-1\n</code></pre><p>由于我们使用自签名证书，因此只需要 ** <code>MINIO_KMS_KES_CA_PATH</code> **</p><p>然后启动 MinIO 服务器：</p><pre><code>export MINIO_ACCESS_KEY=minio\nexport MINIO_SECRET_KEY=minio123\nrm -rf /root/.mc\nrm -rf /root/.minio\nminio server --certs-dir ./minio-pki ./data\n * 指定上传minio server端证书存放路径文件夹为: ./minio-pki\n * minio存储的数据保存到data目录\n</code></pre><p>切换终端，启动自动加密，如果在 K8S 上部署 MinIO server enable 了密钥和证书，则执行下面类似命令时候都要加上 <strong><code>--insecure</code> </strong>, 信任自签的证书.</p><pre><code># 设置server服务地址\nmc alias set myminio https://10.239.140.73:9000 minio minio123 --insecure\n\n# 创建bucket\nmc mb myminio/test01 --insecure\n\n# 加密minio 已存在的某个 bucket\nmc encrypt set sse-s3 myminio/test01/ --insecure\nmc encrypt info myminio/test01/ --insecure\n  Auto encryption 'sse-s3' is enabled\n\n# 将本地文件synk.jpg上传到minio\nmc cp synk.jpg myminio/test01/ --insecure\n\n# 查看上传文件状态, 可以看到已自动加密\nmc stat myminio/test01/synk.jpg --insecure\n  Name      : synk.jpg\n  Date      : 2021-03-15 11:54:36 CST\n  Size      : 112 B\n  ETag      : 2ced7fb62d324c643aeb21eccbe86eeb\n  Type      : file\n  Metadata  :\n    Content-Type: application/x-sh\n  Encrypted :\n    X-Amz-Server-Side-Encryption: AES256\n\n# 将上传的文件下载到本地\nmc cp myminio/test01/synk.jpg 001.jpg --insecure\n</code></pre><h3 id=\"k8s上搭建minio\"><a class=\"anchor\" href=\"#k8s上搭建minio\">#</a> k8s 上搭建 minio</h3><!-- rebuild by hrmmi -->",
            "tags": [
                "storage",
                "minio",
                "storage"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/entertainment/test/",
            "url": "https://kung-fu-master.github.io/2021/03/13/entertainment/test/",
            "title": "test",
            "date_published": "2021-03-13T05:18:00.216Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:22 GMT+0800 (中国标准时间) --><h2 id=\"test-001\"><a class=\"anchor\" href=\"#test-001\">#</a> test 001</h2><!-- rebuild by hrmmi -->",
            "tags": [
                "entertainment"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/windows/windows%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/",
            "url": "https://kung-fu-master.github.io/2021/03/13/windows/windows%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/",
            "title": "windows批量修改文件名",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"批量删除文件名中的空格\"><a class=\"anchor\" href=\"#批量删除文件名中的空格\">#</a> <strong>批量删除文件名中的空格</strong></h2><p>在要批量修改文件名的文件夹路径下创建新 bat 文件 <code>delete_space.bat</code> , 内容如下:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@echo off</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Setlocal Enabledelayedexpansion</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"str= \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> /f <span class=\"token string\">\"delims=\"</span> %%i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'dir /b *.*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"var=%%i\"</span> <span class=\"token operator\">&amp;</span> ren <span class=\"token string\">\"%%i\"</span> <span class=\"token string\">\"!var:%str%=!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>保存后直接双击即可</p><p><a id=\"more\"></a></p><h2 id=\"批量修改文件名\"><a class=\"anchor\" href=\"#批量修改文件名\">#</a> <strong>批量修改文件名</strong></h2><p>如上操作在要批量修改文件名的文件夹下创建 <code>rename_or_delete_specified_str.bat</code> , 内容如下:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@echo off</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> /p <span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span> 请输入要替换的文件<span class=\"token punctuation\">(</span>文件夹<span class=\"token punctuation\">)</span>名字符串（可替换空格）：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> /p <span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span> 请输入替换后的文件<span class=\"token punctuation\">(</span>文件夹<span class=\"token punctuation\">)</span>名字符串（去除则直接回车）：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>echo.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> 正在修改文件<span class=\"token punctuation\">(</span>夹<span class=\"token punctuation\">)</span>名中，请稍候……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> /f <span class=\"token string\">\"delims=\"</span> %%a <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'dir /s /b ^|sort /+65535'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">\"%%~nxa\"</span> neq <span class=\"token string\">\"%~nx0\"</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"file=%%a\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"name=%%~na\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"extension=%%~xa\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>call <span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"name=%%name:%str1%=%str2%%%\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>setlocal enabledelayedexpansion</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ren <span class=\"token string\">\"!file!\"</span> <span class=\"token string\">\"!name!!extension!\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>nul</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>endlocal</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><p>直接双击执行，输入 <code>要修改的文件名中的字符串</code> ，再输入 <code>要替换成的字符串</code> ，如果不输入要替换的字符串而是直接回车则相当于 <code>删除要修改的字符串</code> .</p><!-- rebuild by hrmmi -->",
            "tags": [
                "windows"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/windows/Windows10_VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%BC%96%E8%BE%91%E8%B0%83%E8%AF%95/",
            "url": "https://kung-fu-master.github.io/2021/03/13/windows/Windows10_VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%BC%96%E8%BE%91%E8%B0%83%E8%AF%95/",
            "title": "Windows10_VScode远程连接linux编辑调试",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><ol><li>查看 Windows10 是否已安装或开启 ssh-client，默认 Windows10 自带的有<br>Windows 10 : 设置 -&gt; 应用 (APPS) -&gt; 应用和功能 (APP &amp; features) -&gt; 管理可选功能 (Manage app execution aliases)<br><img data-src=\"1.png\" alt=\"\"></li></ol><p><a id=\"more\"></a></p><p>没有的话需要点击如图上面的 Add a feature，install 一下.</p><ol start=\"2\"><li>Centos</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. //安装 yum <span class=\"token function\">install</span> -y openssl openssh-server </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t//重启sshd服务 systemctl restart sshd.service </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t//自动启动 systemctl <span class=\"token builtin class-name\">enable</span> sshd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">2</span>. <span class=\"token variable\">$cd</span> ~/.ssh/</pre></td></tr></table></figure><p>此目录如果没有 authorized_keys 文件需要 touch 新建一个，里面需要存放 Window10 的公匙 (id_rsa.pub, 另外 id_rsa 是 Window10 的密匙).</p><ol start=\"3\"><li>安装 VS code， 安装扩展 (Extensions)&quot;Remote Developoment&quot; 插件，会自动安装其他的 Remote 插件，其中会包含 Remote-SSH<br>安装完成出现如下选项<br><img data-src=\"2.png\" alt=\"\"></li></ol><p>添加 config 文件<br><img data-src=\"3.png\" alt=\"\"></p><p>添加 linux 主机</p><pre><code>Host 后面接空格，名字随便写，显示在左边\nHostName 主机IP\nUser root\n</code></pre><p><img data-src=\"4.png\" alt=\"\"></p><p>右击要连接的 linux，选择在当前页面或新打开 Vscode<br><img data-src=\"5.png\" alt=\"\"></p><p>输入 linux 登录密码，如果出现需要输入密码多次可能之前链接过，在 linux <code>/root/.vscode-server</code> 生成有文件，删掉，再重新用 Vscode 链接…<br><img data-src=\"6.png\" alt=\"\"><br>观察 VScode 右下角等待连接成功<br>Setting up SSH Host UserName:(details) Downloading VS Code Server<br><img data-src=\"7.png\" alt=\"\"></p><p>最后点击 Open folder 就可以了</p><p>后边遇到 vscode 一直连不上 linux 情况<br>解决方法一:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">df</span> -hl 查看linux ~/ 等主目录是否已占满，删除一些文件释放空间后再连接就可以了</pre></td></tr></table></figure><p>解决方法二:<br>是查看 linux /tmp 临时文件发现占满了，全部删掉，再用 windows 上得 VS code 连接就可以了<br>原因是 vscode 连接 linxu 会自动在 linux 的 /tmp 生成一些文件</p><h2 id=\"linux-重装系统后再用windowsshangvscode连接报如下错误\"><a class=\"anchor\" href=\"#linux-重装系统后再用windowsshangvscode连接报如下错误\">#</a> Linux 重装系统后再用 windowsshangVScode 连接报如下错误:</h2><pre><code>Could not establish connection to &quot;IP&quot;. The process tried to write to a nonexistent pipe.\n</code></pre><p>原因是 windows 与 linux 连接成功后会在 C:\\Users\\ 用户名.ssh\\known_hosts 添加对应 Linux 的密匙信息，把它相关的内容删掉.</p><h2 id=\"vscode-连接linux-waiting-for-rootvscode-serverbinvscode-scp-doneflag-and-vscode-servertargz-to-exist\"><a class=\"anchor\" href=\"#vscode-连接linux-waiting-for-rootvscode-serverbinvscode-scp-doneflag-and-vscode-servertargz-to-exist\">#</a> VScode 连接 Linux Waiting for /root/.vscode-server/bin/***/vscode-scp-done.flag and vscode-server.tar.gz to exist</h2><p>解决方法如下链接:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RpbmcxOTk1MDEwNy9hcnRpY2xlL2RldGFpbHMvMTAzNzEzNTU2\">参考链接</span></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> vscode</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> -9 PID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span> -rf ~/.vscode-server</pre></td></tr></table></figure><p>再重新用 Vscode 链接</p><h2 id=\"vscode链接远程机器一致让输入远程机器密码\"><a class=\"anchor\" href=\"#vscode链接远程机器一致让输入远程机器密码\">#</a> VScode 链接远程机器一致让输入远程机器密码</h2><p>解决方法是登陆远程机器然后删除 /root/.vscode-server/bin/ 下最新的文件夹如</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /root/.vscode-server/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ls</span> -alh </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  drwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">106</span> Oct  <span class=\"token number\">9</span> <span class=\"token number\">10</span>:00 58bb7b2331731bf72587010e943852e13e6fd3cf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  drwxr-xr-x <span class=\"token number\">6</span> root root <span class=\"token number\">150</span> Sep <span class=\"token number\">13</span> <span class=\"token number\">18</span>:28 a0479759d6e9ea56afa657e454193f72aef85bd0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  drwxr-xr-x <span class=\"token number\">6</span> root root <span class=\"token number\">150</span> Sep <span class=\"token number\">16</span> <span class=\"token number\">13</span>:44 e790b931385d72cf5669fcefc51cdf65990efa5d</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">rm</span> -rf 58bb7b2331731bf72587010e943852e13e6fd3cf</pre></td></tr></table></figure><p>之后再次尝试用 VScode 连接远程机器就可以了</p><!-- rebuild by hrmmi -->",
            "tags": [
                "windows"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/windows/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%86%85%E5%AD%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/",
            "url": "https://kung-fu-master.github.io/2021/03/13/windows/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%86%85%E5%AD%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/",
            "title": "笔记本内存信息查询",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"内存频率和可用插槽查询\"><a class=\"anchor\" href=\"#内存频率和可用插槽查询\">#</a> 内存频率和可用插槽查询</h2><p>右键菜单栏 打开任务管理器，点击 <code>性能</code> 栏目，点击 <code>内存</code></p><p>已使用插槽后的数字分别对应就是已用内存插槽和可用内存插槽.</p><p>速度：展示内存条速率</p><p><img data-src=\"1.PNG\" alt=\"\"></p><h2 id=\"命令行查看内存详细信息\"><a class=\"anchor\" href=\"#命令行查看内存详细信息\">#</a> 命令行查看内存详细信息</h2><p>Win + R 输入 powershell 或 cmd 打开终端</p><p>在命令行界面输入 wmic 进入命令行系统管理执行脚本界面；</p><p>可以通过命令 memorychip 进行查看内存型号，可以看出，有 1 条内存，存储大小，型号，PN 号也可以看出</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>hp<span class=\"token operator\">></span> wmic</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twmic:root<span class=\"token punctuation\">\\</span>cli<span class=\"token operator\">></span>memorychip</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tAttributes  BankLabel  Capacity    Caption   ConfiguredClockSpeed  ConfiguredVoltage  CreationClassName     DataWidth  Description  DeviceLocator         FormFactor  HotSwappable  InstallDate  InterleaveDataDepth  InterleavePosition  Manufacturer  MaxVoltage  MemoryType  MinVoltage  Model  Name      OtherIdentifyingInfo  PartNumber        PositionInRow  PoweredOn  Removable  Replaceable  SerialNumber  SKU  SMBIOSMemoryType  Speed  Status  Tag                TotalWidth  TypeDetail  Version</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">1</span>           BANK <span class=\"token number\">2</span>     <span class=\"token number\">8589934592</span>  物理内存   <span class=\"token number\">2400</span>                  <span class=\"token number\">1200</span>               Win32_PhysicalMemory  <span class=\"token number\">64</span>         物理内存     Bottom-Slot <span class=\"token number\">2</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>   <span class=\"token number\">12</span>                                     <span class=\"token number\">1</span>                    <span class=\"token number\">2</span>                   Samsung       <span class=\"token number\">1350</span>        <span class=\"token number\">0</span>           <span class=\"token number\">1250</span>               物理内存                        M471A1K43CB1-CRC  <span class=\"token number\">1</span>                                                 9757621F           <span class=\"token number\">26</span>                <span class=\"token number\">2400</span>           Physical Memory <span class=\"token number\">1</span>  <span class=\"token number\">64</span>          <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\twmic:root<span class=\"token punctuation\">\\</span>cli<span class=\"token operator\">></span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "windows"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/git/git_problems_encountered/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/git/git_problems_encountered/",
            "title": "git problems encountered",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"查看github-贡献最多和增长最快链接\"><a class=\"anchor\" href=\"#查看github-贡献最多和增长最快链接\">#</a> 查看 github 贡献最多和增长最快链接:</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vY3RvdmVyc2UuZ2l0aHViLmNvbS8jZmFzdGVzdC1ncm93aW5nLW9zcy1wcm9qZWN0cy1ieS1jb250cmlidXRvcnM=\">https://octoverse.github.com/#fastest-growing-oss-projects-by-contributors</span></p><p><a id=\"more\"></a></p><h2 id=\"git-branch只能看到master分支\"><a class=\"anchor\" href=\"#git-branch只能看到master分支\">#</a> git branch 只能看到 master 分支</h2><p>执行 <code>git init</code> 命令后再执行 <code>git clone ...</code> , 之后执行 <code>git branch -a</code> , 发现只有 master 分支，远程还有其它分支但是看不到.</p><p>解决方法:</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ vim .git/config</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t// 添加如下内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t[remote \"origin\"]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\turl = https://***.git\t// 跟git clone 后面跟的地址一样, 也就是项目所在地址.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfetch = +refs/heads/*:refs/remotes/origin/*\t\t// 必须加上这一行</pre></td></tr></table></figure><p>之后回到上一层目录，然后 fetch 远程分支</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> fetch origin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t输入用户名密码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token function\">git</span> branch -a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t即可查看到远程所有分支</pre></td></tr></table></figure><h2 id=\"解决git-bash-终端显示中文乱码\"><a class=\"anchor\" href=\"#解决git-bash-终端显示中文乱码\">#</a> 解决 git bash 终端显示中文乱码</h2><p>在 git bash 的界面中右击空白处，弹出菜单，选择选项 -&gt; 文本 -&gt; 本地 Locale，设置为 zh_CN，而旁边的字符集选框选为 UTF-8</p><pre><code>1. git bash打开鼠标右击 -&gt; 选项 -&gt; 文本 -&gt; 本地Locale，设置为zh_CN，而旁边的字符集选框选为UTF-8\n2. `git config --global core.quotepath false` 可以不用重启gitbash终端可解决\n</code></pre><p>补充说明:</p><pre><code>git config --global core.quotepath false          # 显示 status 编码\ngit config --global gui.encoding utf-8            # 图形界面编码\ngit config --global i18n.commit.encoding utf-8    # 提交信息编码\ngit config --global i18n.logoutputencoding utf-8  # 输出 log 编码\nset LESSCHARSET=utf-8\n</code></pre><p>另外，<strong> <code>Local</code> </strong>设置为 <strong><code>zh_CN</code> </strong>编码格式转换成 <strong><code>gbk(Chinese)</code> </strong>也行</p><h2 id=\"git-push免密登陆方法\"><a class=\"anchor\" href=\"#git-push免密登陆方法\">#</a> git push 免密登陆方法</h2><ol><li>创建文件 C:\\Users\\hp.git-credentials (Windows 系统，惠普电脑，其它种类 OS 和厂商路径类似)</li></ol><p>打开并添加内容 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8lN0J1c2VybmFtZSU3RDolN0JwYXNzd29yZCU3REBnaXRodWIuY29t\">https://{username}:{password}@github.com</span></p><p>2. 添加 git config 内容</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global credential.helper store</pre></td></tr></table></figure><p>执行此命令后，用户主目录下的.gitconfig 文件会多了一项：[credential]<br>helper = store</p><p>重新 git push 就不需要用户名密码了</p><h2 id=\"git提示warning-lf-will-be-replaced-by-crlf\"><a class=\"anchor\" href=\"#git提示warning-lf-will-be-replaced-by-crlf\">#</a> git 提示 “warning: LF will be replaced by CRLF”</h2><p>遇到此问题场景：在 windows 上用 git 提交 linux 文件，这是因为在文本处理中，CR（CarriageReturn），LF（LineFeed），CR/LF 是不同操作系统上使用的换行符.</p><ul><li>Dos 和 Windows 平台：使用回车（CR）和换行（LF）两个字符来结束一行，回车 + 换行 (CR+LF)，即 “\\r\\n”；</li><li>Mac 和 Linux 平台：只使用换行（LF）一个字符来结束一行，即 “\\n”；<br>所以我们平时在 windows 上编写文件的 <code>回车符</code> 应该确切来说叫做 <code>回车换行符</code> .</li></ul><p>许多 Windows 上的编辑器会悄悄把行尾的换行（LF）字符转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符.</p><p><strong>影响：</strong></p><ul><li>Unix/Mac 系统下的文件在 Windows 里打开的话，所有文字会变成一行.</li><li>而 Windows 里的文件在 Unix/Mac 下打开的话，在每行的结尾可能会多出一个 ^M 符号.</li><li>Linux 保存的文件在 windows 上用记事本看的话会出现黑点.<br>通过一定方式进行转换统一:</li></ul><pre><code>\t在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式\n\t命令dos2unix 是把windows格式转换成linux文件格式.\n</code></pre><p><strong>情况一:</strong><br>Git 可以在你提交时自动地把回车 (CR) 和换行 (LF) 转换成换行 (LF), 而在检出代码时把换行 (LF) 转换成回车 (CR) 和换行 (LF).<br>如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行.</p><p><strong>提交时转换为 LF，检出时转换为 CRLF</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global core.autocrlf <span class=\"token boolean\">true</span></pre></td></tr></table></figure><p><strong>情况二:</strong><br>可以把 core.autocrlf 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换，这样在 Windows 上的检出文件中会保留回车和换行，而在 Mac 和 Linux 上，以及版本库中会保留换行.</p><p><strong>提交时转换为 LF，检出时不转换</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global core.autocrlf input</pre></td></tr></table></figure><p><strong>情况三:</strong><br>如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车保留在版本库中.</p><p><strong>提交检出均不转换</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global core.autocrlf <span class=\"token boolean\">false</span></pre></td></tr></table></figure><p><strong>你也可以在文件提交时进行 safecrlf 检查</strong></p><p><strong>拒绝提交包含混合换行符的文件</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global core.safecrlf <span class=\"token boolean\">true</span></pre></td></tr></table></figure><p><strong>允许提交包含混合换行符的文件</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global core.safecrlf <span class=\"token boolean\">false</span></pre></td></tr></table></figure><p><strong>提交包含混合换行符的文件时给出警告</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global core.safecrlf warn</pre></td></tr></table></figure><p><strong>通俗解释</strong></p><ul><li>git 的 Windows 客户端基本都会默认设置 core.autocrlf=true，设置 core.autocrlf=true, 只要保持工作区都是纯 CRLF 文件，编辑器用 CRLF 换行，就不会出现警告了.</li><li>Linux 最好不要设置 core.autocrlf，因为这个配置算是为 Windows 平台定制.</li><li>Windows 上设置 core.autocrlf=false，仓库里也没有配置 .gitattributes，很容易引入 CRLF 或者混合换行符（Mixed Line Endings，一个文件里既有 LF 又有 CRLF）到版本库，这样就可能产生各种奇怪的问题.</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "git",
                "git"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/maven_eclipse_tomcat_JDK1.8_configuration/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/maven_eclipse_tomcat_JDK1.8_configuration/",
            "title": "Maven_eclipse_tomcat_JDK1.8_configuration",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><p>Windows 环境:</p><p>下载 Maven，搜集网上配置 PATH 环境变量等<br>$ vim apache-maven-3.6.3\\conf\\settings.xml<br>$ C:\\Users\\UserName.m2\\settings.xml (没有.m2 路径就不设)</p><p><a id=\"more\"></a></p><ol><li>设置 local repository: //maven 从中央仓库下载到本地仓库</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>C:\\Users\\UserName\\***\\software_package\\Maven\\maven_repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\"><li>设置 proxy:</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>proxy</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>my-proxy1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>active</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>active</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>protocol</span><span class=\"token punctuation\">></span></span>http<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>protocol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>host</span><span class=\"token punctuation\">></span></span>child-prc.intel.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>host</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>913<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>proxy</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>proxy</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>my-proxy2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>active</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>active</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>protocol</span><span class=\"token punctuation\">></span></span>https<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>protocol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>host</span><span class=\"token punctuation\">></span></span>child-prc.intel.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>host</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>913<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>proxy</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\"><li>设置 tomcat 用户名和密码，如果 tomcat 安装时候或安装后 tomcat 的配置文件没有设置用户名和密码此处可忽略</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>tomcat8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span>admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>设置 aliyun 镜像:</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrors</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>nexus-aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>central<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Nexus aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://maven.aliyun.com/nexus/content/repositories/central<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!--&lt;url>http://maven.aliyun.com/nexus/content/groups/public&lt;/url>--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrors</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>打开 cmd 控制台输入：mvn -v 查看版本</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ mvn help:system\t\t// 可看到数据正常下载即为成功</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// $ <span class=\"token function\">ping</span> repo1.maven.org //此远程repo好像不能访问，不过没关系，上面成功即可</pre></td></tr></table></figure><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※</p><p>安装 tomcat 服务器<br><span class=\"exturl\" data-url=\"aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==\">http://tomcat.apache.org/</span><br>然后配置到 eclipse</p><p>打开 C:\\Program Files\\Tomcat 8.5\\conf\\server.xml<br>网上说需把 &lt;Server port=&quot;-1&quot; shutdown=&quot;SHUTDOWN&quot;&gt; 改为 &lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;<br>这里没改，运行 OK</p><p>打开 C:\\Program Files\\Tomcat 8.5\\conf\\tomcat-users.xml<br>添加如下内容，设置 tomcat 密码，也可以不设置，设置后需要在 maven 的 **\\config\\settings.xml 配置文件中也添加 tomcat 密码</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>role</span> <span class=\"token attr-name\">rolename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>role</span> <span class=\"token attr-name\">rolename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manager-gui<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>role</span> <span class=\"token attr-name\">rolename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>role</span> <span class=\"token attr-name\">rolename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin-gui<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>role</span> <span class=\"token attr-name\">rolename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manager-script<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span> <span class=\"token attr-name\">username</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">password</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">roles</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin-gui,admin,manager-gui,manager,manager-script<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※<br>官网下载 eclipse（免费）<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWNsaXBzZS5vcmcvZG93bmxvYWRzLw==\">https://www.eclipse.org/downloads/</span><br>第一种：下载安装包:<br>直接点击下载，下载后安装选择 Eclipse IDE for Enterprise Java Developers 就可以了 (提前安装配置好 JDK1.8 等版本环境变量)<br>第二种： 下载压缩包 (解压缩时候有问题),<br>Download Packages -&gt; Eclipse IDE for Enterprise Java Developers (includes Incubating components) 压缩包<br>-&gt; 选择中国镜像 -&gt; 下载</p><ol><li>打开 eclipse, Window -&gt; Preferences -&gt; Maven -&gt; installations -&gt; Add -&gt; 选择自己装的 Maven，否则内嵌的 Maven 没有 proxy</li><li>打开 eclipse, Window -&gt; Preferences -&gt; Maven -&gt; User Settings<br>-&gt; Global/User Settings 都设置为 ***/apache-maven-3.6.3\\conf\\settings.xml -&gt; Update Settings -&gt; Apply -&gt; Apply and Close</li></ol><p>创建 maven web 项目并运行:</p><ol><li>File -&gt; New -&gt; maven Project -&gt; Create a simple project(skip archetype selection)<br>-&gt; Next -&gt; 输入 Group Id: com.test ,Artifact Id 输入 test_demo, Packaging： war (选择建立 web 服务此处必须选为 war)</li><li>右击项目名 点击最下面 Properties -&gt; Maven 下面的 Project Facets -&gt; 先不勾选 Dynamic Web Module，选择右边的 Runtimes 并选中安装过的 tomcat8.5<br>-&gt; Apply -&gt; Apply and close -&gt; 重新打开上面的页面 -&gt; 选中 Dynamic Web Module 并 修改右边 Version 试着选各个版本使支持<br>-&gt; 点击下面出现的 &quot;i Furtherconfiguration available...&quot; -&gt; Conten directory: 内容改为 &quot;src/main/webapp&quot;<br>-&gt; 勾选中下面的 Generate web.xml deployment descripter -&gt; Apply -&gt; Apply and Close</li><li>在 src/main/webapp 目录下新建个 index.js 文件内容如下:</li></ol><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    pageEncoding=\"ISO-8859-1\"%></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ISO-8859-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello test demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\"><li>右击项目名 -&gt; Run As -&gt; Run on Server， 如果没有 Run on Server 选项重新打开 Project Facets 页面再 Apply -&gt; Apply and Close</li><li>浏览器输入 http://localhost:8080/test_demo/ 即可看到信息: Hello test demo</li></ol><p>创建 Parent/jar/web 项目:</p><pre><code>File -&gt; New -&gt; Other -&gt; Maven -&gt; Maven Project 按照网上操作即可创建maven pom/jar/war三种项目，其中pom是父类管理其它jar和war(web)等project\n</code></pre><blockquote><p>创建好 maven 项目后，修改 jar 或 war 的 pom.xml (项目对象模型 (Project Object Modet,POM)) 文件后<br>鼠标右击 pom.xml -&gt; Maven -&gt; Update Project... -&gt; 可勾选下面的 Force Update of Snapshots/Releases -&gt; OK</p></blockquote><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#> eclipse for java ee 创建好maven web项目后会出错，原因是缺少webDemo/src/main/webapp/WEB-INF/web.xml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#第一种：\t手动创建文件夹WEB-INF和文件web.xml,然后添加如下内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#<span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee<span class=\"token punctuation\">\"</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">#</span>\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">#</span>\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>#\thttp://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class=\"token punctuation\">\"</span><span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>#第二种: 鼠标右击webDemo -> Java EE Tools -> Generate Deployment Descriptor Stub 即可自动生成上面的web.xml文件</pre></td></tr></table></figure><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※</p><p>VScode 配置 Maven 安装环境 创建 Maven 项目</p><p>File -&gt; Perferences -&gt; Settings -&gt; 搜索 Maven -&gt; 点击打开 &quot;Edit in settings.json&quot; 文件</p><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"remote.SSH.remotePlatform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token string\">\"10.239.85.244\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"10.239.65.163\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token class-name\">Windows</span> 添加配置如下内容<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\"java.home\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_241\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"java.configuration.maven.userSettings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Users\\\\UserName\\\\Desktop\\\\software_package\\\\apache-maven-3.6.3\\\\conf\\\\settings.xml\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">\"maven.executable.path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Users\\\\UserName\\\\Desktop\\\\software_package\\\\apache-maven-3.6.3\\\\bin\\\\mvn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token class-name\">Linux</span> 添加配置如下内容<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">\"java.home\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/local/jdk1.8/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">\"java.configuration.maven.userSettings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/maven/apache-maven-3.6.3/conf/settings.xml\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token string\">\"maven.executable.path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/maven/apache-maven-3.6.3/bin/mvn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token string\">\"maven.terminal.customEnv\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">\"environmentVariable\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JAVA_HOME\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//\"value\": \"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_241\"\t\t// Windows</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/local/jdk1.8\"</span>\t\t\t\t\t\t\t<span class=\"token comment\">// Linux</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">\"remote.SSH.configFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Users\\\\UserName\\\\.ssh\\\\config\"</span></pre></td></tr></table></figure><p>Ctrl + shift + P 选择 &quot;Maven:Create Maven Project&quot; 创建 Maven 项目<br>Select an archetype: 选择 maven-archetype-quickstart -&gt; 选择版本 -&gt; 选择生成目录<br>-&gt; VScode 终端 输入 Group Id: 如 com.imooc -&gt; 输入 Artifact Id: 如 microservice -&gt; 输入 package： 直接回车 -&gt; 输入 Version: 直接回车</p><ol><li>第一此创建 Maven 父 项目 pom.xml 没有 &lt;packaging&gt;pom&lt;/packaging&gt; 需要手动添加，右击 pom.xml -&gt; Update project configuration</li><li>创建子项目， 右击上面项目名， 选择 Create Maven Project ......'groupId': com.imooc -&gt; 'artifactId': test -&gt; 'version' 1.0-SNAPSHOT: : 回车</li><li>创建子项目后查看 pom.xml 可以发现自动添加了 &lt;parent&gt;&lt;/parent &gt; 标签</li></ol><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※</p><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※</p><p>※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※</p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "maven"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/maven_project/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/maven_project/",
            "title": "maven project",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"ubuntu1804-安装-intellij-idea\"><a class=\"anchor\" href=\"#ubuntu1804-安装-intellij-idea\">#</a> Ubuntu18.04 安装 IntelliJ idea</h2><pre><code>\thttps://blog.csdn.net/weixx3/article/details/81136822\n</code></pre><p><a id=\"more\"></a></p><h2 id=\"手动下载jar包并通过mvn安装到linux或windows环境供项目引用\"><a class=\"anchor\" href=\"#手动下载jar包并通过mvn安装到linux或windows环境供项目引用\">#</a> 手动下载 jar 包并通过 mvn 安装到 Linux 或 windows 环境，供项目引用</h2><pre><code>https://repo1.maven.org/maven2/ 或者https://mvnrepository.com/\n</code></pre><p>如在 pom.xml 添加依赖但是下载不下来</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.thrift<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>libthrift<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.10.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>浏览器连接 https://repo1.maven.org/maven2/org/apache/thrift/libthrift/ 查看指定版本如 0.10.0, 点击进去下载 libthrift-0.10.0.jar<br>执行如下命令</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/ai/IdeaProjects/microservice/user-thrift-service</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmvn install:install-file -Dfile<span class=\"token operator\">=</span>/usr/maven/maven_repository/org/apache/thrift/libthrift/libthrift-0.10.0.jar -DgroupId<span class=\"token operator\">=</span>org.apache.thrift -DartifactId<span class=\"token operator\">=</span>libthrift -Dversion<span class=\"token operator\">=</span><span class=\"token number\">0.10</span>.0 -Dpackaging<span class=\"token operator\">=</span>jar</pre></td></tr></table></figure><p>Maven 安装 JAR 包的命令是</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn install:install-file -Dfile<span class=\"token operator\">=</span>本地jar包的位置  -DgroupId<span class=\"token operator\">=</span>上面的groupId  -DartifactId<span class=\"token operator\">=</span>上面的artifactId  -Dversion<span class=\"token operator\">=</span>上面的version  -Dpackaging<span class=\"token operator\">=</span>jar</pre></td></tr></table></figure><p>到 maven 设置的 repository 里查看</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /usr/maven/maven_repository/org/apache/thrift/libthrift<span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">ls</span> -alh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tdrwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">4</span>.0K <span class=\"token number\">4</span>月   <span class=\"token number\">9</span> <span class=\"token number\">10</span>:41 <span class=\"token number\">0.10</span>.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">308</span> <span class=\"token number\">4</span>月   <span class=\"token number\">9</span> <span class=\"token number\">10</span>:41 maven-metadata-local.xml</pre></td></tr></table></figure><h2 id=\"linux-命令行方式-搭建编译测试运行calss文件打包运行jar包安装部署-清理-命令\"><a class=\"anchor\" href=\"#linux-命令行方式-搭建编译测试运行calss文件打包运行jar包安装部署-清理-命令\">#</a> Linux 命令行方式：搭建，编译，测试，运行 calss 文件，打包，运行 jar 包，安装，部署， 清理 命令.</h2><ol><li>搭建</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn archetype:generate  -DinteractiveMode<span class=\"token operator\">=</span>false -DgroupId<span class=\"token operator\">=</span>com.HCI -DartifactId<span class=\"token operator\">=</span>HCI -Dpackage<span class=\"token operator\">=</span>com.HCI</pre></td></tr></table></figure><p>查看</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.HCI<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>HCI<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>HCI<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://maven.apache.org<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\"><li>编译源代码</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn compile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmvn compile -Dcheckstyle.skip<span class=\"token operator\">=</span>true： 不需要进行代码style检查进行编译</pre></td></tr></table></figure><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVja3N0eWxlLm9yZy9jbWRsaW5lLmh0bWw=\">https://checkstyle.org/cmdline.html</span></p><p><img data-src=\"compile.JPG\" alt=\"\"></p><ol start=\"3\"><li>测试编译过的代码</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><ol start=\"4\"><li>执行编译过的代码</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// App换成自己的执行入口函数<span class=\"token punctuation\">(</span>文件<span class=\"token punctuation\">)</span>名称.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmvn exec:java -Dexec.mainClass<span class=\"token operator\">=</span><span class=\"token string\">\"com.HCI.App\"</span></pre></td></tr></table></figure><ol start=\"5\"><li>生成构件包（一般为 jar 包或 war 包）</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn package</pre></td></tr></table></figure><p><img data-src=\"jar.JPG\" alt=\"\"></p><ol start=\"6\"><li>拷贝 jar 包</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java -cp target/HCI-1.0-SNAPSHOT.jar com.HCI.App</pre></td></tr></table></figure><ol start=\"7\"><li>将构件包安装到本地仓库</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmvn <span class=\"token function\">install</span> -DskipTests： 跳过测试, 构建包到本地./target目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tjar xf search-image-by-image-rest-0.0.1-SNAPSHOT.jar: 解压jar包, 查看jar包内容</pre></td></tr></table></figure><ol start=\"8\"><li>将构件包部署到远程仓库</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn deploy</pre></td></tr></table></figure><ol start=\"9\"><li>清空输出目录（即 target 目录）</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvn clean：</pre></td></tr></table></figure><p>创建 Maven 项目如 HCI 后，执行 Maven 其它命令需要注意的是：必须在 Maven 项目的根目录处执行，也就是当前目录下一定存在一个名为 pom.xml 的文件</p><p>如进入 /home/ai/IdeaProjects/microservice/user-thrift-service 目录再执行 mvn install...... 命令</p><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2><h3 id=\"from-thriftthrift-import-ttype-tmessagetype-tfrozendict-texception-tapplicationexception-importerror-cannot-import-name-tfrozendict\"><a class=\"anchor\" href=\"#from-thriftthrift-import-ttype-tmessagetype-tfrozendict-texception-tapplicationexception-importerror-cannot-import-name-tfrozendict\">#</a> from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException ImportError: cannot import name TFrozenDict</h3><p>解决方法是：某些包没有关联上，装包时加上 [hive] 后缀</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> pyhive<span class=\"token punctuation\">[</span>hive<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "maven"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/ECDHE-RSA-AES256-GCM-SHA384%E8%A7%A3%E9%87%8A/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/ECDHE-RSA-AES256-GCM-SHA384%E8%A7%A3%E9%87%8A/",
            "title": "ECDHE-RSA-AES256-GCM-SHA384 解释",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"ecdhe-rsa-aes256-gcm-sha384-解释\"><a class=\"anchor\" href=\"#ecdhe-rsa-aes256-gcm-sha384-解释\">#</a> ECDHE-RSA-AES256-GCM-SHA384 解释</h2><p>“密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法”</p><p>“握手时使用 ECDHE 算法进行密钥交换，用 RSA 签名和身份认证，握手后的通信使用 AES 对称算法，密钥长度 256 位，分组模式是 GCM，摘要算法 SHA384 用于消息认证和产生随机数。”</p><p><a id=\"more\"></a></p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/restful_api/restfulAPI_Flask/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/restful_api/restfulAPI_Flask/",
            "title": "RESTful API",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"restful-api\"><a class=\"anchor\" href=\"#restful-api\">#</a> RESTful API</h2><p>2000 年 Roy Thomas Fielding 在他博士论文中提出的 RESTful 概念.<br>即 Representational State Transfer 的缩写，或者叫做 &quot;表现层状态转化&quot;.<br>如果一个构架符合 REST 原则，则称它为 RESTful 的构架</p><p><a id=\"more\"></a></p><p>URI, uniform resource identifier, 统一资源标识符，用来唯一的标识一个资源.<br>URL, uniform resource locator, 统一资源定位器，用来定位某个特定资源.<br>表现层指的是资源的表现，资源就是网络少具体的信息，可以是文本，图片，歌曲等.<br>URI 可以用来对应特定的资源，要获取资源，首先要访问 URI, 此时的 URI 还是一个抽象的概念，只用来标识网络中唯一的资源.<br>URL 就是一种具体的资源，比如一个网址，也就是一个网络资源的地址.</p><h3 id=\"表现层-representation\"><a class=\"anchor\" href=\"#表现层-representation\">#</a> <code>表现层</code> Representation</h3><ol><li>纯文本: Python RESTful API 开发</li><li>HTML: &lt;head&gt;&lt;title&gt;Python RESTful API 开发 &lt;/title&gt;&lt;/head&gt;</li><li text:pythonrestfulapi开发=\"\">JSON:</li><li>jpg, PNG 图片等等.<br>我们把 <code>资源</code> 具体呈现出来的形式，叫做 <code>表现层</code></li></ol><h3 id=\"状态转移-state-transfer\"><a class=\"anchor\" href=\"#状态转移-state-transfer\">#</a> 状态转移，state Transfer</h3><ol><li>HTTP 协议，是一个无状态协议</li><li>GET (获取资源), POST (新建资源，有时候也用来更新资源), PUT (更新资源), DELETE (删除资源)</li><li>让我们来看一个 RESTful 的请求<br>curl -X GET <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkud2VpYm8uY29tLzIvdXNlcnMvc2hvdy5qc29u\">https://api.weibo.com/2/users/show.json</span></li></ol><h3 id=\"rest架构设计6原则\"><a class=\"anchor\" href=\"#rest架构设计6原则\">#</a> REST 架构设计 6 原则</h3><ol><li>Uniform Interface, 统一服务接口，解耦了设计客户端和服务端的接口，让客户端和服务端可以独立升级.</li><li>Stateless, 无状态，客户端请求和服务端响应信息是自包含的，避免某一次请求依赖上一次请求</li><li>Cacheable, 可缓存的，浏览器缓存，提高客户端访问体验，也可减少服务器流量压力.</li><li>Client-Server, 客户端和服务端分离，客户端不包括数据，服务端不包括用户状态，增加服务稳定性，也可对任一端升级.</li><li>Layered System, 分层系统，客户端可以不直接连接服务端，而是通过其它途径连接.</li><li>Code on Demand, 按需编码，客户端和服务端使用统一的接口进行通信，两端都可以用各自的编程语言进行编码，也可以对数据进行再加工，也就可以分工.</li></ol><h2 id=\"微博restful介绍-现在打开api测试工具不太管用了\"><a class=\"anchor\" href=\"#微博restful介绍-现在打开api测试工具不太管用了\">#</a> 微博 Restful 介绍，现在打开 API 测试工具不太管用了</h2><p>国内微博率先使用 RESTful 构架，并且还公开了开放平台。微博开放平台一些操作.<br>微博开放平台: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuLndlaWJvLmNvbS8=\">https://open.weibo.com/</span></p><ol><li>选择 chrome 浏览器进入之后可选择上面的 <code>文档</code> ，然后选择左边的 <code>微博API</code> 查看相应接口</li><li>随便选择一个接口点击进入，点击 <code>API测试工具</code> 没反应，可以鼠标右击 <code>API测试工具</code> 选择 <code>检查N</code> , 点开 &lt;p&gt;&lt;/p &gt; 标签，然后点击里面的链接地址，可以打开 API 测试工具.<br><img data-src=\"1.PNG\" alt=\"\"></li></ol><h2 id=\"flask\"><a class=\"anchor\" href=\"#flask\">#</a> <strong>Flask</strong></h2><p>Flask 官网: <span class=\"exturl\" data-url=\"aHR0cDovL2ZsYXNrLnBvY29vLm9yZy8=\">http://flask.pocoo.org/</span><br>Flask 中文版: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3Jtb3VzZWhvbGUucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0Lw==\">https://dormousehole.readthedocs.io/en/latest/</span><br>Flask 支持的扩展插件: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mbGFzay5wYWxsZXRzcHJvamVjdHMuY29tL2VuLzEuMS54L2V4dGVuc2lvbnMv\">https://flask.palletsprojects.com/en/1.1.x/extensions/</span></p><h2 id=\"工具介绍\"><a class=\"anchor\" href=\"#工具介绍\">#</a> 工具介绍</h2><p>将一串 json 转换为有缩进的格式<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9vdGNkbi5jbi9qc29ubGludC8=\">https://www.bootcdn.cn/jsonlint/</span></p><h2 id=\"github-api-schema\"><a class=\"anchor\" href=\"#github-api-schema\">#</a> github API schema</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My8jc2NoZW1h\">https://developer.github.com/v3/#schema</span><br>Schema<br>All API access is over HTTPS, and accessed from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbQ==\">https://api.github.com</span>. All data is sent and received as JSON.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> -i https://api.github.com/users/octocat/orgs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tHTTP/1.1 <span class=\"token number\">200</span> OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tServer: nginx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDate: Fri, <span class=\"token number\">12</span> Oct <span class=\"token number\">2012</span> <span class=\"token number\">23</span>:33:14 GMT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tContent-Type: application/json<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tConnection: keep-alive</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tStatus: <span class=\"token number\">200</span> OK</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tETag: <span class=\"token string\">\"a00049ba79152d03380c34652f2cb612\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tX-GitHub-Media-Type: github.v3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tX-RateLimit-Limit: <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tX-RateLimit-Remaining: <span class=\"token number\">4987</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tX-RateLimit-Reset: <span class=\"token number\">1350085394</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tContent-Length: <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tCache-Control: max-age<span class=\"token operator\">=</span><span class=\"token number\">0</span>, private, must-revalidate</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tX-Content-Type-Options: nosniff</pre></td></tr></table></figure><h2 id=\"simple-samples\"><a class=\"anchor\" href=\"#simple-samples\">#</a> Simple Samples</h2><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tapp <span class=\"token operator\">=</span> <span class=\"token function\">Flask</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdef <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!!!\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index/&lt;user>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tdef <span class=\"token function\">hello_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello %s\"</span> <span class=\"token operator\">%</span> user</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/productpage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tdef <span class=\"token function\">hello_productpage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello productpage!!!\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t# <span class=\"token constant\">POST</span>方法浏览器输入出错可以通过命令行方式访问<span class=\"token punctuation\">,</span> 如下指定<span class=\"token constant\">POST</span>方式访问</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t# pipenv shell</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t# python app<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t# curl <span class=\"token operator\">-</span><span class=\"token constant\">X</span> <span class=\"token constant\">POST</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">9900</span><span class=\"token operator\">/</span>index <span class=\"token operator\">--</span>noproxy <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t@app<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tdef <span class=\"token function\">hello_post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello POST Methods!!!\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t    app<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">9900</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"教程视频\"><a class=\"anchor\" href=\"#教程视频\">#</a> 教程视频</h2><p>Restful API</p><p>NodeJS: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtFNDExajdXWD9wPTQ=\">https://www.bilibili.com/video/BV1KE411j7WX?p=4</span><br>NodeJS: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhoNDExWjdSYT9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xODA0MDkzNzYyMzgwOTI0MzYzNg==\">https://www.bilibili.com/video/BV1Hh411Z7Ra?from=search&amp;seid=18040937623809243636</span><br>python Flask:\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJmNHkxMjdDeT9wPTY=\">https://www.bilibili.com/video/BV1Rf4y127Cy?p=6</span><br>java: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWV0NDExVDdTUz9wPTg=\">https://www.bilibili.com/video/BV1et411T7SS?p=8</span><br>java Spring boot: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHVkeS4xNjMuY29tL2NvdXJzZS9pbnRyb2R1Y3Rpb24uaHRtP2NvdXJzZUlkPTEwMDUyMTMwMzQjL2NvdXJzZURldGFpbD90YWI9MQ==\">https://study.163.com/course/introduction.htm?courseId=1005213034#/courseDetail?tab=1</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "restful"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/ubuntu18.04%E5%AE%89%E8%A3%85Mysql8.0/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/maven/ubuntu18.04%E5%AE%89%E8%A3%85Mysql8.0/",
            "title": "Ubuntu18.04 安装 Mysql8.0",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h1 id=\"mysql-安装\"><a class=\"anchor\" href=\"#mysql-安装\">#</a> Mysql 安装:</h1><h3 id=\"1-下载deb包\"><a class=\"anchor\" href=\"#1-下载deb包\">#</a> 1. 下载 deb 包</h3><pre><code>\thttps://dev.mysql.com/downloads/repo/apt/\n</code></pre><p><a id=\"more\"></a></p><h3 id=\"2-跟新dpkg\"><a class=\"anchor\" href=\"#2-跟新dpkg\">#</a> 2. 跟新 dpkg</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ dpkg -i mysql-apt-config_0.8.15-1_all.deb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">apt</span> update</pre></td></tr></table></figure><h3 id=\"3-安装mysql8\"><a class=\"anchor\" href=\"#3-安装mysql8\">#</a> 3. 安装 mysql8</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t输入密码123456</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t最后加密方式选择Legacy<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>.x<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"mysql-卸载\"><a class=\"anchor\" href=\"#mysql-卸载\">#</a> Mysql 卸载:</h1><pre><code>搜索的一种卸载方式:\n首先在终端中查看MySQL的依赖项：dpkg --list|grep mysql\n卸载： sudo apt-get remove mysql-common\n卸载：sudo apt-get autoremove --purge mysql-server-5.7\n清除残留数据：dpkg -l|grep ^rc|awk ‘{print$2}’|sudo xargs dpkg -P\n再次查看MySQL的剩余依赖项：dpkg --list|grep mysql\n继续删除剩余依赖项，如：sudo apt-get autoremove --purge mysql-apt-config\n至此已经没有了MySQL的依赖项，彻底删除，Good Luck\n\n另外一种卸载方式:\nsudo apt-get autoremove --purge mysql-server \nsudo apt-get remove mysql-common\nsudo rm -rf /etc/mysql/ \nsudo rm -rf  /var/lib/mysql\n​​#清理残留数据\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P  \nsudo apt autoremove\nsudo apt autoclean\n\n最终是用dpkg --list|grep mysql命令查看没有任何mysql信息输出即可\n</code></pre><h1 id=\"mysql登录\"><a class=\"anchor\" href=\"#mysql登录\">#</a> Mysql 登录</h1><h3 id=\"第一种命令行方式\"><a class=\"anchor\" href=\"#第一种命令行方式\">#</a> 第一种命令行方式:</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql -uroot -p123456</pre></td></tr></table></figure><h3 id=\"第二种mysql-workbench\"><a class=\"anchor\" href=\"#第二种mysql-workbench\">#</a> 第二种 mysql-workbench</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-workbench</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mysql-workbench\t\t// 可以通过键入 mysql-workbench或单击 MySQL Workbench 图标 <span class=\"token punctuation\">(</span>Activities -<span class=\"token operator\">></span> MySQL Workbench<span class=\"token punctuation\">)</span> 从命令行启动它。</pre></td></tr></table></figure><h3 id=\"第三种navigat-工具方式\"><a class=\"anchor\" href=\"#第三种navigat-工具方式\">#</a> 第三种 Navigat 工具方式：</h3><ul><li>Navicat 是可以管理多种数据库 Mysql, redis, MongoDB 等等的软件，收费</li></ul><ul><li>连接名:localhost</li><li>主机: 127.0.0.1 // 用 localhost 会报错 2002 - Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock'(2 &quot;No such file or directory&quot;)</li><li>端口: 3306 //mysql 安装后默认服务端口是 3306， 可通过命令 &quot;netstat -tap | grep mysql&quot; 查看</li><li>用户名: root</li><li>密码: 123456</li></ul><h1 id=\"重启mysql-server\"><a class=\"anchor\" href=\"#重启mysql-server\">#</a> 重启 Mysql server</h1><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart mysql\t// Ubuntu18.04重启mysql会出错, 目前没解决，只是卸载mysql重装，最好别重启mysql服务</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "maven"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/algorithm_security/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/algorithm_security/",
            "title": "algorithm security",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h1 id=\"certificates-encryption-algorithm\"><a class=\"anchor\" href=\"#certificates-encryption-algorithm\">#</a> <strong>Certificates Encryption Algorithm</strong></h1><h2 id=\"rsa非对称加密算法\"><a class=\"anchor\" href=\"#rsa非对称加密算法\">#</a> <strong>RSA 非对称加密算法</strong></h2><p>RSA(Rivest-Shamir-Adleman)</p><blockquote><p>RSA 是 1977 年由罗纳德・李维斯特（Ron Rivest）、阿迪・萨莫尔（Adi Shamir）和伦纳德・阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的</p></blockquote><p>非对称加密，公钥加密，私钥解密，反之亦然。由于需要大数的乘幂求模等算法，运行速度慢，不易于硬件实现。</p><p>通常私钥长度有 512bit，1024bit，2048bit，4096bit，长度越长，越安全，但是生成密钥越慢，加解密也越耗时。</p><p>既然是加密，那肯定是不希望别人知道我的消息，所以只有我才能解密，所以可得出公钥负责加密，私钥负责解密；</p><p>同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出私钥负责签名，公钥负责验证。</p><blockquote><p>非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开 (用 CA private key 签名得到甲方证书)；用 CA 的 public key 解密得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密来获取信息.</p></blockquote><h2 id=\"aes对称加密算法\"><a class=\"anchor\" href=\"#aes对称加密算法\">#</a> <strong>AES 对称加密算法</strong></h2><p>AES, 高级加密标准（Advanced Encryption Standard，缩写：AES）</p><p>对称加密，密钥最长只有 256 个 bit，执行速度快，易于硬件实现。由于是对称加密，密钥需要在传输前通讯双方获知。</p><p>基于以上特点，通常使用 RSA 来首先传输 AES 的密钥给对方，然后再使用 AES 来进行加密通讯。</p><p>AES128 和 AES256 主要区别是密钥长度不同（分别是 128bits,256bits)、加密处理轮数不同（分别是 10 轮，14 轮），后者强度高于前者。当前 AES 是较为安全的公认的对称加密算法。</p><p>现代密码学分为对称加密与非对称加密（公钥加密），代表算法分别有 DES (现在发展为 3DES）、AES 与 RSA 等。非对称加密算法的资源消耗大于对称加密。一般是进行混合加密处理，例如使用 RSA 进行密钥分发、协商，使用 AES 进行业务数据的加解密。</p><h1 id=\"signature-algorithm\"><a class=\"anchor\" href=\"#signature-algorithm\">#</a> Signature Algorithm</h1><h2 id=\"什么是sha算法\"><a class=\"anchor\" href=\"#什么是sha算法\">#</a> <strong>什么是 SHA 算法</strong></h2><blockquote><p>SHA 的全称是 “Secure Hash Algorithm”，中文翻译为：安全哈希算法，是由美国 NSA 和 NIST 两个组织共同发布的一系列密码散列函数，经历了 SHA-0，SHA-1，SHA-2，SHA-3 系列发展.</p></blockquote><h3 id=\"什么是sha-256算法\"><a class=\"anchor\" href=\"#什么是sha-256算法\">#</a> 什么是 SHA-256 算法</h3><blockquote><p>SHA256 算法属于 SHA-2 系列，SHA-256 对于任意长度的消息，都会产生一个 256bit 长的哈希值，称作消息摘要。这个摘要相当于是个长度为 32 个字节的数组，通常用一个长度为 64 的十六进制字符串来表示.</p></blockquote><h3 id=\"把消息转换为位字符串\"><a class=\"anchor\" href=\"#把消息转换为位字符串\">#</a> 把消息转换为位字符串</h3><p>SHA-256 算法是按照位作为输入，所以进行计算前必须把原始消息（比如字符串、文件等）转换成位字符串。<br>比如，对字符串 “abc” 产生消息摘要，‘a’=97 ‘b’=98 ‘c’=99，先转换成 24 位的字符串：</p><pre><code>\t 01100001 01100010 01100011\n</code></pre><h3 id=\"对转换得到的位字符串进行补位操作\"><a class=\"anchor\" href=\"#对转换得到的位字符串进行补位操作\">#</a> 对转换得到的位字符串进行补位操作</h3><h3 id=\"消息扩展-分组处理\"><a class=\"anchor\" href=\"#消息扩展-分组处理\">#</a> 消息扩展、分组处理</h3><h3 id=\"使用的常量和函数\"><a class=\"anchor\" href=\"#使用的常量和函数\">#</a> 使用的常量和函数</h3><h3 id=\"计算消息摘要\"><a class=\"anchor\" href=\"#计算消息摘要\">#</a> 计算消息摘要</h3><h3 id=\"sha-256安全性分析\"><a class=\"anchor\" href=\"#sha-256安全性分析\">#</a> SHA-256 安全性分析</h3><p>Hash 函数的安全性很大程度上取决于抗强碰撞的能力，即攻击者找出两个消息 M 和 Mt，M≠Mt，使得 H (M)=HMt  , 因此，评价一个 Hash 函数的安全性，就是看攻击者在现有的条件下，是否可以找到该函数的一对碰撞。目前已有的对 Hash 函数攻击的方法包括生日攻击、彩虹表攻击、差分攻击等。</p><ul><li>生日攻击：生日攻击是一种可用于攻击任何类型函数 Hash 函数的攻击方法。从攻击原理上看，它没有利用 Hash 函数的结构和任何代数弱性质，只依赖与 Hash 值的长度。因此，<strong>抵御生日攻击最有效的方法是 Hash 值必须有足够的长度</strong>。</li><li>差分攻击：差分攻击是目前破译迭代 Hash 函数最有效的手法之一，其基本方法是利用明文的输入差值对输出差值的影响，运用差分的高概率的继承或者消除来产生最终的相同输出。</li></ul><p>用于消息唯一性和数据完整性验证的 Hash 函数，其安全性依赖于函数本身的属性和对抗碰撞的抵抗。Hash 函数的算法结构特点和 Hash 值的长度是决定函数碰撞性的而主要因素，Hash 值越长，越能抵御生日攻击。**SHA-256 有 256 比特 Hash 值，MD5 和 SHA-1 分别有 128 和 160 比特的 Hash 值。** 因此，SHA-256 比 MD5 和 SHA-1 能抵抗生日攻击。通过对 Chabaud-Joux 攻击 SHA-256 的分析，找到了 SHA-256 的一个部分碰撞，其复杂度为 2^66，但无法找到 SHA-256 的一个整体碰撞，因此 SHA-256 算法也能抵御现有的差分攻击。由此可见，在抵御生日攻击和抵御已知差分攻击方面，SHA-256 算法比现在广泛使用的 MD5 和 SHA-1 等更具安全性。</p><h3 id=\"比特币为什么选择sha-256算法\"><a class=\"anchor\" href=\"#比特币为什么选择sha-256算法\">#</a> 比特币为什么选择 SHA-256 算法</h3><blockquote><p>SHA-256 属于 SHA-2 系列，像之前的 SHA0，SHA1 都被证明是可以破解的，目前 SHA2 以及 SHA3 尚未被证实可以破解，至少目前来说是最安全的算法之一.<br>未来即使使用量子计算机挖比特币，也无非是速度更快一点，比特币有难度调整机制，可以通过调整难度来对抗量子计算机，还可以通过升级算法到 SHA-3 系列来增加挖矿的难度.<br>中本聪在设计比特币时，之所以选择 SHA256，就是看中了 SHA256 的安全性，只要输入的数据有微小的区别，算出的结果就有天壤之别.</p></blockquote><h1 id=\"aes-gcm加密算法\"><a class=\"anchor\" href=\"#aes-gcm加密算法\">#</a> <strong>AES-GCM 加密算法</strong></h1><h1 id=\"查看系统支持的密码列表\"><a class=\"anchor\" href=\"#查看系统支持的密码列表\">#</a> 查看系统支持的密码列表</h1><p><strong>列出当前系统所支持的密码套件列表</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl ciphers -V <span class=\"token string\">'ALL:COMPLEMENTOFALL'</span></pre></td></tr></table></figure><p><strong>测试某个服务器是否支持特定的密码套件：</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl s_client -cipher <span class=\"token string\">\"ECDHE-RSA-AES128-SHA\"</span> -connect www.qq.com:443 -tls1_1</pre></td></tr></table></figure><p>参数说明:</p><ul><li>-cipher 参数表示本次连接支持的密码套件</li><li>-connect 表示连接服务器的 443 端口</li><li>-tls1_1 表示客户端最高支持的 TLS/SSL 版本是 TLS v1.1</li></ul><p>TLS deployment, viw version etc.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L1NlcnZlcl9TaWRlX1RMUw==\">Security/Server Side TLS</span></p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/cfssl/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/cfssl/",
            "title": "cfssl",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"kubernetes-证书\"><a class=\"anchor\" href=\"#kubernetes-证书\">#</a> Kubernetes 证书</h2><table><thead><tr><th style=\"text-align:center\">组件</th><th style=\"text-align:center\">使用的证书</th></tr></thead><tbody><tr><td style=\"text-align:center\">etcd</td><td style=\"text-align:center\">ca.pem, server.pem, server-key.pem</td></tr><tr><td style=\"text-align:center\">kube-apiserver</td><td style=\"text-align:center\">ca.pem, server.pem, server-key.pem</td></tr><tr><td style=\"text-align:center\">kubelet</td><td style=\"text-align:center\">ca.pem, ca-key.pem</td></tr><tr><td style=\"text-align:center\">kube-proxy</td><td style=\"text-align:center\">ca.pem, kube-proxy.pem, kube-proxy-key.pem</td></tr><tr><td style=\"text-align:center\">kubectl</td><td style=\"text-align:center\">ca.pem, admin.pem, admin-key.pem</td></tr></tbody></table><h2 id=\"cfssl\"><a class=\"anchor\" href=\"#cfssl\">#</a> cfssl</h2><p>cfssl 用来生成证书比 openssl 要简单直观些</p><h2 id=\"cfssl安装\"><a class=\"anchor\" href=\"#cfssl安装\">#</a> cfssl 安装</h2><p>安装 cfssl 相关的三个工具:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 生成证书</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">wget</span> https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t// 用于将json文本导入生成证书</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ <span class=\"token function\">wget</span> https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t// 查看证书相关信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ <span class=\"token function\">wget</span> https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t$ <span class=\"token function\">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t$ <span class=\"token function\">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t$ <span class=\"token function\">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t$ <span class=\"token function\">mv</span> cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t$ cfssl --help</pre></td></tr></table></figure><h2 id=\"cfssl-生成证书\"><a class=\"anchor\" href=\"#cfssl-生成证书\">#</a> cfssl 生成证书</h2><p>生成证书模板</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ cfssl print-defaults config > config.json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"signing\": &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t        \"default\": &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t            \"expiry\": \"168h\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        &#125;,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        \"profiles\": &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t            \"www\": &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t                \"expiry\": \"8760h\",</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t                \"usages\": [</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t                    \"signing\",</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t                    \"key encipherment\",</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t                    \"server auth\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t                ]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            &#125;,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t            \"client\": &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t                \"expiry\": \"8760h\",</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t                \"usages\": [</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t                    \"signing\",</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t                    \"key encipherment\",</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t                    \"client auth\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t                ]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t            &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t    &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t&#125;</pre></td></tr></table></figure><p>生成证书请求模板</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ cfssl print-defaults csr > csr.json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"CN\": \"example.net\",</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    \"hosts\": [</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        \"example.net\",</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        \"www.example.net\"</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    ],</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    \"key\": &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        \"algo\": \"ecdsa\",</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        \"size\": 256</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    &#125;,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t    \"names\": [</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t            \"C\": \"US\",</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            \"L\": \"CA\",</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t            \"ST\": \"San Francisco\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    ]</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t&#125;</pre></td></tr></table></figure><h2 id=\"k8s生成组件证书实例\"><a class=\"anchor\" href=\"#k8s生成组件证书实例\">#</a> <strong>k8s 生成组件证书实例</strong></h2><p>所有 k8s 证书，配置，安装包都放到 /opt/kubernetes/ 目录下</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> -p /opt/kubernetes/<span class=\"token punctuation\">&#123;</span>ssl,cfg,bin<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ls</span> /opt/kubernetes/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tbin/  cfg/  ssl/</pre></td></tr></table></figure><h3 id=\"1-生成ca-keypem私匙和capem证书\"><a class=\"anchor\" href=\"#1-生成ca-keypem私匙和capem证书\">#</a> 1. 生成 ca-key.pem 私匙和 ca.pem 证书</h3><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat > ca-config.json &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"signing\": &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t        \"default\": &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t            \"expiry\": \"87600h\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        &#125;,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        \"profiles\": &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t            \"kubernetes\": &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t                \"expiry\": \"87600h\",</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t                \"usages\": [</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t                    \"signing\",</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t                    \"key encipherment\",</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t                    \"server auth\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t                ]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t    &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tEOF</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcat > ca-csr.json &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t    \"CN\": \"kubernetes\",</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t    \"key\": &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t        \"algo\": \"rsa\",\t\t\t// 注意是algo而不是also</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t        \"size\": 3072</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t    &#125;,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t    \"names\": [</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t        &#123;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t            \"C\": \"CN\",\t\t\t// 哪个国家的可以随便写</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t            \"L\": \"Beijing\",\t\t// 地点随便写</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t            \"ST\": \"Beijing\",\t// 地点随便写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t            \"O\": \"k8s\",\t\t\t// 用户组, 固定的， 不能随便写</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t            \"OU\": \"System\"\t\t// 用户, 固定的，不能随便写</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t    ]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tEOF</pre></td></tr></table></figure><p>生成 ca.pem 和 ca-key.pem</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// -bare ca 表示生成以ca开头的证书和key</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcfssl gencert -initca ca-csr.json <span class=\"token operator\">|</span> cfssljson -bare ca -</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ls</span> ca*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem</pre></td></tr></table></figure><h3 id=\"2-生成server端证书和key-用于k8s的etcd和kube-apiserver\"><a class=\"anchor\" href=\"#2-生成server端证书和key-用于k8s的etcd和kube-apiserver\">#</a> 2. 生成 server 端证书和 key, 用于 k8s 的 etcd 和 kube-apiserver</h3><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat > server-csr.json &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"CN\": \"kubernetes\",</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    \"hosts\": [\t\t\t// 包含了哪些机器IP和域名需要此server端证书</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        \"127.0.0.1\",</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        \"10.239.140.133\",\t\t// 要使用改证书的etcd或其他服务部署所在节点IP地址或域名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        \"10.239.131.206\",</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        \"10.239.141.145\",</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        \"10.239.141.194\",</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        \"kubernetes.default\",</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t        \"kubernetes.default.svc\",</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t        \"kubernetes.default.svc.cluster\",</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        \"kubernetes.default.svc.cluster.local\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t    ],</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    \"key\": &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        \"algo\": \"rsa\",</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        \"size\": 3072</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    &#125;,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t    \"names\": [</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t        &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t            \"C\": \"CN\",</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t            \"L\": \"Beijing\",</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t            \"ST\": \"Beijing\",</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t            \"O\": \"k8s\",\t\t\t//和下面一起代表了用户和组去请求集群</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t            \"OU\": \"System\"</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t    ]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tEOF</pre></td></tr></table></figure><p>生成 server 端证书</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// -bare server 表示生成以server开头的证书和key</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcfssl gencert -ca<span class=\"token operator\">=</span>ca.pem -ca-key<span class=\"token operator\">=</span>ca-key.pem -config<span class=\"token operator\">=</span>ca-config.json -profile<span class=\"token operator\">=</span>kubernetes server-csr.json <span class=\"token operator\">|</span> cfssljson -bare server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ls</span> server*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tserver.csr  server-csr.json  server-key.pem  server.pem</pre></td></tr></table></figure><h3 id=\"3-生成admin证书-集群管理员通过证书访问集群\"><a class=\"anchor\" href=\"#3-生成admin证书-集群管理员通过证书访问集群\">#</a> 3. 生成 admin 证书，集群管理员通过证书访问集群</h3><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat > admin-csr.json &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"CN\": \"admin\",</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    \"hosts\": [],</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    \"key\": &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        \"algo\": \"rsa\",</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        \"size\": 3072</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    &#125;,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t    \"names\": [</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t            \"C\": \"CN\",</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t            \"L\": \"Beijing\",</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t            \"ST\": \"Beijing\",</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t            \"O\": \"system:masters\",\t// 用户组, 不要改动, 否则会认证失败</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            \"OU\": \"System\"\t\t\t// 用户</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t    ]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tEOF</pre></td></tr></table></figure><p>生成管理员证书和 key</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// -bare admin 表示生成以admin开头的证书和key</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ cfssl gencert -ca<span class=\"token operator\">=</span>ca.pem -ca-key<span class=\"token operator\">=</span>ca-key.pem -config<span class=\"token operator\">=</span>ca-config.json -profile<span class=\"token operator\">=</span>kubernetes admin-csr.json <span class=\"token operator\">|</span> cfssljson -bare admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token function\">ls</span> admin*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tadmin.csr  admin-csr.json  admin-key.pem  admin.pem</pre></td></tr></table></figure><h3 id=\"4-生成kube-proxy证书\"><a class=\"anchor\" href=\"#4-生成kube-proxy证书\">#</a> 4. 生成 kube-proxy 证书</h3><p>工作节点通过 kube-proxy 组件访问 api-server 生成一些网络策略，必须得有权限，生成一个证书，让 kube-proxy 携带证书去访问集群.</p><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat > kube-proxy-csr.json &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    \"CN\": \"system:kube-proxy\",\t\t//固定,不能改变</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    \"hosts\": [],</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    \"key\": &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        \"algo\": \"rsa\",</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        \"size\": 3072</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    &#125;,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t    \"names\": [</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t            \"C\": \"CN\",</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t            \"L\": \"Beijing\",</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t            \"ST\": \"Beijing\",</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t            \"O\": \"k8s\",</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            \"OU\": \"System\"</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t    ]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tEOF</pre></td></tr></table></figure><p>生成 kube-proxy 证书和 key</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cfssl gencert -ca<span class=\"token operator\">=</span>ca.pem -ca-key<span class=\"token operator\">=</span>ca-key.pem -config<span class=\"token operator\">=</span>ca-config.json -profile<span class=\"token operator\">=</span>kubernetes kube-proxy-csr.json <span class=\"token operator\">|</span> cfssljson -bare kube-proxy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ls</span> kube-proxy*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tkube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem</pre></td></tr></table></figure><h3 id=\"5-只保留pem-删除其它文件\"><a class=\"anchor\" href=\"#5-只保留pem-删除其它文件\">#</a> 5. 只保留 *.pem, 删除其它文件</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -v pem <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -i <span class=\"token function\">rm</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tadmin-key.pem  admin.pem  ca-key.pem  ca.pem  kube-proxy-key.pem  kube-proxy.pem  server-key.pem  server.pem</pre></td></tr></table></figure><h2 id=\"关闭防火墙或开发端口\"><a class=\"anchor\" href=\"#关闭防火墙或开发端口\">#</a> <strong>关闭防火墙或开发端口</strong></h2><h3 id=\"关闭防火墙\"><a class=\"anchor\" href=\"#关闭防火墙\">#</a> 关闭防火墙</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>setenforce <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tsystemctl stop firewalld.service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsysctl net.bridge.bridge-nf-call-iptables<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"如果使用firewalld作为防火墙则需要开放端口\"><a class=\"anchor\" href=\"#如果使用firewalld作为防火墙则需要开放端口\">#</a> 如果使用 firewalld 作为防火墙，则需要开放端口</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">2379</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tfirewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">2380</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfirewall-cmd --reload</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfirewall-cmd --list-all</pre></td></tr></table></figure><h2 id=\"etcd安装\"><a class=\"anchor\" href=\"#etcd安装\">#</a> <strong>etcd 安装</strong></h2><p>etcd 是由 coreos 公司开发在 GitHub 上开源的存储键值对的数据库</p><h3 id=\"etcd-下载\"><a class=\"anchor\" href=\"#etcd-下载\">#</a> etcd 下载</h3><p>本次测试安装 etcd 的 3.2.12 版本<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0Y2QtaW8vZXRjZC9yZWxlYXNlcy90YWcvdjMuMi4xMg==\">https://github.com/etcd-io/etcd/releases/tag/v3.2.12</span><br>下载解压并移动到指定目录</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> -L https://github.com/etcd-io/etcd/releases/download/v3.2.12/etcd-v3.2.12-linux-amd64.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">tar</span> -zxvf etcd-v3.2.12-linux-amd64.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ls</span> etcd-v3.2.12-linux-amd64</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDocumentation/  etcd  etcdctl  README-etcdctl.md  README.md  READMEv2-etcdctl.md</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t// 将解压后文件中的可执行文件etct和etcdctl移动到/opt/kubernetes/bin/目录下</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">mv</span> etcd-v3.2.12-linux-amd64/etcd /opt/kubernetes/bin/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">mv</span> etcd-v3.2.12-linux-amd64/etcdctl /opt/kubernetes/bin/</pre></td></tr></table></figure><h3 id=\"创建etcd的配置文件\"><a class=\"anchor\" href=\"#创建etcd的配置文件\">#</a> 创建 ETCD 的配置文件</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">></span> /opt/kubernetes/cfg/etcd <span class=\"token operator\">&lt;&lt;</span> EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#[Member]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"etcd01\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_DATA_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/var/lib/etcd/default.etcd\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_LISTEN_PEER_URLS</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2380\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_LISTEN_CLIENT_URLS</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.133:2379\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">#[Clustering]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_INITIAL_ADVERTISE_PEER_URLS</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2380\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_ADVERTISE_CLIENT_URLS</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2379\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_INITIAL_CLUSTER</span><span class=\"token operator\">=</span><span class=\"token string\">\"etcd01=https://10.239.140.133:2380,etcd02=https://10.239.131.206:2380,etcd03=https://10.239.141.145:2380\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_INITIAL_CLUSTER_TOKEN</span><span class=\"token operator\">=</span><span class=\"token string\">\"etcd-cluster\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token assign-left variable\">ETCD_INITIAL_CLUSTER_STATE</span><span class=\"token operator\">=</span><span class=\"token string\">\"new\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tEOF</pre></td></tr></table></figure><h3 id=\"使用systemd来管理etcd服务\"><a class=\"anchor\" href=\"#使用systemd来管理etcd服务\">#</a> 使用 systemd 来管理 etcd 服务</h3><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat > /usr/lib/systemd/system/etcd.service &lt;&lt; EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[Unit]\t\t\t\t\t//systemd依赖的一些服务, 网络服务启动之后再启动此服务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDescription=Etcd Server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tAfter=network.target</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tAfter=network-online.target</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tWants=network-online.target</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t[Service]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tType=notify</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tWorkingDirectory=/var/lib/etcd/\t\t\t\t\t//看网上配置有这个参数, 自己配置过程中没有加入</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tEnvironmentFile=-/opt/kubernetes/cfg/etcd\t\t//指定服务启动配置文件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tExecStart=/opt/kubernetes/bin/etcd \\\t\t\t//服务启动选项</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t--name=$&#123;ETCD_NAME&#125; \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t--data-dir=$&#123;ETCD_DATA_DIR&#125; \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t--listen-peer-urls=$&#123;ETCD_LISTEN_PEER_URLS&#125; \\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t--listen-client-urls=$&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t--advertise-client-urls=$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t--initial-advertise-peer-urls=$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t--initial-cluster=$&#123;ETCD_INITIAL_CLUSTER&#125; \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t--initial-cluster-token=$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \\</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t--initial-cluster-state=new \\</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t--cert-file=/opt/kubernetes/ssl/server.pem \\\t\t// 指定数字证书</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t--key-file=/opt/kubernetes/ssl/server-key.pem \\</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t--peer-cert-file=/opt/kubernetes/ssl/server.pem \\</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t--peer-key-file=/opt/kubernetes/ssl/server-key.pem \\</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t--trusted-ca-file=/opt/kubernetes/ssl/ca.pem \\</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t--peer-trusted-ca-file=/opt/kubernetes/ssl/ca.pem</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tRestart=on-failure</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tLimitNOFILE=65536</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t[Install]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tWantedBy=multi-user.target</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tEOF</pre></td></tr></table></figure><p>启动 etcd 服务</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 启动etcd服务发现卡住, 且过一会会报个错误, 原因是另外request另外两台etcd服务2380得不到响应</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t// 待另外至少一台etcd服务启动后再回来查看etcd服务状态就正常了</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsystemctl daemon-reload</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsystemctl start etcd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tsystemctl <span class=\"token builtin class-name\">enable</span> etcd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t// 完整的启动etcd服务命令其实就是运行以下命令:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t/opt/kubernetes/bin/etcd --name<span class=\"token operator\">=</span><span class=\"token string\">\"etcd01\"</span> --data-dir<span class=\"token operator\">=</span><span class=\"token string\">\"/var/lib/etcd/default.etcd\"</span> --listen-peer-urls<span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2380\"</span> --listen-client-urls<span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2379,http://127.0.0.1:2379\"</span> --advertise-client-urls<span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2379\"</span> --initial-advertise-peer-urls<span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2380\"</span> --initial-cluster<span class=\"token operator\">=</span><span class=\"token string\">\"etcd01=https://10.239.140.133:2380,etcd02=https://10.239.131.206:2380,etcd03=https://10.239.141.145:2380\"</span> --initial-cluster-token<span class=\"token operator\">=</span><span class=\"token string\">\"etcd-cluster\"</span> --initial-cluster-state<span class=\"token operator\">=</span><span class=\"token string\">\"new\"</span> --cert-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server.pem --key-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server-key.pem --peer-cert-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server.pem --peer-key-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server-key.pem --trusted-ca-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/ca.pem --peer-trusted-ca-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/ca.pem</pre></td></tr></table></figure><p>查看服务</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> etcd </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\troot     <span class=\"token number\">23726</span>     <span class=\"token number\">1</span>  <span class=\"token number\">5</span> <span class=\"token number\">21</span>:41 ?        00:00:00 /opt/kubernetes/bin/etcd --name<span class=\"token operator\">=</span>etcd01 --data-dir<span class=\"token operator\">=</span>/var/lib/etcd/default.etcd --listen-peer-urls<span class=\"token operator\">=</span>https://10.239.140.133:2380 --listen-client-urls<span class=\"token operator\">=</span>https://10.239.140.133:2379,http://127.0.0.1:2379 --advertise-client-urls<span class=\"token operator\">=</span>https://10.239.140.133:2379 --initial-advertise-peer-urls<span class=\"token operator\">=</span>https://10.239.140.133:2380 --initial-cluster<span class=\"token operator\">=</span>etcd01<span class=\"token operator\">=</span>https://10.239.140.133:2380,etcd02<span class=\"token operator\">=</span>https://10.239.131.206:2380,etcd03<span class=\"token operator\">=</span>https://10.239.141.145:2380 --initial-cluster-token<span class=\"token operator\">=</span>etcd-cluster --initial-cluster-state<span class=\"token operator\">=</span>new --cert-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server.pem --key-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server-key.pem --peer-cert-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server.pem --peer-key-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server-key.pem --trusted-ca-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/ca.pem --peer-trusted-ca-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/ca.pem</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\troot     <span class=\"token number\">23744</span> <span class=\"token number\">14957</span>  <span class=\"token number\">0</span> <span class=\"token number\">21</span>:41 pts/1    00:00:00 <span class=\"token function\">grep</span> --color<span class=\"token operator\">=</span>auto etcd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t// 查看etcd服务状态和日志发现etcd一直尝试request其它两台机器, 状态不正常, 在其它两台也部署etcd后就可以了</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ systemctl status etcd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ <span class=\"token function\">tail</span> /var/log/messages</pre></td></tr></table></figure><h3 id=\"etcd拷贝到其它机器\"><a class=\"anchor\" href=\"#etcd拷贝到其它机器\">#</a> etcd 拷贝到其它机器</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">scp</span> -r /opt/kubernetes root@10.239.131.206:/opt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">scp</span> /usr/lib/systemd/system/etcd.service  root@10.239.131.206:/usr/lib/systemd/system/etcd.service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t// 只需要修改其它机器上/opt/kubernetes/cfg/etcd文件里的ETCD_NAME和其它参数IP地址然后就可以直接运行命令启动etcd服务.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t// 并且启动后不会卡住</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ systemctl start etcd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ systemctl <span class=\"token builtin class-name\">enable</span> etcd</pre></td></tr></table></figure><h3 id=\"测试etcd集群状态是否正常\"><a class=\"anchor\" href=\"#测试etcd集群状态是否正常\">#</a> 测试 etcd 集群状态是否正常</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/kubernetes/bin/etcdctl --ca-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/ca.pem --cert-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server.pem --key-file<span class=\"token operator\">=</span>/opt/kubernetes/ssl/server-key.pem --endpoints<span class=\"token operator\">=</span><span class=\"token string\">\"https://10.239.140.133:2379,https://10.239.131.206:2379,https://10.239.141.145:2379\"</span> cluster-health</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmember 723f8ab932b4c3f6 is healthy: got healthy result from https://10.239.141.145:2379</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmember 8af8f5fa5f0b0b39 is healthy: got healthy result from https://10.239.131.206:2379</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmember 91dd39fb14e3de97 is healthy: got healthy result from https://10.239.140.133:2379</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcluster is healthy</pre></td></tr></table></figure><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> <strong>遇到的问题</strong></h2><p>查看 Centos7 系统日子</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> /var/log/messages</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ systemctl status etcd.service</pre></td></tr></table></figure><p>出现以下错误:</p><pre><code>\tetcd.service: main process exited, code=exited, status=2/INVALIDARGUMENT\n</code></pre><p>很明显是运行 etcd 命令时候的参数错误，改对参数就可以了.</p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/openssl_certificates/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/openssl_certificates/",
            "title": "openssl certificates",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h1 id=\"x509证书标准定义的两种编码格式pem和der\"><a class=\"anchor\" href=\"#x509证书标准定义的两种编码格式pem和der\">#</a> <strong>X.509 证书标准定义的两种编码格式 PEM 和 DER</strong></h1><h2 id=\"pem编码privacy-enhanced-mail\"><a class=\"anchor\" href=\"#pem编码privacy-enhanced-mail\">#</a> <strong>PEM 编码（Privacy Enhanced Mail）</strong></h2><p>特点：纯文本文件，以 -----BEGIN CERTIFICATE----- 开头，以 -----END CERTIFICATE----- 结尾，<br>内容是 base64 编码。但使用文本编辑器只能查看表面的结构，需要输入命令例如</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -in 某个PEM格式数字证书.pem -text -noout</pre></td></tr></table></figure><p>才能看到原始的数字证书信息.</p><pre><code>\t-----BEGIN CERTIFICATE-----\n\tMIID7TCCAtWgAwIBAgIJAOIRDhOcxsx6MA0GCSqGSIb3DQEBCwUAMIGLMQswCQYD\n\t……\n\txAJz+w8tjrDWcf826VN14IL+/Cmqlg/rIfB5CHdwVIfWwpuGB66q/UiPegZMNs8a\n\t3g==\n\t-----END CERTIFICATE-----\n</code></pre><h2 id=\"der编码distinguished-encoding-rules\"><a class=\"anchor\" href=\"#der编码distinguished-encoding-rules\">#</a> <strong>DER 编码（Distinguished Encoding Rules）</strong></h2><p>特点：二进制文件格式，一般应使用 Windows/Java 开发工具打开，也可以使用 openssl 命令行工具提取其中信息或进行编码转换.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -in 某个DER格式的数字证书.der -inform der -text -noout</pre></td></tr></table></figure><p>上面这个命令查看二进制文件中的证书信息.</p><h2 id=\"文件扩展名\"><a class=\"anchor\" href=\"#文件扩展名\">#</a> <strong>文件扩展名</strong></h2><p>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;&lt;font face=&quot;fantasy&quot; size=4 &gt; 我们身边有很多常见的数字证书文件，他们的扩展名通常既不叫 &quot;.pem&quot; 也不叫 &quot;.der&quot;, 但无论扩展名是什么，其内部编码格式只能从 PEM 和 DER 这两种编码格式中选择一种.&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<br>不同平台所偏好的编码格式不同，不同类型的数字证书文件中存储的内容也略有差别，不过对于大部分证书文件，我们都可以借助命令行工具随时将其转换成另一种编码格式.</p><ul><li><strong>CRT</strong> - CRT 应该是 certificate 的三个字母，其实还是证书的意思，常见于 NIX 系统，有可能是 PEM 编码，也有可能是 DER 编码，大多数应该是 PEM 编码，相信你已经知道怎么辨别. <strong>证书内容包含: signer (如 CA:kubernetes), 个人信息，过期时间，公钥 public key, 加密算法 (非对称加密算法 RSA2048, 对称机密算法 AES256 等), 签名算法 (sign algorithm) 等信息.</strong></li><li><strong>KEY</strong> - 通常用来存放一个公钥或者私钥，并非 X.509 证书，编码同样的，可能是 PEM, 也可能是 DER.<br>查看 KEY 的办法:</li></ul><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl rsa -in mykey.key -text -noout</pre></td></tr></table></figure><p>如果是 DER 格式的话，同理应该这样了:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl rsa -in mykey.key -text -noout -inform der</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token builtin class-name\">cd</span> /home/zhan/istio-1.6.0/samples/certs/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ openssl x509 -in root-cert.pem -text -noout</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tSignature Algorithm: sha256WithRSAEncryption</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ openssl x509 -in root-cert.pem -text -noout <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Validity -A <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tValidity</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        Not Before: Jan <span class=\"token number\">24</span> <span class=\"token number\">19</span>:15:51 <span class=\"token number\">2018</span> GMT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        Not After <span class=\"token builtin class-name\">:</span> Dec <span class=\"token number\">31</span> <span class=\"token number\">19</span>:15:51 <span class=\"token number\">2117</span> GMT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t-A n这样的shell写法，输出当前行之后的n行内容</pre></td></tr></table></figure><ul><li><strong>CSR - Certificate Signing Request</strong>, 即证书签名请求，这个并不是证书，而是向权威证书颁发机构获得签名证书的申请，其核心内容是一个<strong>公钥和个人信息</strong>，在生成这个申请的时候，要对应生成的有一个私钥，私钥要自己保管好，client 端把包含 public key 的 csr 文件发给 CA, 用 CA 的 private key 给 csr 文件做签名 (sign) 生成 client 端证书. <strong>CSR 文件</strong>内容一般包含: <strong>个人信息，公钥 public key, 加密算法 (非对称加密算法 RSA2048, 对称机密算法 AES256 等), 签名算法 (sign algorithm) 等信息.</strong><br>查看的办法:</li></ul><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -noout -text -in my.csr</pre></td></tr></table></figure><p>(如果是 DER 格式的话照旧命令行加上 - inform der, 这里不写了)</p><h2 id=\"证书编码的转换\"><a class=\"anchor\" href=\"#证书编码的转换\">#</a> <strong>证书编码的转换</strong></h2><p>・PEM 转为 DER：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -in cert.crt -outform der -out cert.der</pre></td></tr></table></figure><p>・DER 转为 PEM：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</pre></td></tr></table></figure><h2 id=\"获得证书的步骤\"><a class=\"anchor\" href=\"#获得证书的步骤\">#</a> <strong>获得证书的步骤</strong></h2><p>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;・向权威证书颁发机构申请证书 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<br>用以下命令生成一个 csr:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -newkey rsa:2048 -new -nodes -keyout my.key -out my.csr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmy.csr  my.key</pre></td></tr></table></figure><p>把<strong> csr</strong> 交给权威证书颁发机构，权威证书颁发机构对此进行签名，完成。保留好 csr,<strong> 当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的 csr 来申请新的证书，key 保持不变.</strong></p><p>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;・或者生成自签名的证书 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -newkey rsa:2048 -new -nodes -x509 -days <span class=\"token number\">3650</span> -keyout key.pem -out cert.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcert.pem  key.pem</pre></td></tr></table></figure><p>在生成证书的过程中会要你填一堆的东西，其实真正要填的只有 Common Name, 通常填写你服务器的域名，如 &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJjb21wYW55LmNvbQ==\">yourcompany.com</span>&quot;, 或者你服务器的 IP 地址，其它都可以留空的.<br>生产环境中还是不要使用自签的证书，否则浏览器会不认，或者如果你是企业应用的话能够强制让用户的浏览器接受你的自签证书也行。向权威机构要证书通常是要钱的，但现在也有免费的，仅仅需要一个简单的域名验证即可。有兴趣的话查查 &quot;沃通数字证书&quot;.</p><h2 id=\"生成证书\"><a class=\"anchor\" href=\"#生成证书\">#</a> <strong>生成证书</strong></h2><h3 id=\"一生成ca证书\"><a class=\"anchor\" href=\"#一生成ca证书\">#</a> <strong>一：生成 CA 证书</strong></h3><p>目前不使用第三方权威机构的 CA 来认证，自己充当 CA 的角色。<br>网上下载一个 openssl 软件<br>1. 创建私钥：<br>通常是 rsa 算法<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>ca-key.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl genrsa -out ca/ca-key.pem <span class=\"token number\">2048</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t查看key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ openssl rsa -in ca/ca-key.pem -text -noout</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t如果是DER格式的话,同理应该这样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ openssl rsa -in ca/ca-key.pem -text -noout -inform der</pre></td></tr></table></figure><p>2. 创建证书请求：</p><blockquote><p>因此在用户向 CA 申请数字证书时，用户首先需要在自己的电脑中先产生一个公私钥对。用户需要保管好自己的私钥，然后再把公钥和你的个人信息发送给 CA 机构，CA 机构通过你的公钥和个人信息最终签发出数字证书。<br>而 CSR 文件，其实就是包含了用户公钥和个人信息的一个数据文件。用户产生出这个 CSR 文件，再把这个 CSR 文件发送给 CA，CA 就会根据 CSR 中的内容来签发出数字证书。</p></blockquote><p>在制作 csr 文件的时，必须使用自己的私钥来签署申，还可以设定一个密钥.<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>ca-req.csr</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -new -out ca/ca-req.csr -key ca/ca-key.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  Country Name <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> letter code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>AU<span class=\"token punctuation\">]</span>:cn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  State or Province Name <span class=\"token punctuation\">(</span>full name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Some-State<span class=\"token punctuation\">]</span>:zhejiang</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  Locality Name <span class=\"token punctuation\">(</span>eg, city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:hangzhou</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  Organization Name <span class=\"token punctuation\">(</span>eg, company<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Internet Widgits Pty Ltd<span class=\"token punctuation\">]</span>:skyvision</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  Organizational Unit Name <span class=\"token punctuation\">(</span>eg, section<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:test</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  Common Name <span class=\"token punctuation\">(</span>eg, YOUR name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  Email Address <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:sky</pre></td></tr></table></figure><p>3. 自签署证书 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>ca/ca-cert.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -req -in ca/ca-req.csr -out ca/ca-cert.pem -signkey ca/ca-key.pem -days <span class=\"token number\">3650</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t查看证书格式:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ openssl x509 -in ca/ca-cert.pem -text -noout</pre></td></tr></table></figure><p>4. 将证书导出成浏览器支持的.p12 格式 ：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl pkcs12 -export -clcerts -in ca/ca-cert.pem -inkey ca/ca-key.pem -out ca/ca.p12</pre></td></tr></table></figure><p>密码：changeit</p><h3 id=\"二生成server证书\"><a class=\"anchor\" href=\"#二生成server证书\">#</a> <strong>二。生成 server 证书。</strong></h3><p>1. 创建私钥 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>server/server-key.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl genrsa -out server/server-key.pem <span class=\"token number\">2048</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t查看key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ openssl rsa -in server/server-key.pem -text -noout</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t如果是DER格式的话,同理应该这样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ openssl rsa -in server/server-key.pem -text -noout -inform der</pre></td></tr></table></figure><p>2. 创建证书请求 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>server/server-req.csr</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -new -out server/server-req.csr -key server/server-key.pem</pre></td></tr></table></figure><pre><code class=\"language-text\">\t  Country Name (2 letter code) [AU]:cn\n\t  State or Province Name (full name) [Some-State]:zhejiang\n\t  Locality Name (eg, city) []:hangzhou\n\t  Organization Name (eg, company) [Internet Widgits Pty Ltd]:skyvision\n\t  Organizational Unit Name (eg, section) []:test\n\t  Common Name (eg, YOUR name) []:192.168.1.246 注释：一定要写服务器所在的ip地址\n\t  Email Address []:sky\n</code></pre><p>查看 csr 文件内容:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ $ openssl req -in server-req.csr -text -noout // -noout 不用输出csr文件原始内容</pre></td></tr></table></figure><pre><code class=\"language-text\">\tCertificate Request:\n\t    Data:\n\t        Version: 0 (0x0)\n\t        Subject: C=XX, L=Default City, O=Default Company Ltd, CN=10.239.140.186\n\t        Subject Public Key Info:\n\t            Public Key Algorithm: rsaEncryption\n\t                Public-Key: (2048 bit)\n\t                Modulus:\n\t                    00:e2:0c:a7:33:33:d9:9b:90:1b:29:30:3c:81:31:\n\t                    09:97:0a:a9:76:d5:54:be:63:17:21:0c:b9:3a:f0:\n\t                    a6:02:37:1a:d4:1e:53:4e:e0:c8:d9:5f:27:57:7f:\n\t                    f3:eb:7f:9d:ad:79:d6:e7:40:64:c8:bc:3d:f3:b4:\n\t                    16:d6:30:e9:16:04:b6:a0:0e:8f:75:e4:4b:d6:8e:\n\t                    0a:8e:75:d8:41:89:09:90:96:b0:8d:32:5f:b5:96:\n\t                    1d:65:d6:a6:b4:c7:eb:3d:3b:f9:62:36:69:7d:07:\n\t                    6d:05:89:ce:a6:a5:98:a0:b2:5f:ab:bc:25:ba:08:\n\t                    d8:86:0a:b9:c0:91:ca:f8:d3:bb:36:14:21:f9:c2:\n\t                    b5:53:43:a9:2c:03:39:9b:93:ef:1d:d9:20:ef:dd:\n\t                    ff:57:c6:b5:47:e8:bb:46:32:e3:1d:3b:2e:5b:15:\n\t                    11:80:72:f6:2e:f5:b2:cc:02:7f:b1:d6:e9:3d:8e:\n\t                    0e:66:f6:6d:45:0e:2f:8c:d5:c3:92:dc:a1:9a:d9:\n\t                    b0:33:82:30:69:0a:05:ee:08:1b:a6:81:f4:bb:31:\n\t                    0d:fa:26:37:eb:4f:c8:58:df:e5:be:cc:ac:9a:62:\n\t                    42:f1:af:8c:35:88:e4:f3:b4:76:8f:6c:13:1f:9a:\n\t                    61:e0:08:0f:f2:b1:d6:f3:61:b4:0a:5d:9a:61:5f:\n\t                    e1:0b\n\t                Exponent: 65537 (0x10001)\n\t        Attributes:\n\t            a0:00\n\t    Signature Algorithm: sha256WithRSAEncryption\n\t         5b:62:35:07:43:99:dc:af:7c:61:1e:76:4e:f8:ef:59:b2:27:\n\t         60:71:30:15:5d:f3:0b:b1:b4:53:29:ec:d1:7c:18:48:0a:b3:\n\t         fe:b7:6d:80:ef:dc:c6:24:04:3d:bd:c1:b8:61:49:f3:1e:fb:\n\t         22:0f:fb:06:99:ec:db:18:ac:34:ff:4b:15:f8:84:06:01:4d:\n\t         68:4f:0c:a2:a5:34:dc:1b:61:44:c7:ff:ef:5d:92:a1:09:3f:\n\t         11:27:1c:a7:30:8e:97:6a:08:03:99:e6:6a:8f:1d:d6:ea:e7:\n\t         cd:18:a7:eb:36:3d:e7:6b:5e:ef:72:85:ca:eb:89:97:02:cf:\n\t         fc:38:31:58:e1:66:85:d1:e7:49:e2:72:ef:b1:60:36:55:d7:\n\t         90:bd:8d:0e:d8:c6:8f:d2:bf:bf:43:85:36:04:2e:f1:ec:5f:\n\t         d8:1b:17:22:a4:6a:de:a7:b2:2b:00:30:27:e6:4b:32:4d:55:\n\t         70:b0:61:3d:3f:f2:9d:e7:24:f6:4c:1f:bf:63:6a:d9:16:ef:\n\t         cb:91:a3:a4:43:b5:1f:11:85:ad:0e:b1:57:39:f2:0a:56:ec:\n\t         52:90:b0:11:96:c6:28:e0:de:0c:eb:f2:b1:66:ce:04:48:7f:\n\t         11:90:09:1d:fd:ca:a7:25:66:32:a2:64:33:1a:5e:a9:85:50:\n\t         8a:2d:90:a5\n</code></pre><p>3. 自签署证书 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>server/server-cert.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -req -in server/server-req.csr -out server/server-cert.pem -signkey server/server-key.pem -CA ca/ca-cert.pem -CAkey ca/ca-key.pem -CAcreateserial -days <span class=\"token number\">3650</span></pre></td></tr></table></figure><pre><code>\t * -CA选项指明用于被签名的csr证书\n\t * -CAkey选项指明用于签名的密钥\n\t * -CAcreateserial指明文件不存在时自动生成\n</code></pre><p>查看证书格式:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -in server/server-cert.pem -text -noout</pre></td></tr></table></figure><p>可以查看到证书里所包含的 public key 等相关信息:</p><pre><code>\tCertificate:\n\tData:\n\t    Version: 1 (0x0)\n\t    Serial Number:\n\t        cc:db:c0:f2:12:e8:09:27\n\tSignature Algorithm: sha256WithRSAEncryption\n\t    Issuer: C=XX, L=Default City, O=Default Company Ltd, CN=AI\t// 签发者(CA机构)\n\t    Validity\n\t        Not Before: Jul 16 07:01:18 2020 GMT\n\t        Not After : Jul 14 07:01:18 2030 GMT\n\t    Subject: C=XX, L=Default City, O=Default Company Ltd, CN=sky\n\t    Subject Public Key Info:\n\t        Public Key Algorithm: rsaEncryption\n\t            Public-Key: (2048 bit)\t\t\t// public key, 因此本地可以不需要再存储保留public key, 证书里已包含.\n\t            Modulus:\n\t                00:cd:d7:ed:e9:c6:5e:fa:bc:ef:1e:4e:92:52:99:\n\t                f0:34:96:67:7b:32:1b:f6:53:df:ca:7b:e5:72:6a:\n\t                29:e5:85:27:eb:71:00:c6:90:ac:c1:64:62:0d:2b:\n\t                b1:bc:b8:ee:e1:d4:54:b7:95:21:1e:de:56:c7:25:\n\t                4c:d4:2d:29:5f:48:19:8a:05:c4:33:d3:06:16:ec:\n\t                68:e2:81:07:cf:f9:d1:15:b2:68:3d:da:44:c3:d5:\n\t                ba:a3:0f:9e:34:34:71:53:4f:02:4b:eb:f8:de:fd:\n\t                94:3f:f4:ee:12:48:ea:b1:60:62:be:58:47:78:29:\n\t                59:5b:ae:57:53:23:31:aa:78:cc:6c:f0:f7:e9:76:\n\t                4a:b9:25:79:3f:9c:05:4e:f0:8e:87:32:df:87:72:\n\t                67:64:2e:9f:85:15:64:bf:ca:ce:33:71:ee:bb:1a:\n\t                d3:26:09:34:9b:65:b9:15:71:28:14:37:48:79:1b:\n\t                b1:99:a4:8c:cc:27:a1:a4:c4:28:8e:01:e5:08:db:\n\t                e6:45:6e:3d:d9:03:a9:cb:17:25:b7:c9:c9:4b:fb:\n\t                e5:93:d1:de:31:fe:a9:34:29:c3:29:a4:27:c2:eb:\n\t                66:99:c6:db:ba:52:07:30:97:d4:0a:1e:1b:5d:72:\n\t                f6:ff:19:92:22:c0:44:76:74:f7:a7:0d:c5:77:c8:\n\t                1c:55\n\t            Exponent: 65537 (0x10001)\n\tSignature Algorithm: sha256WithRSAEncryption\n\t     28:d1:d9:29:a5:40:f3:d3:d6:95:87:fd:2c:70:dc:0f:1c:86:\n\t     08:35:d0:a8:8e:d0:5d:78:28:ae:88:33:61:db:cd:b6:80:1c:\n\t     88:62:b8:ce:cf:87:14:15:bd:27:9a:3e:77:cb:a1:e0:11:0d:\n\t     89:ef:f2:e8:b2:2c:cf:96:26:bd:06:3a:7b:8f:4b:fa:b2:c3:\n\t     f9:14:3e:18:ef:57:b5:37:95:01:a0:0f:bf:6e:5c:c9:47:7b:\n\t     1a:ed:ca:7a:31:a1:89:e8:0d:4d:95:d2:61:e3:b8:48:e5:86:\n\t     19:91:3e:00:86:07:50:df:e2:57:29:69:61:c4:cc:55:8f:60:\n\t     de:20:c1:0d:7d:c7:98:52:f4:34:08:90:c5:90:34:ec:86:0f:\n\t     ad:9b:e7:1a:d4:7b:d9:dd:59:82:de:54:d3:87:8e:e7:82:ae:\n\t     22:70:cf:e7:d7:8c:f1:55:57:6d:41:e6:44:3c:83:b7:73:7e:\n\t     9a:d5:1d:af:72:e9:4e:88:d4:4f:9f:33:2f:dc:1b:50:10:8b:\n\t     db:cd:e4:0e:e6:96:cd:c6:27:c7:4b:c7:9f:05:74:32:35:7e:\n\t     99:78:36:30:ae:78:4b:c3:1a:6b:b8:db:62:23:b8:ab:22:11:\n\t     11:81:95:5d:46:f0:45:15:77:1f:6b:c0:bf:9d:a2:d2:b4:62:\n\t     c9:b5:2b:dd\n</code></pre><p>4. 将证书导出成浏览器支持的.p12 格式 ：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl pkcs12 -export -clcerts -in server/server-cert.pem -inkey server/server-key.pem -out server/server.p12</pre></td></tr></table></figure><p>密码：changeit</p><p>Additional：<br>因为 server 端的证书是由 CA 的 private key 签名 (sign) server 端的 public key 及其持有者的真实身份得到的，因此 server 端证书里就包含 server 的 public key.<br>就不需要用 Openssl 生成 server 端的 public key. 用 server 端的 **csr（certificate signing requests）** 生成 server 证书即可. client 端也一样.<br>client 端只需要用 CA 的 public key (CA 的 public key 所有人都能获取) 解密 server 端存放在 CA 的证书文件就可以得到 Server 端的 public key.<br>然后 client 端就可以用解密得到的 server 端的 public key 对 server 端用自身 private key 加密的信息附带的摘要 A (digest) 进行解密.<br>client 端将 server 端发过来的信息用 Hash 得到摘要 B (digest) 与解密得到的摘要 A (digest) 对比，如果一直则说明信息没有被黑客篡改.<br>如果中间黑客把 server 端加密的摘要 A (digest) 修改了，则 client 用从 CA 的 public key 解密得到的 server 端的 public key 是解不开摘要 A (digest) 的，说明摘要信息被黑客篡改，内容不可靠.</p><p>如果要生成 RSA 公钥，command 如下:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl rsa -in server/server-key.pem -pubout -out server/server-public-key.pem</pre></td></tr></table></figure><h3 id=\"三生成client证书\"><a class=\"anchor\" href=\"#三生成client证书\">#</a> <strong>三。生成 client 证书。</strong></h3><p>1. 创建私钥 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>client/client-key.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl genrsa -out client/client-key.pem <span class=\"token number\">2048</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t查看key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ openssl rsa -in client/client-key.pem -text -noout</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t如果是DER格式的话,同理应该这样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ openssl rsa -in client/client-key.pem -text -noout -inform der</pre></td></tr></table></figure><p>2. 创建证书请求 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>client/client-req.csr</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl req -new -out client/client-req.csr -key client/client-key.pem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  Country Name <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> letter code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>AU<span class=\"token punctuation\">]</span>:cn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  State or Province Name <span class=\"token punctuation\">(</span>full name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Some-State<span class=\"token punctuation\">]</span>:zhejiang</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  Locality Name <span class=\"token punctuation\">(</span>eg, city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:hangzhou</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  Organization Name <span class=\"token punctuation\">(</span>eg, company<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Internet Widgits Pty Ltd<span class=\"token punctuation\">]</span>:skyvision</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  Organizational Unit Name <span class=\"token punctuation\">(</span>eg, section<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:test</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  Common Name <span class=\"token punctuation\">(</span>eg, YOUR name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:sky</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  Email Address <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:sky 注释：就是登入中心的用户（本来用户名应该是Common Name，但是中山公安的不知道为什么使用的Email Address，其他版本没有测试）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  Please enter the following ‘extra’ attributes</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  to be sent with your certificate request</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t  A challenge password <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:123456</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  An optional company name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:tsing</pre></td></tr></table></figure><p>3. 自签署证书 ：<br>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;<strong>client/client-cert.pem</strong>&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl x509 -req -in client/client-req.csr -out client/client-cert.pem -signkey client/client-key.pem -CA ca/ca-cert.pem -CAkey ca/ca-key.pem -CAcreateserial -days <span class=\"token number\">3650</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t * -CA选项指明用于被签名的csr证书</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * -CAkey选项指明用于签名的密钥</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t * -CAcreateserial指明文件不存在时自动生成</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t查看证书格式:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ openssl x509 -in client/client-cert.pem -text -noout</pre></td></tr></table></figure><p>4. 将证书导出成浏览器支持的.p12 格式 ：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl pkcs12 -export -clcerts -in client/client-cert.pem -inkey client/client-key.pem -out client/client.p12</pre></td></tr></table></figure><p>密码：changeit</p><p>Additional. 生成 RSA 公钥:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ openssl rsa -in client/client-key.pem -pubout -out client/client-public-key.pem</pre></td></tr></table></figure><p>请一定严格根据里面的步骤来，待实验成功后，修改你自己想要修改的内容。我就是一开始没有安装该填写的来，结果生成的证书就无法配对成功。</p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/openssl/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/openssl/",
            "title": "openssl",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"openssl版本\"><a class=\"anchor\" href=\"#openssl版本\">#</a> openssl 版本</h2><pre><code>openssl version\nopenssl version -a\n</code></pre><p><a id=\"more\"></a></p><h2 id=\"支持的cipher\"><a class=\"anchor\" href=\"#支持的cipher\">#</a> 支持的 cipher</h2><pre><code>openssl ciphers -v\nopenssl ciphers -V 'ALL:COMPLEMENTOFALL'\n</code></pre><h2 id=\"查看key\"><a class=\"anchor\" href=\"#查看key\">#</a> 查看 key</h2><pre><code>openssl genrsa -out root-key.pem 3072\nopenssl rsa -in root-key.pem -text -noout\n</code></pre><h2 id=\"生成csr配置文件\"><a class=\"anchor\" href=\"#生成csr配置文件\">#</a> 生成 csr 配置文件</h2><p>root-ca.conf</p><pre><code>[ req ]\nencrypt_key = no\nprompt = no\nutf8 = yes\ndefault_md = sha384\ndefault_bits = 3072\nreq_extensions = req_ext\nx509_extensions = req_ext\ndistinguished_name = req_dn\n[ req_ext ]\nsubjectKeyIdentifier = hash\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign\n[ req_dn ]\nO = Istio\nCN = Root CA\n</code></pre><h2 id=\"查看csr\"><a class=\"anchor\" href=\"#查看csr\">#</a> 查看 csr</h2><pre><code>openssl req -new -sha384 -key root-key.pem -config root-ca.conf -out root-cert.csr\nopenssl req -in root-cert.csr -noout -text\n</code></pre><h2 id=\"查看证书\"><a class=\"anchor\" href=\"#查看证书\">#</a> 查看证书</h2><pre><code>openssl x509 -req -sha384 -days 3650 -signkey root-key.pem \\\n        -extensions req_ext -extfile root-ca.conf \\\n        -in root-cert.csr -out root-cert.pem\n\nopenssl x509 -in root-cert.pem -text -noout\n</code></pre><p></p><h2 id=\"测试某个服务器是否支持特定的密码套件\"><a class=\"anchor\" href=\"#测试某个服务器是否支持特定的密码套件\">#</a> 测试某个服务器是否支持特定的密码套件</h2><p>执行如下命令会提示 <strong><code>CONNECTED</code> </strong>说明服务器支持此密码套件</p><pre><code>$ openssl s_client -connect hci-node01:30007 -cipher ECDHE-RSA-AES256-GCM-SHA384\nCONNECTED(00000003)\ndepth=2 O = Istio, CN = Root CA\nverify error:num=19:self signed certificate in certificate chain\nverify return:1\ndepth=2 O = Istio, CN = Root CA\nverify return:1\ndepth=1 O = Istio, CN = Intermediate CA, L = cluster1\nverify return:1\ndepth=0\nverify return:1\nDONE\n---\n......\n</code></pre><h2 id=\"获取证书\"><a class=\"anchor\" href=\"#获取证书\">#</a> 获取证书</h2><pre><code>$ openssl s_client -showcerts -connect hci-node01:30007 &gt; httpbin-proxy-cert.txt\n</code></pre><h2 id=\"验证证书\"><a class=\"anchor\" href=\"#验证证书\">#</a> 验证证书</h2><p>verify 命令对证书的有效性进行验证，verify 指令会沿着证书链一直向上验证，直到一个自签名的 CA.</p><pre><code>openssl verify -CAfile &lt;(cat Intermediate.pem RootCert.pem) UserCert.pem\n</code></pre><p><strong><code>语法</code></strong></p><pre><code>openssl verify[-CApath directory] [-CAfile file] [-purpose purpose] [-policy arg] [-ignore_critical] [-crl_check] [-crl_check_all] [-policy_check] [-explicit_policy] [-inhibit_any] [-inhibit_map] [-x509_strict] [-extended_crl] [-use_deltas] [-policy_print] [-untrusted file] [-help] [-issuer_checks] [-verbose] [-] [certificates]\n</code></pre><ul><li><p>-CAfile filename 指定 CA 的证书文件，PEM 格式，这个文件里可能不只包含一个证书。如果需要对证书链进行验证，指定的文件中应包含所有的证书。加入顶级 CA 证书文件名为 0.pem，一级 CA 证书文件为 1.pem，二级证书文件为 2.pem，待验证的证书文件是 eve.pem，那么需要先将 0.pem，1.pem 证书文件的内容包含到 2.pem 中。证书文件都是文本文件，简单地使用 cat 命令就可以进行连接.</p></li><li><p>-CApath directory 指定 CA 证书所在的目录，这个目录下可能存在证书链中的多个证书文件。为了对这个目录下的证书进行检索，证书文件的命名需要遵循 xxxxxxxx.0，其中 xxxxxxxx 是 openssl x509 -hash -in 证书， 的输出值，8 个字母或数字。“.0” 是要有的.</p></li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/jwt_jwks/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/jwt_jwks/",
            "title": "jwt jwks",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><p>referencd:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX2NuL2NvZ25pdG8vbGF0ZXN0L2RldmVsb3Blcmd1aWRlL2FtYXpvbi1jb2duaXRvLXVzZXItcG9vbHMtdXNpbmctdG9rZW5zLXZlcmlmeWluZy1hLWp3dC5odG1s\">https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html</span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnVub3NxdWFyZS5jb20vd2h5LWFuZC1ob3ctdG8taW1wcm92ZS1qd3Qtc2VjdXJpdHktd2l0aC1qd2tzLWtleS1yb3RhdGlvbi1pbi1qYXZh\">https://blog.unosquare.com/why-and-how-to-improve-jwt-security-with-jwks-key-rotation-in-java</span></p><p><a id=\"more\"></a></p><h2 id=\"jwt\"><a class=\"anchor\" href=\"#jwt\">#</a> jwt</h2><p>一个 JSON Web 令牌 (JWT) 包含三个部分：</p><ol><li><p>标头</p></li><li><p>负载</p></li><li><p>签名</p></li></ol><pre><code>11111111111.22222222222.33333333333\n</code></pre><p>这些部分编码为 base64url 字符串，并用点 <strong><code>(.)</code> </strong>字符分隔。如果您的 JWT 不符合此结构，则视为无效，不接受.</p><h2 id=\"jwks\"><a class=\"anchor\" href=\"#jwks\">#</a> jwks</h2><p>这是一个样本 jwks.json 文件:</p><pre><code>{\n\t&quot;keys&quot;: [{\n\t\t&quot;kid&quot;: &quot;1234example=&quot;,\n\t\t&quot;alg&quot;: &quot;RS256&quot;,\n\t\t&quot;kty&quot;: &quot;RSA&quot;,\n\t\t&quot;e&quot;: &quot;AQAB&quot;,\n\t\t&quot;n&quot;: &quot;1234567890&quot;,\n\t\t&quot;use&quot;: &quot;sig&quot;\n\t}, {\n\t\t&quot;kid&quot;: &quot;5678example=&quot;,\n\t\t&quot;alg&quot;: &quot;RS256&quot;,\n\t\t&quot;kty&quot;: &quot;RSA&quot;,\n\t\t&quot;e&quot;: &quot;AQAB&quot;,\n\t\t&quot;n&quot;: &quot;987654321&quot;,\n\t\t&quot;use&quot;: &quot;sig&quot;\n\t}]\n}\n</code></pre><p><strong>1. 密钥 ID kid (Key ID)</strong><br>的 kid 是一个提示，指示用于保护令牌的 JSONWeb 签名 (JWS) 的密钥。</p><p><strong>2. 算法 alg (encryption algorithm)</strong><br>的 alg 标头参数表示用于保护 ID 令牌的密码算法。用户池使用 RS256 加密算法，这是一种采用 SHA-256 的 RSA 签名。有关 RSA 的更多信息，请参阅 RSA 密码术。</p><p>更多算法参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc1MTgjc2VjdGlvbi0zLjM=\"> specification</span></p><table><thead><tr><th style=\"text-align:center\">&quot;alg&quot; Param Value</th><th style=\"text-align:center\">Digital Signature Algorithm</th></tr></thead><tbody><tr><td style=\"text-align:center\">RS256</td><td style=\"text-align:center\">RSASSA-PKCS1-v1_5 using SHA-256</td></tr><tr><td style=\"text-align:center\">RS384</td><td style=\"text-align:center\">RSASSA-PKCS1-v1_5 using SHA-384</td></tr><tr><td style=\"text-align:center\">RS512</td><td style=\"text-align:center\">RSASSA-PKCS1-v1_5 using SHA-512</td></tr></tbody></table><p><strong>3. 密钥类型 kty (Key Type)</strong><br>kty 参数标识与密钥结合使用的加密算法系列，例如，在本示例中为 “RSA”。</p><p><strong>4. RSA 指数 (e)</strong><br>e 参数包含 RSA 公钥的指数值。它表示为采用 Base64urlUInt 编码的值。<br>e Parameter is used to define the RSA public exponent.</p><p><strong>5. RSA 模量 (n)</strong><br>n 参数包含 RSA 公钥的模量值。它表示为采用 Base64urlUInt 编码的值.<br>n Parameter is used to define the modulus for both the public and private keys. Its length, usually expressed in bits, is the key length.</p><p><strong>6. 使用 use (Public Key Use)</strong><br>的 use 参数描述公钥的预期用途。对于本示例，use 价值 sig 表示签名。</p><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/technologies/security/token_jwt/",
            "url": "https://kung-fu-master.github.io/2021/03/13/technologies/security/token_jwt/",
            "title": "Token jwt",
            "date_published": "2021-03-13T05:00:42.919Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1><ul><li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTXlDb2RlMTk5MC9wLzEzMDk2NDIzLmh0bWw=\">csdn blog</span></li><li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80OTQxYTI2OWE5ZDg=\">简书</span></li></ul><h1 id=\"json-web-tokenjwt简介\"><a class=\"anchor\" href=\"#json-web-tokenjwt简介\">#</a> <strong>Json Web Token (JWT) 简介</strong></h1><p>JWT 属于 Token 验证方式的一种方法.</p><blockquote><p>JSON Web Token（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑的、自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。此信息可以验证和信任，因为它是数字签名的。JWTs 可以使用密钥（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥 / 私钥对进行签名.</p></blockquote><h1 id=\"传统服务端验证客户端身份的方法\"><a class=\"anchor\" href=\"#传统服务端验证客户端身份的方法\">#</a> <strong>传统服务端验证客户端身份的方法</strong></h1><p>HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。</p><p>解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p><p>上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。</p><h1 id=\"基于-token-的身份验证方法\"><a class=\"anchor\" href=\"#基于-token-的身份验证方法\">#</a> <strong>基于 Token 的身份验证方法</strong></h1><p>Token 是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token 便应运而生。<br>Token 是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个 Token 便将此 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次带上用户名和密码。<br>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><h1 id=\"为什么要使用json-web-token\"><a class=\"anchor\" href=\"#为什么要使用json-web-token\">#</a> <strong>为什么要使用 JSON Web Token</strong></h1><ul><li>Token 的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮.</li><li>JSON 比 XML 不那么冗长，当它被编码时，它的大小也更小，使得 JWT 比 SAML 更紧凑。这使得 JWT 成为在 HTML 和 HTTP 环境中传递的一个很好的选择。</li><li>安全方面，使用 HMAC 算法，SWT 只能由共享密钥对称签名。但是，JWT 和 SAML 令牌可以使用 X.509 证书形式的公钥 / 私钥对进行签名。与签名 JSON 的简单性相比，使用 XML 数字签名来签名 XML 而不引入隐藏的安全漏洞是非常困难的。</li><li>JSON 解析器在大多数编程语言中都很常见，因为它们直接映射到对象。相反，XML 没有自然的文档到对象的映射。这使得使用 JWT 比使用 SAML 断言更容易。</li><li>在使用方面，JWT 是在互联网上使用的。这突出了 JSON Web 令牌在多个平台（尤其是移动平台）上客户端处理的方便性。</li><li>比较编码 JWT 和编码 SAML 的长度.</li></ul><h1 id=\"jwtjson-web-token-一种token验证方法\"><a class=\"anchor\" href=\"#jwtjson-web-token-一种token验证方法\">#</a> <strong>JWT (Json Web Token 一种 Token 验证方法)</strong></h1><p>实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：</p><ul><li>header（头部）</li><li>payload（荷载，数据）</li><li>signature（签名）<br>中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：</li></ul><pre><code>\teyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n</code></pre><h2 id=\"header-头部\"><a class=\"anchor\" href=\"#header-头部\">#</a> <strong>Header 头部</strong></h2><ul><li>令牌的类型</li><li>正在使用的签名算法 (HMAC, SHA256, RSA 等)。</li></ul><p>每个 JWT token 里面都有一个 header，也就是头部数据。里面包含了使用的算法，这个 JWT 是不是带签名的或者加密的。主要就是说明一下怎么处理这个 JWT token 。<br>头部里包含的东西可能会根据 JWT 的类型有所变化，比如一个加密的 JWT 里面要包含使用的加密的算法。唯一在头部里面要包含的是 alg 这个属性，如果是加密的 JWT，这个属性的值就是使用的签名或者解密用的算法。如果是未加密的 JWT，这个属性的值要设置成 none。<br>示例：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token string\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>意思是这个 JWT 用的算法是 HS256。上面的内容得用 base64url 的形式编码一下，所以就变成这样：</p><pre><code>\teyJhbGciOiJIUzI1NiJ9\n</code></pre><h2 id=\"payload-有效负载\"><a class=\"anchor\" href=\"#payload-有效负载\">#</a> <strong>Payload 有效负载</strong></h2><p>有效负载包含了 &quot;声明 (claims)&quot;, 有三种类型的 claims：</p><ul><li>registered claims 已注册的 (不是强制的，而是推荐，iss（发行者）、exp（到期时间）、sub（主题）、aud（受众）和其他)</li><li>public claims 公开的 (可以由使用 JWT 的用户随意定义，为了避免冲突，应该在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvand0L2p3dC54aHRtbA==\"> IANA JSON Web 令牌注册表</span>中定义它们，或者将它们定义为包含防冲突命名空间的 URI)</li><li>private claims 私有的</li></ul><p>Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：</p><ul><li>iss：Issuer，发行者</li><li>sub：Subject，主题</li><li>aud：Audience，观众</li><li>exp：Expiration time，过期时间</li><li>nbf：Not before</li><li>iat：Issued at，发行时间</li><li>jti：JWT ID</li></ul><p>比如下面这个 Payload ，用到了 iss 发行人，还有 exp 过期时间这两个标准字段。另外还有两个自定义的字段，一个是 name ，还有一个是 admin 。</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token string\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  <span class=\"token string\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ninghao.net\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  <span class=\"token string\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1438955445\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  <span class=\"token string\">\"admin\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 base64url 编码以后就变成了这个样子：</p><pre><code>\t eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ\n</code></pre><p><strong>请注意，对于已签名的令牌，此信息虽然受保护不受篡改，但任何人都可以读取。除非经过加密，否则不要将机密信息放在 JWT 的有效负载或头部</strong>.</p><h2 id=\"signature-签名\"><a class=\"anchor\" href=\"#signature-签名\">#</a> <strong>Signature 签名</strong></h2><p>要创建签名部分，您必须已经有了 经过编码的<strong>头部</strong>、经过编码的<strong>负载</strong>、一个<strong>秘钥</strong>、在头部中指定的<strong>算法</strong>，这样就可以进行签名了.<br>Signature 这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。</p><ul><li>header</li><li>payload</li><li>secret</li></ul><pre><code>\tconst encodedString = base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload); \n\tHMACSHA256(encodedString, 'secret');\n</code></pre><p>处理完成以后看起来像这样：</p><pre><code>\t SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n</code></pre><p>最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：</p><pre><code>\t eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n</code></pre><p>输出的内容是三个由点分隔的 Base64 URL 字符串。它可以在 HTML 和 HTTP 环境中轻松传递，它比 XML 的标准（如 SAML）更加紧凑.<br>客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。</p><h2 id=\"签名的作用\"><a class=\"anchor\" href=\"#签名的作用\">#</a> <strong>签名的作用:</strong></h2><p>(1) 签名用于验证消息在传输过程中没有被更改。<br>(2) 使用私钥签名的令牌，还可以验证 JWT 的发送者是它所说的发送者。</p><h1 id=\"签发-json-web-tokenjwt\"><a class=\"anchor\" href=\"#签发-json-web-tokenjwt\">#</a> <strong>签发 Json Web Token (JWT)</strong></h1><ul><li>JWT 对 “信息” 进行签名，产生一个令牌。</li><li>签名的令牌可以验证其中包含的内容的完整性（防篡改）。</li><li>也可对 “信息” 加密，加密的令牌则对其他方隐藏这些内容。</li><li>当令牌使用公钥 / 私钥对签名时，签名还证明只有持有私钥的一方才是签名方。可以非对称加密方式证明了</li></ul><h2 id=\"hs256-算法签发json-web-tokenjwt\"><a class=\"anchor\" href=\"#hs256-算法签发json-web-tokenjwt\">#</a> <strong>HS256 算法签发 Json Web Token (JWT)</strong></h2><p>这种算法需要一个密钥（密码）.<br>在项目里随便添加一个 .js 文件，比如 index.js，在文件里添加下面这些代码：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// Token 数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tname<span class=\"token operator\">:</span> <span class=\"token string\">'wanghao'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tadmin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 密钥</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">const</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">'ILOVENINGHAO'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 签发 Token</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">'1day'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 输出签发的 Token</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>非常简单，就是用了刚刚为项目安装的 jsonwebtoken 里面提供的 jwt.sign 功能，去签发一个 token。这个 sign 方法需要三个参数：</p><ul><li>playload：签发的 token 里面要包含的一些数据。</li><li>secret：签发 token 用的密钥，在验证 token 的时候同样需要用到这个密钥。</li><li>options：一些其它的选项。</li></ul><p>在命令行下面，用 node 命令，执行一下项目里的 index.js 这个文件（node index.js），会输出应用签发的 token：</p><pre><code>\teyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzM5MDYsImV4cCI6MTUyOTEyMDMwNn0.DctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ-PU\n</code></pre><p>上面的 Token 内容并没有加密，所以如果用一些 JWT 解码功能，可以看到 Token 里面包含的内容，内容由三个部分组成，像这样：</p><pre><code>\t// header\n\t{\n\t  &quot;alg&quot;: &quot;HS256&quot;, \n\t  &quot;typ&quot;: &quot;JWT&quot;\n\t}\n\t// payload\n\t{\n\t  &quot;admin&quot;: true, \n\t  &quot;iat&quot;: 1529033906, \n\t  &quot;name&quot;: &quot;wanghao&quot;, \n\t  &quot;exp&quot;: 1529120306\n\t}\n\t// signature\n\tDctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ-PU\n</code></pre><blockquote><p>假设用户通过了某种身份验证，你就可以使用上面的签发 Token 的功能为用户签发一个 Token。一般在客户端那里会把它保存在 Cookie 或 LocalStorage 里面。<br>用户下次向我们的应用请求受保护的资源的时候，可以在请求里带着我们给它签发的这个 Token，后端应用收到请求，检查签名，如果验证通过确定这个 Token 是我们自己签发的，那就可以为用户响应回他需要的资源。</p></blockquote><h2 id=\"rs256-算法签发json-web-tokenjwt\"><a class=\"anchor\" href=\"#rs256-算法签发json-web-tokenjwt\">#</a> <strong>RS256 算法签发 Json Web Token (JWT)</strong></h2><p>默认签发还有验证 Token 的时候用的是 HS256 算法，这种算法需要一个密钥（密码）。我们还可以使用 RS256 算法签发与验证 JWT。这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。</p><p>在项目下面创建一个新的目录，里面可以存储即将生成的密钥与公钥文件。</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/desktop/jwt-demo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">mkdir</span> config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token builtin class-name\">cd</span> config</pre></td></tr></table></figure><p><strong>密钥:</strong><br>先生成一个密钥文件：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen -t rsa -b <span class=\"token number\">2048</span> -f private.key</pre></td></tr></table></figure><p><strong>公钥:</strong><br>基于上面生成的密钥，再去创建一个对应的公钥：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl rsa -in private.key -pubout -outform PEM -out public.key</pre></td></tr></table></figure><p><strong>签发 JWT（RS256 算法）</strong><br>用 RS256 算法签发 JWT 的时候，需要从文件系统上读取创建的密钥文件里的内容。</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t <span class=\"token comment\">// 获取签发 JWT 时需要用的密钥</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t <span class=\"token keyword\">const</span> privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/private.key'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t 签发仍然使用 jwt<span class=\"token punctuation\">.</span>sign 方法，只不过在选项参数里特别说明一下使用的算法是 <span class=\"token constant\">RS256</span>：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t <span class=\"token comment\">// 签发 Token</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t <span class=\"token keyword\">const</span> tokenRS256 <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t <span class=\"token comment\">// 输出签发的 Token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RS256 算法：'</span><span class=\"token punctuation\">,</span> tokenRS256<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"验证json-web-tokenjwt\"><a class=\"anchor\" href=\"#验证json-web-tokenjwt\">#</a> <strong>验证 Json Web Token (JWT)</strong></h1><h2 id=\"hs256-算法验证json-web-tokenjwt\"><a class=\"anchor\" href=\"#hs256-算法验证json-web-tokenjwt\">#</a> <strong>HS256 算法验证 Json Web TOken (JWT)</strong></h2><p>需要一个签发 token 时候用的密钥（密码）来验证，这种算法需要一个密钥（密码）.<br>验证 JWT 的用效性，确定一下用户的 JWT 是我们自己签发的，首先要得到用户的这个 JWT Token，然后用 jwt.verify 这个方法去做一下验证。这个方法是 Node.js 的 jsonwebtoken 这个包里提供的，在其它的应用框架或者系统里，你可能会找到类似的方法来验证 JWT。<br>打开项目的 index.js 文件，里面添加几行代码：</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 验证 Token</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tjwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">'bad secret'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> decoded</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>把要验证的 Token 数据，还有签发这个 Token 的时候用的那个密钥告诉 verify 这个方法，在一个回调里面有两个参数，error 表示错误，decoded 是解码之后的 Token 数据。</p><p>执行：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ node ~/desktop/jwt-demo/index.js</pre></td></tr></table></figure><p>输出：</p><pre><code>\teyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzQ3MzMsImV4cCI6MTUyOTEyMTEzM30.swXojmu7VimFu3BoIgAxxpmm2J05dvD0HT3yu10vuqU\n\tinvalid signature\n</code></pre><p>注意输出了一个 invalid signature ，表示 Token 里的签名不对，这是因为我们组长 verify 方法提供的密钥并不是签发 Token 的时候用的那个密钥。这样修改一下：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jwt.verify<span class=\"token punctuation\">(</span>token, secret, <span class=\"token punctuation\">(</span>error, decoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>再次运行，会输出类似的数据：</p><pre><code>\teyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzUzODYsImV4cCI6MTUyOTEyMTc4Nn0.mkNrt4TfcfmP22xd3C_GQn8qnUmlB39dKT9SpIBTBGI\n\t{ name: 'wanghao', admin: true, iat: 1529035386, exp: 1529121786 }\n</code></pre><h2 id=\"rs256-算法验证json-web-tokenjwt\"><a class=\"anchor\" href=\"#rs256-算法验证json-web-tokenjwt\">#</a> <strong>RS256 算法验证 Json Web Token (JWT)</strong></h2><p>验证 JWT（RS256 算法）<br>验证使用 RS256 算法签发的 JWT，需要在文件系统上读取公钥文件里的内容。然后用 jwt 的 verify 方法去做验证。</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取验证 JWT 时需要用的公钥</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> publicKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/public.key'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 验证 Token</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tjwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>tokenRS256<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> decoded</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> <strong>使用场景</strong></h1><p><img data-src=\"token_scene1.png\" alt=\"\"></p><ol><li>应用程序或客户端，向授权服务器请求授权。</li><li>当授权被通过时，授权服务器将向应用程序返回一个访问令牌 token。</li><li>应用程序使用访问令牌访问受保护的资源。<br><strong>请注意，使用签名的令牌，令牌中包含的所有信息都将公开给用户或其他方（虽然他们无法更改它，但可以阅读）。这意味着您不应将机密信息放入令牌中.</strong></li></ol><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "security",
                "security"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/storage/ceph/ceph_02_deployment/",
            "url": "https://kung-fu-master.github.io/2021/03/13/storage/ceph/ceph_02_deployment/",
            "title": "Ceph 02 deployment on Kubernetes",
            "date_published": "2021-03-13T05:00:42.904Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><p>This document describes the steps to enable Ceph cluster in Kubernetes(k8s)</p><h2 id=\"prerequisites\"><a class=\"anchor\" href=\"#prerequisites\">#</a> <strong>Prerequisites</strong></h2><ol><li>A running Kubernetes environmen.</li></ol><h2 id=\"setup-steps\"><a class=\"anchor\" href=\"#setup-steps\">#</a> <strong>Setup steps</strong></h2><ol><li>The first step is to deploy the Rook operator. Check that you are using the example yaml files that correspond to your release of Rook.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> clone --single-branch --branch release-1.3 https://github.com/rook/rook.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token builtin class-name\">cd</span> cluster/examples/kubernetes/ceph</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ kubectl create -f common.yaml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ kubectl create -f operator.yaml</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tVerify the rook-ceph-operator is <span class=\"token keyword\">in</span> the Running state before proceeding</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t$ kubectl -n rook-ceph get pod</pre></td></tr></table></figure><ol start=\"2\"><li>Now that the Rook operator is running we can create the Ceph cluster. For the cluster to survive reboots, make sure you set the dataDirHostPath property that is valid for your hosts.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl create -f cluster.yaml</pre></td></tr></table></figure><ol start=\"3\"><li>Use kubectl to list pods in the rook-ceph namespace. You should be able to see the following pods once they are all running. The number of osd pods will depend on the number of nodes in the cluster and the number of devices configured. If you did not modify the cluster.yaml above, it is expected that one OSD will be created per node. The CSI, rook-ceph-agent, and rook-discover pods are also optional depending on your settings.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph get pod</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  NAME                                                 READY   STATUS      RESTARTS   AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  csi-cephfsplugin-provisioner-d77bb49c6-n5tgs         <span class=\"token number\">5</span>/5     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  csi-cephfsplugin-provisioner-d77bb49c6-v9rvn         <span class=\"token number\">5</span>/5     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  csi-cephfsplugin-rthrp                               <span class=\"token number\">3</span>/3     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  csi-rbdplugin-hbsm7                                  <span class=\"token number\">3</span>/3     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  csi-rbdplugin-provisioner-5b5cd64fd-nvk6c            <span class=\"token number\">6</span>/6     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  csi-rbdplugin-provisioner-5b5cd64fd-q7bxl            <span class=\"token number\">6</span>/6     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  rook-ceph-agent-4zkg8                                <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          140s</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  rook-ceph-crashcollector-minikube-5b57b7c5d4-hfldl   <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          105s</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t  rook-ceph-mgr-a-64cd7cdf54-j8b5p                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          77s</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  rook-ceph-mon-a-694bb7987d-fp9w7                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          105s</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t  rook-ceph-mon-b-856fdd5cb9-5h2qk                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          94s</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t  rook-ceph-mon-c-57545897fc-j576h                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          85s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t  rook-ceph-operator-85f5b946bd-s8grz                  <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          92m</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  rook-ceph-osd-0-6bb747b6c5-lnvb6                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          23s</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t  rook-ceph-osd-1-7f67f9646d-44p7v                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          24s</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t  rook-ceph-osd-2-6cd4b776ff-v4d68                     <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          25s</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t  rook-ceph-osd-prepare-node1-vx2rz                    <span class=\"token number\">0</span>/2     Completed   <span class=\"token number\">0</span>          60s</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t  rook-ceph-osd-prepare-node2-ab3fd                    <span class=\"token number\">0</span>/2     Completed   <span class=\"token number\">0</span>          60s</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t  rook-ceph-osd-prepare-node3-w4xyz                    <span class=\"token number\">0</span>/2     Completed   <span class=\"token number\">0</span>          60s</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t  rook-discover-dhkb8                                  <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>          140s</pre></td></tr></table></figure><ol start=\"4\"><li>To verify that the cluster is in a healthy state, connect to the Rook toolbox and run the ceph status command.</li></ol><ul><li>All mons should be in quorum</li><li>A mgr should be active</li><li>At least one OSD should be active</li><li>If the health is not HEALTH_OK, the warnings or errors should be investigated.</li></ul><p>Running the Toolbox in Kubernetes:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl create -f toolbox.yaml</pre></td></tr></table></figure><p>Wait for the toolbox pod to download its container and get to the running state:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph get pod -l <span class=\"token string\">\"app=rook-ceph-tools\"</span></pre></td></tr></table></figure><p>Once the rook-ceph-tools pod is running, you can connect to it with:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph <span class=\"token builtin class-name\">exec</span> -it <span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n rook-ceph get pod -l <span class=\"token string\">\"app=rook-ceph-tools\"</span> -o <span class=\"token assign-left variable\">jsonpath</span><span class=\"token operator\">=</span><span class=\"token string\">'&#123;.items[0].metadata.name&#125;'</span><span class=\"token variable\">)</span></span> <span class=\"token function\">bash</span></pre></td></tr></table></figure><p>Example:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ceph status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  cluster:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    id:     a0452c76-30d9-4c1a-a948-5d8405f19a7c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    health: HEALTH_OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  services:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    mon: <span class=\"token number\">3</span> daemons, quorum a,b,c <span class=\"token punctuation\">(</span>age 3m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    mgr: a<span class=\"token punctuation\">(</span>active, since 2m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t    osd: <span class=\"token number\">3</span> osds: <span class=\"token number\">3</span> up <span class=\"token punctuation\">(</span>since 1m<span class=\"token punctuation\">)</span>, <span class=\"token number\">3</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>since 1m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>When you are done with the toolbox, you can remove the deployment, but if you want continue to doing other test experiments below, please keep the toolbox:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph delete deployment rook-ceph-tools</pre></td></tr></table></figure><h2 id=\"object-store\"><a class=\"anchor\" href=\"#object-store\">#</a> <strong>Object Store</strong></h2><h3 id=\"1-create-an-object-store\"><a class=\"anchor\" href=\"#1-create-an-object-store\">#</a> 1. Create an Object Store</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> cluster/examples/kubernetes/ceph</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t// Create the object store</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ kubectl create -f object.yaml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t// To confirm the object store is configured, <span class=\"token function\">wait</span> <span class=\"token keyword\">for</span> the rgw pod to start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ kubectl -n rook-ceph get pod -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>rook-ceph-rgw</pre></td></tr></table></figure><h3 id=\"2-define-a-storage-class-that-will-allow-object-clients-to-create-a-bucket\"><a class=\"anchor\" href=\"#2-define-a-storage-class-that-will-allow-object-clients-to-create-a-bucket\">#</a> 2. Define a storage class that will allow object clients to create a bucket.</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Define the storage class that will allow object clients to create a bucket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl create -f storageclass-bucket-delete.yaml</pre></td></tr></table></figure><h3 id=\"31-create-a-bucket\"><a class=\"anchor\" href=\"#31-create-a-bucket\">#</a> 3.1 Create a Bucket</h3><p>An Object Bucket Claim (OBC) is custom resource which requests a bucket (new or existing) and is described by a Custom Resource Definition (CRD).</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Create an Object Bucket Claim <span class=\"token punctuation\">(</span>OBC<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl create -f object-bucket-claim-delete.yaml</pre></td></tr></table></figure><p>When the OBC is created, the Rook-Ceph bucket provisioner will create a new bucket.A <code>secret</code> and <code>ConfigMap</code> are created with the same name as the OBC and in the same namespace. The secret contains credentials used by the application pod to access the bucket. The ConfigMap contains bucket endpoint information and is also consumed by the pod.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Check the created bucket name, <span class=\"token string\">\"ceph-bkt-5124df41-7939-4aa6-b989-2bff0aa38deb\"</span> as shown below.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl describe obc ceph-delete-bucket</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  Spec:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    Object Bucket Name:    obc-default-ceph-delete-bucket</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t    Bucket Name:           ceph-bkt-5124df41-7939-4aa6-b989-2bff0aa38deb</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    Generate Bucket Name:  ceph-bkt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    Storage Class Name:    rook-ceph-delete-bucket</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  Status:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t    Phase:  Bound\t\t// <span class=\"token punctuation\">[</span>Notice<span class=\"token punctuation\">]</span>: The Status must be Bound, <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token variable\">`</span>Pending<span class=\"token variable\">`</span></span>, please <span class=\"token function\">wait</span> or delete and recreate the obc.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t  Events:   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr></table></figure><p>An Object Bucket (OB) is a custom resource automatically generated when a bucket is provisioned. It is a global resource, typically not visible to non-admin users, and contains information specific to the bucket. It is described by an OB CRD.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Check the OB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl get ob</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  NAME                             AGE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  obc-default-ceph-delete-bucket   5m16s</pre></td></tr></table></figure><h3 id=\"32-create-another-bucket\"><a class=\"anchor\" href=\"#32-create-another-bucket\">#</a> 3.2 Create another Bucket</h3><p>Change the ObjectBucketClaim <span class=\"exturl\" data-url=\"aHR0cDovL21ldGFkYXRhLm5hbWU=\">metadata.name</span> and create another bucket.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">vim</span> object-bucket-claim-delete.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  apiVersion: objectbucket.io/v1alpha1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  kind: ObjectBucketClaim</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  metadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    name: ceph-bucket-new\t\t<span class=\"token comment\"># Change bucket name</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  spec:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    generateBucketName: ceph-bkt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    storageClassName: rook-ceph-bucket</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t$ kubectl create -f object-bucket-claim-delete.yaml</pre></td></tr></table></figure><p><strong>Client Connections</strong><br>The following commands extract key pieces of information from the secret and configmap:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// config-map, secret, OBC will part of default <span class=\"token keyword\">if</span> no specific name space mentioned</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_HOST</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n default get cm ceph-delete-bucket -o yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> BUCKET_HOST <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'NR==1'</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n default get secret ceph-delete-bucket -o yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> AWS_ACCESS_KEY_ID <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'NR==1'</span><span class=\"token operator\">|</span> base64 --decode<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n default get secret ceph-delete-bucket -o yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> AWS_SECRET_ACCESS_KEY <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'NR==1'</span><span class=\"token operator\">|</span> base64 --decode<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h3 id=\"4-consume-the-object-storage\"><a class=\"anchor\" href=\"#4-consume-the-object-storage\">#</a> 4. Consume the Object Storage</h3><p><strong>Enter into the toolbox</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl get po -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>rook-ceph-tools -n rook-ceph -o <span class=\"token assign-left variable\">jsonpath</span><span class=\"token operator\">=</span><span class=\"token string\">'&#123;.items[0].metadata.name&#125;'</span><span class=\"token variable\">)</span></span> -it -n rook-ceph -- <span class=\"token function\">bash</span></pre></td></tr></table></figure><p>Connected to the Rook toolbox Pod and then set the four environment variables for use by your client(ie. inside the toolbox).</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_HOST</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>host<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>endpoint<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>accessKey<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>secretKey<span class=\"token operator\">></span></pre></td></tr></table></figure><p>Endpoint: The endpoint where the rgw service is listening. Run <code>kubectl -n rook-ceph get svc rook-ceph-rgw-my-store</code> , then combine the clusterIP and the port.</p><p><strong>Install s3cmd</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">proxy</span><span class=\"token operator\">=</span>http://Proxy-Name:913 <span class=\"token operator\">>></span> /etc/yum.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ yum --assumeyes <span class=\"token function\">install</span> s3cmd</pre></td></tr></table></figure><p><strong>PUT or GET an object</strong><br>Upload a file to the newly created bucket</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello Rook\"</span> <span class=\"token operator\">></span> /tmp/rookObj</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ s3cmd put /tmp/rookObj --no-ssl --host<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;AWS_HOST&#125;</span> --host-bucket<span class=\"token operator\">=</span>  s3://<span class=\"token operator\">&lt;</span>-Your-Bucket-Name-<span class=\"token operator\">></span> // As follow.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t// $ s3cmd put /tmp/rookObj --no-ssl --host<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;AWS_HOST&#125;</span> --host-bucket<span class=\"token operator\">=</span>  s3://ceph-bkt-5124df41-7939-4aa6-b989-2bff0aa38deb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  upload: <span class=\"token string\">'/tmp/rookObj'</span> -<span class=\"token operator\">></span> <span class=\"token string\">'s3://ceph-bkt-5124df41-7939-4aa6-b989-2bff0aa38deb/rookObj'</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> of <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t   <span class=\"token number\">11</span> of <span class=\"token number\">11</span>   <span class=\"token number\">100</span>% <span class=\"token keyword\">in</span>    0s   <span class=\"token number\">190.11</span> B/s  <span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>Download and verify the file from the bucket</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ s3cmd get s3://<span class=\"token operator\">&lt;</span>-Your-Bucket-Name-<span class=\"token operator\">></span>/rookObj /tmp/rookObj-download --no-ssl --host<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;AWS_HOST&#125;</span> --host-bucket<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  download: <span class=\"token string\">'s3://ceph-bkt-5124df41-7939-4aa6-b989-2bff0aa38deb/rookObj'</span> -<span class=\"token operator\">></span> <span class=\"token string\">'/tmp/rookObj-download'</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> of <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t   <span class=\"token number\">11</span> of <span class=\"token number\">11</span>   <span class=\"token number\">100</span>% <span class=\"token keyword\">in</span>    0s   <span class=\"token number\">254.34</span> B/s  <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ <span class=\"token function\">cat</span> /tmp/rookObj-download</pre></td></tr></table></figure><p>List the buckets</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ s3cmd <span class=\"token function\">ls</span> --no-ssl --host<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;AWS_HOST&#125;</span> --host-bucket<span class=\"token operator\">=</span></pre></td></tr></table></figure><h2 id=\"teardown\"><a class=\"anchor\" href=\"#teardown\">#</a> Teardown</h2><ol><li>First you will need to clean up the resources created on top of the Rook cluster.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete -n rook-ceph cephblockpool replicapool</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl delete storageclass rook-ceph-block</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ kubectl delete -f csi/cephfs/kube-registry.yaml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ kubectl delete storageclass csi-cephfs</pre></td></tr></table></figure><ol start=\"2\"><li>Delete the CephCluster CRD</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph delete cephcluster rook-ceph</pre></td></tr></table></figure><ol start=\"3\"><li>Delete the Operator and related Resources</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete -f operator.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl delete -f common.yaml</pre></td></tr></table></figure><ol start=\"4\"><li>删掉未删除的 crd, 如果以前创建过 Object bucket 的话.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph patch crd objectbuckets.objectbucket.io --type merge -p <span class=\"token string\">'&#123;\"metadata\":&#123;\"finalizers\": [null]&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl -n rook-ceph patch crd objectbucketclaims.objectbucket.io --type merge -p <span class=\"token string\">'&#123;\"metadata\":&#123;\"finalizers\": [null]&#125;&#125;'</span></pre></td></tr></table></figure><ol start=\"5\"><li>/var/lib/rook: Path on each host in the cluster where configuration is cached by the ceph mons and osds. so need to clean the files in the path.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">rm</span> -rf /var/lib/rook/</pre></td></tr></table></figure><p>Additional: If there are ceph related files in the &quot;/var/lib/kubelet/plugins/&quot; and &quot;/var/lib/kubelet/plugins_registry/&quot; path, delete them.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">rm</span> -rf /var/lib/kubelet/plugins/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">rm</span> -rf /var/lib/kubelet/plugins_registry/*</pre></td></tr></table></figure><ol start=\"6\"><li>Delete the data on hosts</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token assign-left variable\">DISK</span><span class=\"token operator\">=</span><span class=\"token string\">\"/dev/sdb\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\"># Zap the disk to a fresh, usable state (zap-all is important, b/c MBR has to be clean)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\"># You will have to run this step for all disks.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tsgdisk --zap-all <span class=\"token variable\">$DISK</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$DISK</span>\"</span> <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct,dsync</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\"># These steps only have to be run once on each node</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\"># If rook sets up osds using ceph-volume, teardown leaves some devices mapped that lock the disks.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">ls</span> /dev/mapper/ceph-* <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -I% -- dmsetup remove %</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\"># ceph-volume setup can leave ceph-&lt;UUID> directories in /dev (unnecessary clutter)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">rm</span> -rf /dev/ceph-*</pre></td></tr></table></figure><h2 id=\"faq\"><a class=\"anchor\" href=\"#faq\">#</a> FAQ</h2><p>If the cluster resource still exists even though you have executed the delete command earlier, see the command below remove the finalizer.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph patch crd cephclusters.ceph.rook.io --type merge -p <span class=\"token string\">'&#123;\"metadata\":&#123;\"finalizers\": [null]&#125;&#125;'</span></pre></td></tr></table></figure><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2><p>删除其它机器 pvc 绑定的 /var/lib/kubelet/plugins/* 出错</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">rm</span> -rf /var/lib/kubelet/plugins/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\trm: cannot remove ‘/var/lib/kubelet/plugins/kubernetes.io/csi/pv/pvc-d6ea6990-2a0b-4f4b-9838-3a971424732d/globalmount’: Device or resource busy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\trm: cannot remove ‘/var/lib/kubelet/plugins/kubernetes.io/csi/pv/pvc-a08fed0b-b16d-4a74-a052-7936d6fb8340/globalmount’: Device or resource busy</pre></td></tr></table></figure><p>解决方法:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">umount</span> /var/lib/kubelet/plugins/kubernetes.io/csi/pv/pvc-d6ea6990-2a0b-4f4b-9838-3a971424732d/globalmount</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">umount</span> /var/lib/kubelet/plugins/kubernetes.io/csi/pv/pvc-a08fed0b-b16d-4a74-a052-7936d6fb8340/globalmount</pre></td></tr></table></figure><p>再进行删除即可</p><!-- rebuild by hrmmi -->",
            "tags": [
                "storage",
                "ceph",
                "storage"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/03/13/storage/greenplum/greenplum_01_deployment/",
            "url": "https://kung-fu-master.github.io/2021/03/13/storage/greenplum/greenplum_01_deployment/",
            "title": "greenplum 01 deployment on Kubernetes",
            "date_published": "2021-03-13T05:00:42.904Z",
            "content_html": "<!-- build time:Wed Mar 17 2021 02:50:23 GMT+0800 (中国标准时间) --><h2 id=\"prerequisites\"><a class=\"anchor\" href=\"#prerequisites\">#</a> <strong>Prerequisites</strong></h2><ol><li><span class=\"exturl\" data-url=\"aHR0cDovL2dyZWVucGx1bS1rdWJlcm5ldGVzLmRvY3MucGl2b3RhbC5pby8yLTAvbm9kZS1yZXF1aXJlbWVudHMuaHRtbA==\">Kubernetes Node Configuration</span> describes the Linux kernel configuration requirements for each Kubernetes node that is used in a Pivotal Greenplum cluster. These requirements are common to all Pivotal Greenplum deployments, regardless of which Kubernetes environment you use.</li><li>Ensure that any previous Pivotal Greenplum installation has been uninstalled as described in Uninstalling Pivotal Greenplum.</li><li>kubectl configured to refer to a Kubernetes cluster.</li></ol><h2 id=\"install-greenplum-operator-for-kubernetes\"><a class=\"anchor\" href=\"#install-greenplum-operator-for-kubernetes\">#</a> <strong>Install Greenplum Operator for Kubernetes</strong></h2><ol><li><p>Download the Pivotal Greenplum software from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXR3b3JrLnBpdm90YWwuaW8vcHJvZHVjdHMvZ3JlZW5wbHVtLWZvci1rdWJlcm5ldGVz\">VMware Tanzu Network</span> or skip to step 3 if have greenplum related files. The download file has the name: <code>greenplum-for-kubernetes-&lt;version&gt;.tar.gz.</code></p></li><li><p>Go to the directory where you downloaded Greenplum for Kubernetes, and unpack the downloaded software. For example:</p></li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/Downloads</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token function\">tar</span> xzf greenplum-for-kubernetes-*.tar.gz</pre></td></tr></table></figure><p>The above command unpacks the distribution into a new directory named <code>greenplum-for-kubernetes-&lt;version&gt;</code> .<br>3. Go into the new greenplum-for-kubernetes-&lt;version&gt; directory:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ./greenplum-for-kubernetes-*</pre></td></tr></table></figure><ol start=\"4\"><li>Load the Greenplum for Kubernetes Docker image to the local Docker registry:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker load -i ./images/greenplum-for-kubernetes</pre></td></tr></table></figure><ol start=\"5\"><li>Load the Greenplum Operator Docker image to the Docker registry:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker load -i ./images/greenplum-operator</pre></td></tr></table></figure><ol start=\"6\"><li>Push the Greenplum docker images to the local container registry. For example:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token assign-left variable\">IMAGE_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"hci-node01:5000\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ <span class=\"token assign-left variable\">GREENPLUM_IMAGE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;IMAGE_REPO&#125;</span>/greenplum-for-kubernetes:<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./images/greenplum-for-kubernetes-tag<span class=\"token variable\">)</span></span>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ docker tag <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./images/greenplum-for-kubernetes-id<span class=\"token variable\">)</span></span> <span class=\"token variable\">$&#123;GREENPLUM_IMAGE_NAME&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ docker push <span class=\"token variable\">$&#123;GREENPLUM_IMAGE_NAME&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ <span class=\"token assign-left variable\">OPERATOR_IMAGE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;IMAGE_REPO&#125;</span>/greenplum-operator:<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./images/greenplum-operator-tag<span class=\"token variable\">)</span></span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t$ docker tag <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./images/greenplum-operator-id<span class=\"token variable\">)</span></span> <span class=\"token variable\">$&#123;OPERATOR_IMAGE_NAME&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t$ docker push <span class=\"token variable\">$&#123;OPERATOR_IMAGE_NAME&#125;</span></pre></td></tr></table></figure><ol start=\"7\"><li>Create a new YAML file in the workspace subdirectory with two lines to indicate the registry where you pushed the images</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat &lt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EOF</span> <span class=\"token punctuation\">></span></span>workspace/operator-values-overrides.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\toperatorImageRepository: $&#123;IMAGE_REPO&#125;/greenplum-operator</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tgreenplumImageRepository: $&#123;IMAGE_REPO&#125;/greenplum-for-kubernetes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\toperatorWorkerSelector: &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tgreenplum-operator: \"default\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tEOF</pre></td></tr></table></figure><ol start=\"8\"><li>Use helm to create a new Greenplum Operator release.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 先给某台机器添加标签来部署greenplum-operator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl label node hci-node02  greenplum-operator<span class=\"token operator\">=</span>default</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t$ kubectl create namespace greenplum</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t$ helm <span class=\"token function\">install</span> -n greenplum-operator -f workspace/operator-values-overrides.yaml operator/ --namespace greenplum</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t$ helm <span class=\"token function\">install</span> greenplum-operator operator/</pre></td></tr></table></figure><h2 id=\"create-local-persistent-volumes-for-greenplum\"><a class=\"anchor\" href=\"#create-local-persistent-volumes-for-greenplum\">#</a> <strong>Create Local Persistent Volumes for Greenplum</strong></h2><ol><li><p>Create the directory, partition, or logical volume that you want to use as a Kubernetes local volume.</p></li><li><p>Create the StorageClass definition, specifying no-provisioner in order to manually provision local persistent volumes. Using volumeBindingMode: WaitForFirstConsumer is also recommended to delay binding the local PersistenVolume until a pod requires.</p></li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ vim gpdb-storage-class.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tkind: StorageClass</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tapiVersion: storage.k8s.io/v1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmetadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  name: gpdb-storage</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tprovisioner: kubernetes.io/no-provisioner</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvolumeBindingMode: WaitForFirstConsumer</pre></td></tr></table></figure><ol start=\"3\"><li>Create a PersistentVolume definition, specifying the local volume and the required NodeAffinity field. For example:</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ vim pv-master.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tapiVersion: v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tkind: PersistentVolume</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmetadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  name: greenplum-master-node02</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tspec:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  capacity:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    storage: 1Gi</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  accessModes:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  - ReadWriteOnce</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t  persistentVolumeReclaimPolicy: Retain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  storageClassName: gpdb-storage</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t  local:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t    path: /mnt/disks/greenplum-master-vol0\t// 需要提前在相应机器上创建此目录</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t  nodeAffinity:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t    required:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t      nodeSelectorTerms:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t      - matchExpressions:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        - key: kubernetes.io/hostname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t          operator: In</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t          values:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t          - hci-node02</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t---</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tapiVersion: v1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tkind: PersistentVolume</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tmetadata:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t  name: greenplum-master-node02</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t......重复上面的内容, 改变下local.path, nodeAffinity等在不同node机器上创建多个pv</pre></td></tr></table></figure><ol start=\"4\"><li><p>Repeat the previous step for each PersistentVolume required for your cluster. Remember that each Greenplum segment host requires a dedicated storage volume.</p></li><li><p>Use kubectl to apply the StorageClass and PersistentVolume configurations that you created.</p></li><li><p>Specify the local storage StorageClass name when you deploy a new Greenplum cluster as below.</p></li></ol><h2 id=\"deploy-a-greenplum-cluster\"><a class=\"anchor\" href=\"#deploy-a-greenplum-cluster\">#</a> <strong>Deploy a greenplum cluster</strong></h2><ol><li>Go to the workspace subdirectory where you unpacked the Pivotal Greenplum distribution for Kubernetes:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ./greenplum-for-kubernetes-*/workspace</pre></td></tr></table></figure><ol start=\"2\"><li>If necessary, create a Kubernetes manifest file to specify the configuration of your Greenplum cluster. A sample file is provided in workspace/my-gp-instance.yaml. my-gp-instance.yaml contains the minimal set of instructions necessary to create a demonstration cluster named “my-greenplum” with a single segment and default storage, memory, and CPU settings:</li></ol><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>apiVersion: \"greenplum.pivotal.io/v1\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tkind: \"GreenplumCluster\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmetadata:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  name: my-greenplum</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tspec:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  masterAndStandby:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    hostBasedAuthentication: |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t      # host   all   gpadmin   1.2.3.4/32   trust</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t      # host   all   gpuser    0.0.0.0/0   md5</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t    memory: \"800Mi\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    cpu: \"0.5\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t    storageClassName: gpdb-storage</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t    storage: 1G</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t    antiAffinity: \"yes\"</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    workerSelector: &#123;&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  segments:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t    primarySegmentCount: 2\t\t# Expand the segment to 2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    memory: \"800Mi\"</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t    cpu: \"0.5\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t    storageClassName: gpdb-storage\t\t# Use the specify storageclass</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t    storage: 10G\t\t\t\t# Expand the storage to 10G</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t    antiAffinity: \"yes\"</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t    workerSelector: &#123;&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t    mirrors: \"yes\"</pre></td></tr></table></figure><ol start=\"3\"><li>Use kubectl apply command and specify your manifest file to send the deployment request to the Greenplum Operator. For example, to use the sample my-gp-instance.yaml file:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl apply -f ./my-gp-instance.yaml </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  greenplumcluster.greenplum.pivotal.io/my-greenplum created</pre></td></tr></table></figure><h2 id=\"deploy-multiple-greenplum-cluster\"><a class=\"anchor\" href=\"#deploy-multiple-greenplum-cluster\">#</a> <strong>Deploy multiple greenplum cluster</strong></h2><ol><li>Create namespaces for greenplum cluster to deploy. Deploy two greenplum cluster instances:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl create namespace gpinstance-1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl create namespace gpinstance-2</pre></td></tr></table></figure><ol start=\"2\"><li>Deploy Greenplum cluster into the correspond namespace.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> workspace</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl apply -f ./my-gp-instance.yaml -n gpinstance-1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ kubectl apply -f ./my-gp-instance.yaml -n gpinstance-2</pre></td></tr></table></figure><h2 id=\"test-whether-the-greenplum-cluster-deployment-is-successful\"><a class=\"anchor\" href=\"#test-whether-the-greenplum-cluster-deployment-is-successful\">#</a> <strong>Test whether the Greenplum Cluster deployment is successful</strong></h2><p>查看 greenplum logs</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ k logs po/master-0 -n greenplum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t*******************************</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tAdding <span class=\"token function\">host</span> based authentication to master-0 pg_hba.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t*******************************</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t*******************************</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tRunning createdb</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t*******************************</pre></td></tr></table></figure><p>需要等待一段时间才能执行下方操作</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl <span class=\"token builtin class-name\">exec</span> -it master-0 -n greenplum -- <span class=\"token function\">bash</span> -c <span class=\"token string\">\"source /opt/gpdb/greenplum_path.sh; psql\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t psql <span class=\"token punctuation\">(</span><span class=\"token number\">8.3</span>.23<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t Type <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t <span class=\"token assign-left variable\">gpadmin</span><span class=\"token operator\">=</span><span class=\"token comment\"># select * from gp_segment_configuration;</span></pre></td></tr></table></figure><p>如果报一些错误无法执行可以:</p><ol><li>先进入 master-0: kubectl exec -it master-0 -n greenplum -- bash, 再查找 greenplum_path.sh</li><li>执行 <code>$ source /opt/gpdb/greenplum_path.sh</code> , 再 <code>$ exit</code> 退出，然后就可以用以上命令了</li></ol><p>(Enter <code>\\q</code> to exit the psql utility.)</p><p><strong>If you are redeploying a cluster that configured to use a standby master, wait until all pods reach the Running status. Then connect to the master-0 pod and execute the gpstart command manually. For example:</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl <span class=\"token builtin class-name\">exec</span> -it master-0 -n greenplum -- <span class=\"token function\">bash</span> -c <span class=\"token string\">\"source /opt/gpdb/greenplum_path.sh; gpstart\"</span></pre></td></tr></table></figure><h2 id=\"delete-a-greenplum-cluster-and-uninstall-pivotal-greenplum-for-kubernetes\"><a class=\"anchor\" href=\"#delete-a-greenplum-cluster-and-uninstall-pivotal-greenplum-for-kubernetes\">#</a> <strong>Delete a greenplum cluster and uninstall pivotal greenplum for kubernetes</strong></h2><h3 id=\"delete-a-greenplum-cluster\"><a class=\"anchor\" href=\"#delete-a-greenplum-cluster\">#</a> <strong>Delete a greenplum cluster</strong></h3><ol><li>Navigate to the workspace directory of the Pivotal Greenplum distribution (or to the location of the Kubernetes manifest that you used to deploy the cluster). For example:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ./greenplum-for-kubernetes-*/workspace</pre></td></tr></table></figure><ol start=\"2\"><li>Execute the kubectl delete command, specifying the manifest that you used to deploy the cluster. For example:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete -f ./my-gp-instance.yaml --wait<span class=\"token operator\">=</span>false</pre></td></tr></table></figure><p><strong>Note:</strong> Use the optional --wait=false flag to return immediately without waiting for the deletion to complete.<br>3. Use kubectl to describe the Greenplum cluster to verify Status.Phase and Events:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl describe greenplumcluster my-greenplum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t <span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t Status:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t   Instance Image:    greenplum-for-kubernetes:latest</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t   Operator Version:  greenplum-operator:latest</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t   Phase:             Deleting</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t Events:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t   Type    Reason                    Age   From               Message</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t   ----    ------                    ----  ----               -------</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t   Normal  CreatingGreenplumCluster  3m    greenplumOperator  Creating Greenplum cluster my-greenplum <span class=\"token keyword\">in</span> default</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t   Normal  CreatedGreenplumCluster   1m    greenplumOperator  Successfully created Greenplum cluster my-greenplum <span class=\"token keyword\">in</span> default</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t   Normal  DeletingGreenplumCluster  6s    greenplumOperator  Deleting Greenplum cluster my-greenplum <span class=\"token keyword\">in</span> default</pre></td></tr></table></figure><p>If for any reason stopping the Greenplum instance fails, you should see a warning message in the greenplum-operator logs as shown below:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl logs -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>greenplum-operator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"INFO\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2020-01-24T19:03:22.874Z\"</span>,<span class=\"token string\">\"logger\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"controllers.GreenplumCluster\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"DeletingGreenplumCluster\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"my-greenplum\"</span>,<span class=\"token string\">\"namespace\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"INFO\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2020-01-24T19:03:23.068Z\"</span>,<span class=\"token string\">\"logger\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"controllers.GreenplumCluster\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"initiating shutdown of the greenplum cluster\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"INFO\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2020-01-24T19:03:31.971Z\"</span>,<span class=\"token string\">\"logger\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"controllers.GreenplumCluster\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"gpstop did not stop cleanly. Please check gpAdminLogs for more info.\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"INFO\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2020-01-24T19:03:32.252Z\"</span>,<span class=\"token string\">\"logger\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"controllers.GreenplumCluster\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"DeletedGreenplumCluster\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"my-greenplum\"</span>,<span class=\"token string\">\"namespace\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\"><li>Use kubectl to monitor the progress of terminating Greenplum resources in your cluster. For example, if your cluster deployment was named my-greenplum:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl get all -l greenplum-cluster<span class=\"token operator\">=</span>my-greenplum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ kubectl label nodes hci-node01 greenplum-affinity-greenplum-master-\t// 去掉node上关于greenplum的label</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t$ kubectl label nodes hci-node01 greenplum-affinity-greenplum-segment-</pre></td></tr></table></figure><h3 id=\"delete-greenplum-persistent-volume-claims\"><a class=\"anchor\" href=\"#delete-greenplum-persistent-volume-claims\">#</a> <strong>Delete greenplum persistent volume claims</strong></h3><p><strong>Caution:</strong> If the Persistent Volumes were created using dynamic provisioning, then deleting the PVCs will also delete the associated PVs. In this case, do not delete the PVCs unless you are certain that you no longer need the data.</p><ol><li>Verify that the PVCs are present for your cluster. For example, to show the Persistent Volume Claims created for a cluster named my-greenplum:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl get pvc -l greenplum-cluster<span class=\"token operator\">=</span>my-greenplum</pre></td></tr></table></figure><ol start=\"2\"><li>Use kubectl to delete the PVCs associated with the cluster. For example, to delete all PersistentVolume Claims created for a cluster named my-greenplum:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete pvc -l greenplum-cluster<span class=\"token operator\">=</span>my-greenplum</pre></td></tr></table></figure><ol start=\"3\"><li>If the Persistent Volumes were provisioned manually, then deleting the PVCs does not delete the associated PVs. (You can check for the PVs using kubectl get pv.) To delete any remaining Persistent Volumes, execute the command:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete <span class=\"token function\">pv</span> -l greenplum-cluster<span class=\"token operator\">=</span>my-greenplum</pre></td></tr></table></figure><h3 id=\"uninstall-pivotal-greenplum-for-kubernetes\"><a class=\"anchor\" href=\"#uninstall-pivotal-greenplum-for-kubernetes\">#</a> <strong>Uninstall pivotal greenplum for kubernetes</strong></h3><ol><li>Use the helm delete command to delete the greenplum-operator release:</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ helm delete greenplum-operator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t$ helm del --purge greenplum-operator<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>Delete the node label of greenplum operator when deployed on kubernetes</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl label nodes hci-node02 greenplum-operator-</pre></td></tr></table></figure><ol start=\"3\"><li>Use docker rmi to delete images</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker rmi <span class=\"token operator\">&lt;</span>ImageName or ImgaeID<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"faq\"><a class=\"anchor\" href=\"#faq\">#</a> <strong>FAQ</strong></h2><p>When uninstall greenplum, encountered this problem: Object is being deleted: <span class=\"exturl\" data-url=\"aHR0cDovL2N1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMuYXBpZXh0ZW5zaW9ucy5rOHMuaW8=\">customresourcedefinitions.apiextensions.k8s.io</span> &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2dyZWVucGx1bWNsdXN0ZXJzLmdyZWVucGx1bS5waXZvdGFsLmlv\">greenplumclusters.greenplum.pivotal.io</span>&quot; already exists.</p><p>solution refer to this:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9pc3N1ZXMvNjA1Mzg=\">delete crd</span></p><h2 id=\"删除greenplum集群脚本\"><a class=\"anchor\" href=\"#删除greenplum集群脚本\">#</a> <strong>删除 greenplum 集群脚本</strong></h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> clean_greenplum.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token assign-left variable\">workspace</span><span class=\"token operator\">=</span>workspace</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token assign-left variable\">node01</span><span class=\"token operator\">=</span>hci-node01</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token assign-left variable\">node02</span><span class=\"token operator\">=</span>hci-node02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token assign-left variable\">node03</span><span class=\"token operator\">=</span>hci-node03</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token assign-left variable\">node04</span><span class=\"token operator\">=</span>hci-node04</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token assign-left variable\">greenplum_operator</span><span class=\"token operator\">=</span>hci-node02</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token builtin class-name\">cd</span> greenplum-for-kubernetes-v1.13.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\"># delete greenplum cluster</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tkubectl delete -f <span class=\"token variable\">$&#123;workspace&#125;</span>/my-gp-instance.yaml</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\"># delete pvc</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token assign-left variable\">pvc_results</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl get pvc -n greenplum <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> greenplum <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$1</span>&#125;'</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token assign-left variable\">pvc_arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;pvc_results&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>$&#123;#pvc_arr[<span class=\"token operator\">*</span>]&#125;<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tkubectl delete pvc <span class=\"token variable\">$&#123;pvc_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>&#125;</span> -n greenplum</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\"># delete pv</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tkubectl delete -f <span class=\"token variable\">$&#123;workspace&#125;</span>/pv-master.yaml</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tkubectl delete -f <span class=\"token variable\">$&#123;workspace&#125;</span>/pv-segment.yaml</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\"># delete sc</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tkubectl delete -f <span class=\"token variable\">$&#123;workspace&#125;</span>/workspacegpdb-storage-class.yaml</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\"># delete greenplum operator</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\thelm delete greenplum-operator</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\thelm del --purge greenplum-operator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\"># delete label on nodes</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node01&#125;</span> greenplum-affinity-greenplum-master-</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node01&#125;</span> greenplum-affinity-greenplum-segment-</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node02&#125;</span> greenplum-affinity-greenplum-master-</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node02&#125;</span> greenplum-affinity-greenplum-segment-</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node03&#125;</span> greenplum-affinity-greenplum-master-</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node03&#125;</span> greenplum-affinity-greenplum-segment-</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node04&#125;</span> greenplum-affinity-greenplum-master-</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;node04&#125;</span> greenplum-affinity-greenplum-segment-</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tkubectl label nodes <span class=\"token variable\">$&#123;greenplum_operator&#125;</span> greenplum-operator-</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "storage",
                "greenplum",
                "storage"
            ]
        }
    ]
}