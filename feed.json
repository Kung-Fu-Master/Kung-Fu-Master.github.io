{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://kung-fu-master.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://kung-fu-master.github.io",
    "items": [
        {
            "id": "https://kung-fu-master.github.io/2021/07/09/linux/csv%E8%BD%ACmarkdown/",
            "url": "https://kung-fu-master.github.io/2021/07/09/linux/csv%E8%BD%ACmarkdown/",
            "title": "csv转markdown语法",
            "date_published": "2021-07-09T09:33:21.059Z",
            "content_html": "<!-- build time:Fri Jul 09 2021 17:35:22 GMT+0800 (中国标准时间) --><h2 id=\"csv转markdown脚本\"><a class=\"anchor\" href=\"#csv转markdown脚本\">#</a> csv 转 markdown 脚本</h2><p><strong>cat all-results.csv</strong></p><pre><code>StartTime,ActualDuration,Labels,NumThreads,ActualQPS,p50,p90,p99,p999\n2021-07-08T03:00:32.123633281Z,180,e379485c_qps_1000_c_2_1024_none_baseline,2,1000,633,927,994,1630\n2021-07-08T03:03:32.552909916Z,180,e379485c_qps_1000_c_2_1024_none_both,2,1000,1535,1980,2894,3493\n2021-07-08T03:06:33.127271331Z,180,e379485c_qps_1000_c_4_1024_none_baseline,4,1000,629,929,996,1893\n2021-07-08T03:09:33.547611543Z,180,e379485c_qps_1000_c_4_1024_none_both,4,1000,1888,2793,2995,4715\n2021-07-08T03:12:33.953340272Z,180,e379485c_qps_1000_c_8_1024_none_baseline,8,1000,665,942,1416,1998\n2021-07-08T03:15:34.39170438Z,180,e379485c_qps_1000_c_8_1024_none_both,8,1000,3081,3827,3995,6173\n2021-07-08T03:18:35.020425077Z,180,e379485c_qps_1000_c_16_1024_none_baseline,16,1000,1321,1870,1994,2871\n2021-07-08T03:21:35.488938053Z,180,e379485c_qps_1000_c_16_1024_none_both,16,1000,5214,6386,6991,8800\n2021-07-08T03:24:35.893324186Z,180,e379485c_qps_1000_c_32_1024_none_baseline,32,1000,1581,2448,3643,4181\n2021-07-08T03:27:36.366429299Z,180,e379485c_qps_1000_c_32_1024_none_both,32,1000,9014,10532,11971,14664\n2021-07-08T03:30:37.054477154Z,179,e379485c_qps_1000_c_64_1024_none_baseline,64,1000,2561,3895,5633,8073\n2021-07-08T03:33:37.591317915Z,179,e379485c_qps_1000_c_64_1024_none_both,64,1000,16425,18346,21529,24656\n2021-07-08T10:22:59.650647926Z,180,47e02b90_qps_1000_c_2_1024_none_baseline,2,1000,619,925,994,1685\n2021-07-08T10:26:00.023923405Z,180,47e02b90_qps_1000_c_2_1024_none_both,2,1000,1544,2085,2922,3569\n2021-07-08T10:29:00.5336073Z,180,47e02b90_qps_1000_c_4_1024_none_baseline,4,1000,641,931,997,1899\n2021-07-08T10:32:00.926507967Z,180,47e02b90_qps_1000_c_4_1024_none_both,4,1000,1884,2798,3103,4726\n2021-07-08T10:35:01.281884063Z,180,47e02b90_qps_1000_c_8_1024_none_baseline,8,1000,662,938,1121,2227\n2021-07-08T10:38:01.659107592Z,180,47e02b90_qps_1000_c_8_1024_none_both,8,1000,4748,5754,6137,8558\n2021-07-08T10:41:02.175849835Z,180,47e02b90_qps_1000_c_16_1024_none_baseline,16,1000,1283,1863,1993,2892\n2021-07-08T10:44:02.568365775Z,180,47e02b90_qps_1000_c_16_1024_none_both,16,1000,5083,6026,7857,10078\n2021-07-08T10:47:03.014074722Z,180,47e02b90_qps_1000_c_32_1024_none_baseline,32,1000,1594,2529,3537,4557\n2021-07-08T10:50:03.455990894Z,180,47e02b90_qps_1000_c_32_1024_none_both,32,1000,12420,14040,15979,19009\n2021-07-08T10:53:04.043806415Z,179,47e02b90_qps_1000_c_64_1024_none_baseline,64,1000,2771,3960,5281,7133\n2021-07-08T10:56:04.516012475Z,179,47e02b90_qps_1000_c_64_1024_none_both,64,1000,18706,23763,26954,29338\n</code></pre><p><strong>cat <span class=\"exturl\" data-url=\"aHR0cDovL2Nzdi5weQ==\">csv.py</span></strong></p><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">to_table</span><span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span><span class=\"token string\">'all-results.csv'</span><span class=\"token punctuation\">,</span> rept<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''将符号分割文本转化为markdown表格形式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parameter:需要转化的文件名(str),文本的分割符号(str)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    '''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    file_obj_r <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    file_obj_w <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token operator\">+</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 哨兵，实现文件的第二行另做处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> file_obj_r<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        rec <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>rept<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        new_rec <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rec<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        new_rec <span class=\"token operator\">=</span> <span class=\"token string\">'|'</span><span class=\"token operator\">+</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_rec<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span><span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        file_obj_w<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>new_rec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            head_rec <span class=\"token operator\">=</span> <span class=\"token string\">'|'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rec<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                head_rec <span class=\"token operator\">+=</span> <span class=\"token string\">'---|'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            head_rec <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            file_obj_w<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>head_rec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    file_obj_r<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    file_obj_w<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        to_table<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        to_table<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python csv.py all-results.csv</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/07/09/microService/kubernetes/calico/",
            "url": "https://kung-fu-master.github.io/2021/07/09/microService/kubernetes/calico/",
            "title": "CNI pulgin - Calico",
            "date_published": "2021-07-09T09:11:46.252Z",
            "content_html": "<!-- build time:Fri Jul 09 2021 17:35:22 GMT+0800 (中国标准时间) --><p>一般生产环境是不会更换已部署的 CNI 网络插件，因为一旦把 cni 卸载后，所有 pod 都会因为没有对应 cni 支持，导致 pod 无法正常运行和通信异常；</p><p>生产环境如果涉及需要更换 cni ，一般不会涉及，即便涉及到更换 cni 的，也会采用新部署一套集群，然后进行迁移；</p><h2 id=\"download\"><a class=\"anchor\" href=\"#download\">#</a> Download</h2><p>$ export http_proxy=http://&lt;Your-Proxy-Server&gt;:913</p><div class=\"tab\" data-id=\"id001\" data-title=\"第一种download\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">wget</span> https://docs.projectcalico.org/manifests/calico.yaml</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id001\" data-title=\"第二种download\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">wget</span> https://github.com/projectcalico/calico/releases/download/v3.19.1/release-v3.19.1.tgz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">tar</span> -zxvf release-v3.19.1.tgz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// Compare the calico.yaml obtained above to see <span class=\"token keyword\">if</span> there is a difference.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">diff</span> release-v3.19.1/k8s-manifests/calico.yaml calico.yaml</pre></td></tr></table></figure></div><h2 id=\"查看机器网卡名\"><a class=\"anchor\" href=\"#查看机器网卡名\">#</a> 查看机器网卡名</h2><p>Modify the calico.yaml</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">ip</span> addr <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         valid_lft forever preferred_lft forever</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      inet6 ::1/128 scope <span class=\"token function\">host</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         valid_lft forever preferred_lft forever</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">2</span>: enp94s0f0: <span class=\"token operator\">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc mq state DOWN group default qlen <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      link/ether b4:05:5d:1d:51:f3 brd ff:ff:ff:ff:ff:ff</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">3</span>: enp94s0f1: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc mq state UP group default qlen <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      link/ether b4:05:5d:1d:51:f4 brd ff:ff:ff:ff:ff:ff</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      inet <span class=\"token number\">10.67</span>.117.192/23 brd <span class=\"token number\">10.67</span>.117.255 scope global noprefixroute dynamic enp94s0f1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         valid_lft 37601sec preferred_lft 37601sec</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      inet6 fe80::67a4:9f79:7f6d:6204/64 scope <span class=\"token function\">link</span> noprefixroute</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         valid_lft forever preferred_lft forever</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token number\">6</span>: br-59a58ed8f6ba: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default</pre></td></tr></table></figure><h2 id=\"清理原有cni插件\"><a class=\"anchor\" href=\"#清理原有cni插件\">#</a> 清理原有 CNI 插件</h2><div class=\"note info\"><p>每台 deploy 了 CNI 插件的 Node 都需要清理.</p></div><p>If have deployed CNI pulg-in in principle, need to clean up the original CNI plug-in first.</p><p>如果是切换网络插件，需要清理每个节点上之前残留的路由表和网桥，以避免和 calico 冲突.</p><p><strong><code>卸载其他网路插件之后，最好重启所有节点，这样系统会重置网卡规则，旧规则自动就会被清理了.</code></strong></p><div class=\"tab\" data-id=\"id002\" data-title=\"清除flannel\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 查看系统flannel网卡名如: cni0, 然后执行如下操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl delete -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ifconfig</span> cni0 down</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token function\">link</span> delete cni0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ifconfig</span> flannel.1 down</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token function\">link</span> delete flannel.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/cni/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>// 有的是执行类似如下操作, flannel网卡名如: flannel.1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token function\">link</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token function\">link</span> delete flannel.1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">ip</span> route</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">ip</span> route delete <span class=\"token number\">10.244</span>.0.0/24 via <span class=\"token number\">10.4</span>.7.21 dev flannel.1</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id002\" data-title=\"清除weave\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// weave CNI插件清理</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl delete -f <span class=\"token string\">\"https://cloud.weave.works/k8s/net?k8s-version=<span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl version <span class=\"token operator\">|</span> base64 <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token variable\">)</span></span>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 登陆每台node清理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> -rf /opt/cni/bin/weave-*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/cni/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">ifconfig</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> weave</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   weave: <span class=\"token assign-left variable\">flags</span><span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class=\"token operator\">></span>  mtu <span class=\"token number\">1376</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token function\">ifconfig</span> weave down</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> delete weave</pre></td></tr></table></figure></div><h2 id=\"部署calico\"><a class=\"anchor\" href=\"#部署calico\">#</a> 部署 Calico</h2><div class=\"tab\" data-id=\"id003\" data-title=\"第一种部署calico\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ Kubectl apply -f  calico.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// deploy calico后执行如下操作：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ kubectl <span class=\"token builtin class-name\">set</span> <span class=\"token function\">env</span> daemonset/calico-node -n kube-system <span class=\"token assign-left variable\">IP_AUTODETECTION_METHOD</span><span class=\"token operator\">=</span>interface<span class=\"token operator\">=</span>enp94s0f.**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 如果Cluster集群中不同机器有不同网卡名，如<span class=\"token variable\"><span class=\"token variable\">`</span>en01<span class=\"token variable\">`</span></span>等，可以改成类似面</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>kubectl <span class=\"token builtin class-name\">set</span> <span class=\"token function\">env</span> daemonset/calico-node -n kube-system <span class=\"token assign-left variable\">IP_AUTODETECTION_METHOD</span><span class=\"token operator\">=</span>interface<span class=\"token operator\">=</span>enp94s0f.*,eno.**</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id003\" data-title=\"(recommend)第二种部署calico\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//修改calico.yaml文件，添加如下内容, 然后deploy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">vim</span> calico.yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">3650</span>             <span class=\"token comment\"># Cluster type to identify the deployment type</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">3651</span>             - name: CLUSTER_TYPE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">3652</span>               value: <span class=\"token string\">\"k8s,bgp\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">3653</span>             <span class=\"token comment\"># Auto-detect the BGP IP address.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">3654</span>             - name: IP</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">3655</span>               value: <span class=\"token string\">\"autodetect\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">3656</span>             - name: IP_AUTODETECTION_METHOD</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">3657</span>               value: <span class=\"token string\">\"interface=enp94s0f.*\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">3658</span>             <span class=\"token comment\"># Enable IPIP</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">3659</span>             - name: CALICO_IPV4POOL_IPIP</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token number\">3660</span>               value: <span class=\"token string\">\"Always\"</span> <span class=\"token comment\"># 有的部署还会把这个换成 Never</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token number\">3661</span>             <span class=\"token comment\"># Enable or Disable VXLAN on the default IP pool.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">3662</span>             - name: CALICO_IPV4POOL_VXLAN</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token number\">3663</span>               value: <span class=\"token string\">\"Never\"</span></pre></td></tr></table></figure><ul><li><code>IP_AUTODETECTION_METHOD:</code> 修改成能匹配到自己集群机器的网卡 wildcard 名字符串.</li></ul><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl create -f  calico.yaml</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id003\" data-title=\"第三种部署calico\"><p>修改 calico.yaml 文件，然后 deploy</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Set auto-detect method to be publicly routable, whatever that interface may be</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    - name: IP_AUTODETECTION_METHOD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      value: <span class=\"token string\">\"can-reach=8.8.8.8\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>This at least forced Calico to use a public-routing interface. If you wanted a private interface, stick the IP of one of a node on your internal network <span class=\"token keyword\">in</span> there. Assuming your routing tables aren<span class=\"token string\">'t completely busted (and you have other problems), it'</span>ll <span class=\"token keyword\">do</span> the right thing <span class=\"token function\">more</span> reliably.</pre></td></tr></table></figure><div class=\"note info\"><p><strong>NOTE:</strong> 对于多网卡的 node，注意修改 calico.yaml，在</p><ul><li>name: IP<br>value: &quot;autodetect&quot;<br>后面加入</li><li>name: IP_AUTODETECTION_METHOD<br>value: &quot;can-reach=114.114.114.114&quot;<br>找到默认网卡。</li></ul></div><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl apply -f  calico.yaml</pre></td></tr></table></figure></div><h2 id=\"查看部署结果\"><a class=\"anchor\" href=\"#查看部署结果\">#</a> 查看部署结果</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./release-v3.19.1/bin/calicoctl node status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Calico process is running.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IPv4 BGP status</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  +----------------+-------------------+-------+----------+-------------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">|</span>  PEER ADDRESS  <span class=\"token operator\">|</span>     PEER TYPE     <span class=\"token operator\">|</span> STATE <span class=\"token operator\">|</span>  SINCE   <span class=\"token operator\">|</span>    INFO     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  +----------------+-------------------+-------+----------+-------------+</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token number\">10.239</span>.131.157 <span class=\"token operator\">|</span> node-to-node mesh <span class=\"token operator\">|</span> up    <span class=\"token operator\">|</span> 02:53:39 <span class=\"token operator\">|</span> Established <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  +----------------+-------------------+-------+----------+-------------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  IPv6 BGP status</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  No IPv6 peers found.</pre></td></tr></table></figure><p>最后 <code>INFO</code> 必须显示为 <code>Established</code> ，如果是其它都是有问题需要解决.</p><h2 id=\"重启kubelet\"><a class=\"anchor\" href=\"#重启kubelet\">#</a> 重启 kubelet</h2><p>登陆每台 Node 重启 kubelet</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ systemctl restart kubelet</pre></td></tr></table></figure><h2 id=\"重启coredns\"><a class=\"anchor\" href=\"#重启coredns\">#</a> 重启 Coredns</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 查看kube-system下的coredns POD发现是Ready为0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ kubectl get po -n kube-system <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> coredns</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NAME                                        READY   STATUS             RESTARTS   AGE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>coredns-f9fd979d6-c59ft                     <span class=\"token number\">0</span>/1     Running            <span class=\"token number\">0</span>          8d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>coredns-f9fd979d6-hz4gj                     <span class=\"token number\">0</span>/1     Running            <span class=\"token number\">0</span>          15d</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// 重启coredns POD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ kubectl get po/coredns-f9fd979d6-c59ft -n kube-system -o yaml <span class=\"token operator\">|</span> kubectl replace --force -f -</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ kubectl get po/coredns-f9fd979d6-hz4gj -n kube-system -o yaml <span class=\"token operator\">|</span> kubectl replace --force -f -</pre></td></tr></table></figure><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2><h3 id=\"部署服务失败\"><a class=\"anchor\" href=\"#部署服务失败\">#</a> 部署服务失败</h3><p>部署服务到某个 namespace A, 发现此 namespace 没有 pod.</p><p><strong>解决方法:</strong></p><p>重启 Node，然后重启 kubelet，再重启 kube-system 下的 coredns</p><h3 id=\"服务间访问很慢\"><a class=\"anchor\" href=\"#服务间访问很慢\">#</a> 服务间访问很慢</h3><p>服务间访问比较慢或者报解析不了服务名地址解决方法:</p><p>重启 kube-system 下的所有 coredns pod.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$  kubectl get po/coredns-f9fd979d6-2brdh -o yaml -n kube-system <span class=\"token operator\">|</span> kubectl replace --force -f -</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$  kubectl get po/coredns-f9fd979d6-b7d4z -o yaml -n kube-system <span class=\"token operator\">|</span> kubectl replace --force -f -</pre></td></tr></table></figure><p>原理是重启 coredns 服务重新规划服务路由规则，使其能够解析 K8S 服务</p><h3 id=\"部署calico卡在passive状态\"><a class=\"anchor\" href=\"#部署calico卡在passive状态\">#</a> 部署 Calico 卡在 Passive 状态</h3><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnByb2plY3RjYWxpY28ub3JnL21haW50ZW5hbmNlL3Ryb3VibGVzaG9vdC90cm91Ymxlc2hvb3RpbmcjY29uZmlndXJlLW5ldHdvcmttYW5hZ2Vy\">https://docs.projectcalico.org/maintenance/troubleshoot/troubleshooting#configure-networkmanager</span></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl describe po/calico-node-89z49 -n kube-system</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Number of node<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> with BGP peering established <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ ./release-v3.19.1/bin/calicoctl node status</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Calico process is running.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  IPv4 BGP status</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  +--------------+-------------------+-------+----------+---------+</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">|</span> PEER ADDRESS <span class=\"token operator\">|</span>     PEER TYPE     <span class=\"token operator\">|</span> STATE <span class=\"token operator\">|</span>  SINCE   <span class=\"token operator\">|</span>  INFO   <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  +--------------+-------------------+-------+----------+---------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token number\">172.21</span>.0.1   <span class=\"token operator\">|</span> node-to-node mesh <span class=\"token operator\">|</span> start <span class=\"token operator\">|</span> 03:00:42 <span class=\"token operator\">|</span> Passive <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  +--------------+-------------------+-------+----------+---------+</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  IPv6 BGP status</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  No IPv6 peers found.</pre></td></tr></table></figure><p>解决方法是清除原来残留的 CNI 插件然后再 redeploy.</p><!-- rebuild by hrmmi -->",
            "tags": [
                "microService",
                "kubernetes",
                "kubernetes"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/07/09/microService/istio/istio-benchmark/",
            "url": "https://kung-fu-master.github.io/2021/07/09/microService/istio/istio-benchmark/",
            "title": "istio benchmark performance test",
            "date_published": "2021-07-09T09:09:03.140Z",
            "content_html": "<!-- build time:Fri Jul 09 2021 17:35:22 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lzdGlvL3Rvb2xzL3RyZWUvbWFzdGVyL3BlcmYvYmVuY2htYXJr\">https://github.com/istio/tools/tree/master/perf/benchmark</span></p><h2 id=\"prerequisites\"><a class=\"anchor\" href=\"#prerequisites\">#</a> Prerequisites</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ helm version</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  version.BuildInfo<span class=\"token punctuation\">&#123;</span>Version:<span class=\"token string\">\"v3.3.1\"</span>, GitCommit:<span class=\"token string\">\"249e5215cde0c3fa72e27eb7a30e8d55c9696144\"</span>, GitTreeState:<span class=\"token string\">\"clean\"</span>, GoVersion:<span class=\"token string\">\"go1.14.7\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"下载\"><a class=\"anchor\" href=\"#下载\">#</a> 下载</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> clone https://github.com/istio/tools.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> tools/perf/benchmark</pre></td></tr></table></figure><h2 id=\"部署\"><a class=\"anchor\" href=\"#部署\">#</a> 部署</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> http_proxy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">unset</span> https_proxy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NAMESPACE</span><span class=\"token operator\">=</span>twopods-istio</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">INTERCEPTION_MODE</span><span class=\"token operator\">=</span>REDIRECT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ISTIO_INJECT</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LOAD_GEN_TYPE</span><span class=\"token operator\">=</span>fortio</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span>export <span class=\"token assign-left variable\">LOAD_GEN_TYPE</span><span class=\"token operator\">=</span>nighthawk</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DNS_DOMAIN</span><span class=\"token operator\">=</span>v104.qualistio.org</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>./setup_test.sh</pre></td></tr></table></figure><h2 id=\"创建pipenv环境\"><a class=\"anchor\" href=\"#创建pipenv环境\">#</a> 创建 pipenv 环境</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> perf/benchmark</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ pipenv --three</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ pipenv shell</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ pipenv <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 如果遇到执行下面runner/runner.py脚本操作报找不到import包问题，需要再运行如下命令</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ python3 -m pip <span class=\"token function\">install</span> pandas matplotlib pyyaml requests</pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Obtained the performance <span class=\"token builtin class-name\">test</span> at the 90th percentiles <span class=\"token keyword\">for</span> an increasing number of concurrent connections<span class=\"token punctuation\">(</span><span class=\"token number\">2,4</span>,8,16,32,64<span class=\"token punctuation\">)</span> and with a <span class=\"token number\">1</span> kB payload at <span class=\"token number\">1000</span> requests per second<span class=\"token punctuation\">(</span>RPS<span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ python runner/runner.py --conn <span class=\"token number\">2,4</span>,8,16,32,64 --qps <span class=\"token number\">1000</span> --duration <span class=\"token number\">180</span> --baseline --load_gen_type<span class=\"token operator\">=</span>fortio --telemetry_mode<span class=\"token operator\">=</span>none</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span>$ python runner/runner.py --conn <span class=\"token number\">2,4</span>,8,16,32,64 --qps <span class=\"token number\">1000</span> --duration <span class=\"token number\">180</span> --baseline --load_gen_type<span class=\"token operator\">=</span>nighthawk --telemetry_mode<span class=\"token operator\">=</span>none</pre></td></tr></table></figure><h2 id=\"生成-csv-文件\"><a class=\"anchor\" href=\"#生成-csv-文件\">#</a> 生成 csv 文件</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl get svc -n twopods-istio</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  NAME           TYPE           CLUSTER-IP      EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>                                                                                                    AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  fortioclient   LoadBalancer   <span class=\"token number\">10.100</span>.26.23    <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span>     <span class=\"token number\">8080</span>:30476/TCP,8079:31699/TCP,8078:31654/TCP,8077:30330/TCP,8076:32679/TCP,9999:30027/TCP,9076:32267/TCP   42m</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  fortioserver   ClusterIP      <span class=\"token number\">10.102</span>.28.144   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">8080</span>/TCP,8079/TCP,8078/TCP,8077/TCP,8076/TCP,9999/TCP,9076/TCP</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">FORTIO_CLIENT_URL</span><span class=\"token operator\">=</span>http://localhost:32267</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ python ./runner/fortio.py <span class=\"token variable\">$FORTIO_CLIENT_URL</span> --csv StartTime,ActualDuration,Labels,NumThreads,ActualQPS,p50,p90,p99,p999</pre></td></tr></table></figure><h2 id=\"修改graph_plotterpy脚本\"><a class=\"anchor\" href=\"#修改graph_plotterpy脚本\">#</a> 修改 graph_plotter.py 脚本</h2><h3 id=\"第一处修改\"><a class=\"anchor\" href=\"#第一处修改\">#</a> 第一处修改:</h3><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ vim graph_plotter<span class=\"token operator\">/</span>graph_plotter<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">44</span>     plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span>get_x_label<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">45</span>     plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span>get_y_label<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">46</span>     plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">47</span>     plt<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">48</span>     plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Istio P90, 1000RPS, 180 seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 添加标题</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">49</span>     plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>graph_title<span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span>dpi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">50</span>     plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"第二处修改\"><a class=\"anchor\" href=\"#第二处修改\">#</a> 第二处修改:</h3><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> get_data_helper<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> query_list<span class=\"token punctuation\">,</span> query_str<span class=\"token punctuation\">,</span> telemetry_mode<span class=\"token punctuation\">,</span> metric_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    y_series_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> ql <span class=\"token keyword\">in</span> query_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\"># 添加如下一行代码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        query_str <span class=\"token operator\">=</span> <span class=\"token string\">\"ActualQPS==1000 and NumThreads==&#123;ql&#125; and Labels.str.endswith('&#123;telemetry_mode&#125;')\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ql<span class=\"token operator\">=</span>ql<span class=\"token punctuation\">,</span> telemetry_mode<span class=\"token operator\">=</span>telemetry_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>query_str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># print(data)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>empty</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">except</span> KeyError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            y_series_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> metric_name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> metric_name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'mem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    y_series_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    y_series_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                y_series_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> y_series_data</pre></td></tr></table></figure><h2 id=\"画图\"><a class=\"anchor\" href=\"#画图\">#</a> 画图</h2><p><img data-src=\"baseline(CNI)_perf_with_istio_benchmark.png\" alt=\"\"><br><img data-src=\"both(CNI)_perf_with_istio_benchmark.png\" alt=\"\"></p><p>Obtained the performance test at the 90th percentiles for an increasing number of concurrent connections(2,4,8,16,32,64) and with a 1 kB payload at 1000 requests per second.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ python3 ./graph_plotter/graph_plotter.py --graph_type<span class=\"token operator\">=</span>latency-p90 --x_axis<span class=\"token operator\">=</span>conn --telemetry_modes<span class=\"token operator\">=</span>none_baseline,none_both --query_list<span class=\"token operator\">=</span><span class=\"token number\">2,4</span>,8,16,32,64 --query_str<span class=\"token operator\">=</span>ActualQPS<span class=\"token operator\">==</span><span class=\"token number\">1000</span> --csv_filepath<span class=\"token operator\">=</span>/tmp/tmptqdbk703.csv --graph_title<span class=\"token operator\">=</span>./weave_plotter_output.png </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ python3 ./graph_plotter/graph_plotter.py --graph_type<span class=\"token operator\">=</span>latency-p90 --x_axis<span class=\"token operator\">=</span>conn --telemetry_modes<span class=\"token operator\">=</span>none_baseline,none_both --query_list<span class=\"token operator\">=</span><span class=\"token number\">2,4</span>,8,16,32,64 --query_str<span class=\"token operator\">=</span>ActualQPS<span class=\"token operator\">==</span><span class=\"token number\">1000</span> --csv_filepath<span class=\"token operator\">=</span>/tmp/tmp7giam_5i.csv --graph_title<span class=\"token operator\">=</span>./calico_plotter_output.png</pre></td></tr></table></figure><h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl delete -f tmp/twopods-istio.yaml -n twopods-istio</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ kubectl delete ns twopods-istio</pre></td></tr></table></figure><h2 id=\"optionalprometheus\"><a class=\"anchor\" href=\"#optionalprometheus\">#</a> (Optional)Prometheus</h2><p>在 istio istio-1.8.1/samples/addons 目录新建了如下 yaml 文件把 prometheus 的端口映射到 host 主机.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> prometheus-NodePort.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  apiVersion: v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  kind: Service</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  metadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    labels:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      component: <span class=\"token string\">\"server\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      app: prometheus</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      release: prometheus</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      chart: prometheus-11.16.2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      heritage: Helm</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name: prometheus-nodeport</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    namespace: istio-system</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  spec:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      - name: http</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        port: <span class=\"token number\">9090</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        protocol: TCP</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        targetPort: <span class=\"token number\">9090</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    selector:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      component: <span class=\"token string\">\"server\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      app: prometheus</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      release: prometheus</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sessionAffinity: None</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    type: <span class=\"token string\">\"NodePort\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>$ kubectl apply -f prometheus-NodePort.yaml</pre></td></tr></table></figure><h2 id=\"csv转markdown脚本\"><a class=\"anchor\" href=\"#csv转markdown脚本\">#</a> csv 转 markdown 脚本</h2><p><strong>cat all-results.csv</strong></p><pre><code>StartTime,ActualDuration,Labels,NumThreads,ActualQPS,p50,p90,p99,p999\n2021-07-08T03:00:32.123633281Z,180,e379485c_qps_1000_c_2_1024_none_baseline,2,1000,633,927,994,1630\n2021-07-08T03:03:32.552909916Z,180,e379485c_qps_1000_c_2_1024_none_both,2,1000,1535,1980,2894,3493\n2021-07-08T03:06:33.127271331Z,180,e379485c_qps_1000_c_4_1024_none_baseline,4,1000,629,929,996,1893\n2021-07-08T03:09:33.547611543Z,180,e379485c_qps_1000_c_4_1024_none_both,4,1000,1888,2793,2995,4715\n2021-07-08T03:12:33.953340272Z,180,e379485c_qps_1000_c_8_1024_none_baseline,8,1000,665,942,1416,1998\n2021-07-08T03:15:34.39170438Z,180,e379485c_qps_1000_c_8_1024_none_both,8,1000,3081,3827,3995,6173\n2021-07-08T03:18:35.020425077Z,180,e379485c_qps_1000_c_16_1024_none_baseline,16,1000,1321,1870,1994,2871\n2021-07-08T03:21:35.488938053Z,180,e379485c_qps_1000_c_16_1024_none_both,16,1000,5214,6386,6991,8800\n2021-07-08T03:24:35.893324186Z,180,e379485c_qps_1000_c_32_1024_none_baseline,32,1000,1581,2448,3643,4181\n2021-07-08T03:27:36.366429299Z,180,e379485c_qps_1000_c_32_1024_none_both,32,1000,9014,10532,11971,14664\n2021-07-08T03:30:37.054477154Z,179,e379485c_qps_1000_c_64_1024_none_baseline,64,1000,2561,3895,5633,8073\n2021-07-08T03:33:37.591317915Z,179,e379485c_qps_1000_c_64_1024_none_both,64,1000,16425,18346,21529,24656\n2021-07-08T10:22:59.650647926Z,180,47e02b90_qps_1000_c_2_1024_none_baseline,2,1000,619,925,994,1685\n2021-07-08T10:26:00.023923405Z,180,47e02b90_qps_1000_c_2_1024_none_both,2,1000,1544,2085,2922,3569\n2021-07-08T10:29:00.5336073Z,180,47e02b90_qps_1000_c_4_1024_none_baseline,4,1000,641,931,997,1899\n2021-07-08T10:32:00.926507967Z,180,47e02b90_qps_1000_c_4_1024_none_both,4,1000,1884,2798,3103,4726\n2021-07-08T10:35:01.281884063Z,180,47e02b90_qps_1000_c_8_1024_none_baseline,8,1000,662,938,1121,2227\n2021-07-08T10:38:01.659107592Z,180,47e02b90_qps_1000_c_8_1024_none_both,8,1000,4748,5754,6137,8558\n2021-07-08T10:41:02.175849835Z,180,47e02b90_qps_1000_c_16_1024_none_baseline,16,1000,1283,1863,1993,2892\n2021-07-08T10:44:02.568365775Z,180,47e02b90_qps_1000_c_16_1024_none_both,16,1000,5083,6026,7857,10078\n2021-07-08T10:47:03.014074722Z,180,47e02b90_qps_1000_c_32_1024_none_baseline,32,1000,1594,2529,3537,4557\n2021-07-08T10:50:03.455990894Z,180,47e02b90_qps_1000_c_32_1024_none_both,32,1000,12420,14040,15979,19009\n2021-07-08T10:53:04.043806415Z,179,47e02b90_qps_1000_c_64_1024_none_baseline,64,1000,2771,3960,5281,7133\n2021-07-08T10:56:04.516012475Z,179,47e02b90_qps_1000_c_64_1024_none_both,64,1000,18706,23763,26954,29338\n</code></pre><p><strong>cat <span class=\"exturl\" data-url=\"aHR0cDovL2Nzdi5weQ==\">csv.py</span></strong></p><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">to_table</span><span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span><span class=\"token string\">'all-results.csv'</span><span class=\"token punctuation\">,</span> rept<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''将符号分割文本转化为markdown表格形式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parameter:需要转化的文件名(str),文本的分割符号(str)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    '''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    file_obj_r <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    file_obj_w <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token operator\">+</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 哨兵，实现文件的第二行另做处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> file_obj_r<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        rec <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>rept<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        new_rec <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rec<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        new_rec <span class=\"token operator\">=</span> <span class=\"token string\">'|'</span><span class=\"token operator\">+</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>new_rec<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'|'</span><span class=\"token operator\">+</span><span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        file_obj_w<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>new_rec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            head_rec <span class=\"token operator\">=</span> <span class=\"token string\">'|'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rec<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                head_rec <span class=\"token operator\">+=</span> <span class=\"token string\">'---|'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            head_rec <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            file_obj_w<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>head_rec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    file_obj_r<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    file_obj_w<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        to_table<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        to_table<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python csv.py all-results.csv</pre></td></tr></table></figure><h2 id=\"自己编写画图脚本\"><a class=\"anchor\" href=\"#自己编写画图脚本\">#</a> 自己编写画图脚本</h2><h3 id=\"all-resultscsv\"><a class=\"anchor\" href=\"#all-resultscsv\">#</a> all-results.csv</h3><p>cat all-results.csv</p><table><thead><tr><th>StartTime</th><th>ActualDuration</th><th>Labels</th><th>NumThreads</th><th>ActualQPS</th><th>p50</th><th>p90</th><th>p99</th><th>p999</th></tr></thead><tbody><tr><td>2021-07-08T03:00:32.123633281Z</td><td>180</td><td>e379485c_qps_1000_c_2_1024_none_baseline</td><td>2</td><td>1000</td><td>633</td><td>927</td><td>994</td><td>1630</td></tr><tr><td>2021-07-08T03:03:32.552909916Z</td><td>180</td><td>e379485c_qps_1000_c_2_1024_none_both</td><td>2</td><td>1000</td><td>1535</td><td>1980</td><td>2894</td><td>3493</td></tr><tr><td>2021-07-08T03:06:33.127271331Z</td><td>180</td><td>e379485c_qps_1000_c_4_1024_none_baseline</td><td>4</td><td>1000</td><td>629</td><td>929</td><td>996</td><td>1893</td></tr><tr><td>2021-07-08T03:09:33.547611543Z</td><td>180</td><td>e379485c_qps_1000_c_4_1024_none_both</td><td>4</td><td>1000</td><td>1888</td><td>2793</td><td>2995</td><td>4715</td></tr><tr><td>2021-07-08T03:12:33.953340272Z</td><td>180</td><td>e379485c_qps_1000_c_8_1024_none_baseline</td><td>8</td><td>1000</td><td>665</td><td>942</td><td>1416</td><td>1998</td></tr><tr><td>2021-07-08T03:15:34.39170438Z</td><td>180</td><td>e379485c_qps_1000_c_8_1024_none_both</td><td>8</td><td>1000</td><td>3081</td><td>3827</td><td>3995</td><td>6173</td></tr><tr><td>2021-07-08T03:18:35.020425077Z</td><td>180</td><td>e379485c_qps_1000_c_16_1024_none_baseline</td><td>16</td><td>1000</td><td>1321</td><td>1870</td><td>1994</td><td>2871</td></tr><tr><td>2021-07-08T03:21:35.488938053Z</td><td>180</td><td>e379485c_qps_1000_c_16_1024_none_both</td><td>16</td><td>1000</td><td>5214</td><td>6386</td><td>6991</td><td>8800</td></tr><tr><td>2021-07-08T03:24:35.893324186Z</td><td>180</td><td>e379485c_qps_1000_c_32_1024_none_baseline</td><td>32</td><td>1000</td><td>1581</td><td>2448</td><td>3643</td><td>4181</td></tr><tr><td>2021-07-08T03:27:36.366429299Z</td><td>180</td><td>e379485c_qps_1000_c_32_1024_none_both</td><td>32</td><td>1000</td><td>9014</td><td>10532</td><td>11971</td><td>14664</td></tr><tr><td>2021-07-08T03:30:37.054477154Z</td><td>179</td><td>e379485c_qps_1000_c_64_1024_none_baseline</td><td>64</td><td>1000</td><td>2561</td><td>3895</td><td>5633</td><td>8073</td></tr><tr><td>2021-07-08T03:33:37.591317915Z</td><td>179</td><td>e379485c_qps_1000_c_64_1024_none_both</td><td>64</td><td>1000</td><td>16425</td><td>18346</td><td>21529</td><td>24656</td></tr><tr><td>2021-07-08T10:22:59.650647926Z</td><td>180</td><td>47e02b90_qps_1000_c_2_1024_none_baseline</td><td>2</td><td>1000</td><td>619</td><td>925</td><td>994</td><td>1685</td></tr><tr><td>2021-07-08T10:26:00.023923405Z</td><td>180</td><td>47e02b90_qps_1000_c_2_1024_none_both</td><td>2</td><td>1000</td><td>1544</td><td>2085</td><td>2922</td><td>3569</td></tr><tr><td>2021-07-08T10:29:00.5336073Z</td><td>180</td><td>47e02b90_qps_1000_c_4_1024_none_baseline</td><td>4</td><td>1000</td><td>641</td><td>931</td><td>997</td><td>1899</td></tr><tr><td>2021-07-08T10:32:00.926507967Z</td><td>180</td><td>47e02b90_qps_1000_c_4_1024_none_both</td><td>4</td><td>1000</td><td>1884</td><td>2798</td><td>3103</td><td>4726</td></tr><tr><td>2021-07-08T10:35:01.281884063Z</td><td>180</td><td>47e02b90_qps_1000_c_8_1024_none_baseline</td><td>8</td><td>1000</td><td>662</td><td>938</td><td>1121</td><td>2227</td></tr><tr><td>2021-07-08T10:38:01.659107592Z</td><td>180</td><td>47e02b90_qps_1000_c_8_1024_none_both</td><td>8</td><td>1000</td><td>4748</td><td>5754</td><td>6137</td><td>8558</td></tr><tr><td>2021-07-08T10:41:02.175849835Z</td><td>180</td><td>47e02b90_qps_1000_c_16_1024_none_baseline</td><td>16</td><td>1000</td><td>1283</td><td>1863</td><td>1993</td><td>2892</td></tr><tr><td>2021-07-08T10:44:02.568365775Z</td><td>180</td><td>47e02b90_qps_1000_c_16_1024_none_both</td><td>16</td><td>1000</td><td>5083</td><td>6026</td><td>7857</td><td>10078</td></tr><tr><td>2021-07-08T10:47:03.014074722Z</td><td>180</td><td>47e02b90_qps_1000_c_32_1024_none_baseline</td><td>32</td><td>1000</td><td>1594</td><td>2529</td><td>3537</td><td>4557</td></tr><tr><td>2021-07-08T10:50:03.455990894Z</td><td>180</td><td>47e02b90_qps_1000_c_32_1024_none_both</td><td>32</td><td>1000</td><td>12420</td><td>14040</td><td>15979</td><td>19009</td></tr><tr><td>2021-07-08T10:53:04.043806415Z</td><td>179</td><td>47e02b90_qps_1000_c_64_1024_none_baseline</td><td>64</td><td>1000</td><td>2771</td><td>3960</td><td>5281</td><td>7133</td></tr><tr><td>2021-07-08T10:56:04.516012475Z</td><td>179</td><td>47e02b90_qps_1000_c_64_1024_none_both</td><td>64</td><td>1000</td><td>18706</td><td>23763</td><td>26954</td><td>29338</td></tr><tr></tr></tbody></table><h3 id=\"graph_plotterpy\"><a class=\"anchor\" href=\"#graph_plotterpy\">#</a> graph_plotter.py</h3><h4 id=\"cat-graph_plotterpy\"><a class=\"anchor\" href=\"#cat-graph_plotterpy\">#</a> cat graph_plotter.py</h4><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># python3 graph_plotter.py --telemetry_mode=baseline --query_list=2,4,8,16,32,64 --graph_type=latency-p90 --csv_filepath=./all-results.csv --cni=weave,calico --title=\"Istio P90, 1000RPS, 180 seconds\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> argparse</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> pandas as pd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> matplotlib.pyplot as plt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>from typing <span class=\"token function\">import</span> List</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>def get_metric_name<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> args.graph_type.startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"latency\"</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> args.graph_type.split<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> metric_dict<span class=\"token punctuation\">[</span>args.graph_type<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>def get_data<span class=\"token punctuation\">(</span>df, query_list, startstr, telemetry_mode, metric_name<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    y_series_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">ql</span> <span class=\"token keyword\">in</span> query_list:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># Labels.str.contains/startwith/endswith</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        query_str <span class=\"token operator\">=</span> <span class=\"token string\">\"ActualQPS==1000 and NumThreads==&#123;ql&#125; and Labels.str.contains('&#123;startstr&#125;') and Labels.str.endswith('&#123;telemetry_mode&#125;')\"</span>.format<span class=\"token punctuation\">(</span>ql<span class=\"token operator\">=</span>ql, <span class=\"token assign-left variable\">startstr</span><span class=\"token operator\">=</span>startstr, <span class=\"token assign-left variable\">telemetry_mode</span><span class=\"token operator\">=</span>telemetry_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        data <span class=\"token operator\">=</span> df.query<span class=\"token punctuation\">(</span>query_str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        try:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span>.head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.empty</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        except KeyError as e:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            y_series_data.append<span class=\"token punctuation\">(</span>None<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        else:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            y_series_data.append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>metric_name<span class=\"token punctuation\">]</span>.head<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> / <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> y_series_data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>def plotter<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">df</span> <span class=\"token operator\">=</span> pd.read_csv<span class=\"token punctuation\">(</span>args.csv_filepath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    metric_name <span class=\"token operator\">=</span> get_metric_name<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    y_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">cni_mode</span> <span class=\"token keyword\">in</span> args.cni:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        global startstr</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        startstr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> cni_mode <span class=\"token operator\">==</span> <span class=\"token string\">\"weave\"</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            startstr <span class=\"token operator\">=</span> <span class=\"token string\">\"e379485c\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> cni_mode <span class=\"token operator\">==</span> <span class=\"token string\">\"calico\"</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            startstr <span class=\"token operator\">=</span> <span class=\"token string\">\"47e02b90\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        y_data<span class=\"token punctuation\">[</span>cni_mode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> get_data<span class=\"token punctuation\">(</span>df, args.query_list, startstr, args.telemetry_mode, metric_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    dpi <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    plt.figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1138</span> / dpi, <span class=\"token number\">871</span> / dpi<span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">dpi</span><span class=\"token operator\">=</span>dpi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> key, val <span class=\"token keyword\">in</span> y_data.items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\"># print(key): weave / calico</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\"># print(val): [1.98, 2.793, 3.827, 6.386, 10.532, 18.346] / [2.085, 2.798, 5.754, 6.026, 14.04, 23.763]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        plt.plot<span class=\"token punctuation\">(</span>args.query_list, val, <span class=\"token assign-left variable\">marker</span><span class=\"token operator\">=</span><span class=\"token string\">'o'</span>, <span class=\"token assign-left variable\">label</span><span class=\"token operator\">=</span>key+<span class=\"token string\">\"(CNI)_\"</span> +<span class=\"token string\">\"(none_\"</span>+args.telemetry_mode + <span class=\"token string\">\")_\"</span>+  <span class=\"token string\">\"perf_with_istio_benchmark\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    plt.xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Connections\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    plt.ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Latency in milliseconds\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    plt.legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    plt.title<span class=\"token punctuation\">(</span>args.title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    plt.grid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    plt.savefig<span class=\"token punctuation\">(</span>args.telemetry_mode + <span class=\"token string\">\"(CNI)_perf_with_istio_benchmark.png\"</span>, <span class=\"token assign-left variable\">dpi</span><span class=\"token operator\">=</span>dpi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>def int_list<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> lst.split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>def string_list<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> lst.split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>def get_parser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    parser <span class=\"token operator\">=</span> argparse.ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token string\">\"Istio performance benchmark CSV file graph plotter.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token string\">\"--query_list\"</span>,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Specify the qps or conn range you want to plot based on the CSV file.\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>             <span class=\"token string\">\"For example, conn_query_list=[2, 4, 8, 16, 32, 64], qps_query_list=[10, 100, 200, 400, 800, 1000].\"</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span>int_list</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token string\">\"--graph_type\"</span>,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Choose from one of them: [latency-p50, latency-p90, latency-p99, latency-p999, \"</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>             <span class=\"token string\">\"cpu-client, cpu-server, mem-client, mem-server].\"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token string\">\"--telemetry_mode\"</span>,</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"This is a list of perf test labels, currently it can be any combinations from the follow supported modes:\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>             <span class=\"token string\">\"[none_mtls_baseline, none_mtls_both, v2-sd-full-nullvm_both, v2-stats-nullvm_both, \"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>             <span class=\"token string\">\"v2-stats-wasm_both, v2-sd-nologging-nullvm_both].\"</span>,</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span>str</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token string\">\"--csv_filepath\"</span>,</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"The path of the CSV file.\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token string\">\"--cni\"</span>,</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"CNI type.\"</span>,</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span>string_list</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    parser.add_argument<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token string\">\"--title\"</span>,</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token assign-left variable\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"The graph title.\"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> parser</pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>def main<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    args <span class=\"token operator\">=</span> get_parser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.parse_args<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> plotter<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    sys.exit<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span>sys.argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span></pre></td></tr></table></figure><h3 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 graph_plotter.py --telemetry_mode<span class=\"token operator\">=</span>baseline --query_list<span class=\"token operator\">=</span><span class=\"token number\">2,4</span>,8,16,32,64 --graph_type<span class=\"token operator\">=</span>latency-p90 --csv_filepath<span class=\"token operator\">=</span>./all-results.csv --cni<span class=\"token operator\">=</span>weave,calico --title<span class=\"token operator\">=</span><span class=\"token string\">\"Istio P90, 1000RPS, 180 seconds\"</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "microService",
                "istio",
                "istio"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/07/02/storage/ceph/ceph_03_tls/",
            "url": "https://kung-fu-master.github.io/2021/07/02/storage/ceph/ceph_03_tls/",
            "title": "Ceph 03 TLS",
            "date_published": "2021-07-02T09:32:30.827Z",
            "content_html": "<!-- build time:Fri Jul 02 2021 17:38:35 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb29rLmlvL2RvY3Mvcm9vay92MS42L2NlcGgtb2JqZWN0LXN0b3JlLWNyZC5odG1sI2dhdGV3YXktc2V0dGluZ3M=\">https://rook.io/docs/rook/v1.6/ceph-object-store-crd.html#gateway-settings</span></p><h2 id=\"生成ca\"><a class=\"anchor\" href=\"#生成ca\">#</a> 生成 CA</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">mkdir</span> pki</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> pki</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ openssl genrsa -out <span class=\"token string\">\"root-ca.key\"</span> <span class=\"token number\">4096</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ openssl req -new -key <span class=\"token string\">\"root-ca.key\"</span> -out <span class=\"token string\">\"root-ca.csr\"</span> -sha512 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        -subj <span class=\"token string\">'/C=US/ST=CA/L=China/O=Hce/CN=CA'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">cat</span> <span class=\"token operator\">></span> <span class=\"token string\">\"root-ca.conf\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>[root_ca]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>basicConstraints = critical,CA:TRUE,pathlen:1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>keyUsage = critical, nonRepudiation, cRLSign, keyCertSign</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>subjectKeyIdentifier=hash</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>EOF</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>$ openssl x509 -req -days <span class=\"token number\">3650</span> -in <span class=\"token string\">\"root-ca.csr\"</span> -signkey <span class=\"token string\">\"root-ca.key\"</span> -sha512 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        -out <span class=\"token string\">\"root-ca.crt\"</span> -extfile <span class=\"token string\">\"root-ca.conf\"</span> -extensions root_ca</pre></td></tr></table></figure><h2 id=\"生成object服务证书\"><a class=\"anchor\" href=\"#生成object服务证书\">#</a> 生成 object 服务证书</h2><ol><li>生成服务证书</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">mkdir</span> pki <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> pki</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ openssl ecparam -genkey -name prime256v1 <span class=\"token operator\">|</span> openssl ec -out cert.key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ openssl req -new  -key <span class=\"token string\">\"cert.key\"</span> -out <span class=\"token string\">\"cert.csr\"</span> -sha384 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        -subj <span class=\"token string\">'/C=US/ST=CA/L=China/O=Hce/CN=service'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">cat</span> <span class=\"token operator\">></span> <span class=\"token string\">\"ceph-crt.conf\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>[ceph_server]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>authorityKeyIdentifier = keyid,issuer</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>basicConstraints = critical,CA:FALSE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>extendedKeyUsage=serverAuth,clientAuth</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>keyUsage = critical, digitalSignature, keyEncipherment</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>subjectAltName = DNS:rook-ceph-rgw-my-store.rook-ceph.svc.cluster.local, IP:127.0.0.1, IP:10.67.108.211</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>subjectKeyIdentifier = hash</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>EOF</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>$ openssl x509 -req -days <span class=\"token number\">365</span>  -in <span class=\"token string\">\"cert.csr\"</span> -CA <span class=\"token string\">\"root-ca.crt\"</span> -CAkey <span class=\"token string\">\"root-ca.key\"</span>  -CAcreateserial -out <span class=\"token string\">\"cert.crt\"</span> -extfile <span class=\"token string\">\"ceph-crt.conf\"</span> -extensions ceph_server</pre></td></tr></table></figure><ol start=\"2\"><li>The server key, server certificate, and any other CA or intermediate certificates be supplied in one file. Each of these items must be in PEM form.</li></ol><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> cert.key cert.crt root-ca.crt <span class=\"token operator\">></span> cert</pre></td></tr></table></figure><h2 id=\"创建secret\"><a class=\"anchor\" href=\"#创建secret\">#</a> 创建 secret</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl create secret generic tls-ssl-ceph --from-file<span class=\"token operator\">=</span>pki/cert -n rook-ceph</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ kubectl describe secret tls-ssl-ceph -n rook-ceph</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Name:         tls-ssl-ceph</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Namespace:    rook-ceph</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Labels:       <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Annotations:  <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Type:  Opaque</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Data</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  cert:  <span class=\"token number\">3638</span> bytes</pre></td></tr></table></figure><h2 id=\"修改-objectyaml\"><a class=\"anchor\" href=\"#修改-objectyaml\">#</a> 修改 object.yaml</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">vim</span> object.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  gateway:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># A reference to the secret in the rook namespace where the ssl certificate is stored</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sslCertificateRef: tls-ssl-ceph</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># The port that RGW pods will listen on (http)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    port: <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># The port that RGW pods will listen on (https). An ssl certificate is required.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    securePort: <span class=\"token number\">443</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># The number of pods in the rgw deployment</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    instances: <span class=\"token number\">1</span></pre></td></tr></table></figure><p>修改并创建 Ceph Object 服务.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create -f object.yaml</pre></td></tr></table></figure><h2 id=\"修改rgw-externalyaml\"><a class=\"anchor\" href=\"#修改rgw-externalyaml\">#</a> 修改 rgw-external.yaml</h2><p>Create a new service for external access.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">vim</span> rgw-external.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  apiVersion: v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  kind: Service</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  metadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name: rook-ceph-rgw-my-store-external</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    namespace: rook-ceph <span class=\"token comment\"># namespace:cluster</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    labels:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      app: rook-ceph-rgw</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      rook_cluster: rook-ceph <span class=\"token comment\"># namespace:cluster</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      rook_object_store: my-store</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  spec:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      - name: rgw</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        port: <span class=\"token number\">80</span> <span class=\"token comment\"># service port mentioned in object store crd</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        protocol: TCP</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        targetPort: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      - name: https</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        port: <span class=\"token number\">443</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        protocol: TCP</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        targetPort: <span class=\"token number\">443</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    selector:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      app: rook-ceph-rgw</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      rook_cluster: rook-ceph <span class=\"token comment\"># namespace:cluster</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      rook_object_store: my-store</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    sessionAffinity: None</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    type: NodePort</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create -f rgw-external.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kubectl -n rook-ceph get <span class=\"token function\">service</span> rook-ceph-rgw-my-store rook-ceph-rgw-my-store-external</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  NAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>                      AGE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  rook-ceph-rgw-my-store            ClusterIP   <span class=\"token number\">10.100</span>.70.220   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>/TCP,443/TCP               3h16m</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  rook-ceph-rgw-my-store-external   NodePort    <span class=\"token number\">10.97</span>.94.98     <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>:32314/TCP,443:31434/TCP   28h</pre></td></tr></table></figure><h2 id=\"创建user\"><a class=\"anchor\" href=\"#创建user\">#</a> 创建 User</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// Create the object store user</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl create -f object-user.yaml</pre></td></tr></table></figure><h2 id=\"配置-mc-访问\"><a class=\"anchor\" href=\"#配置-mc-访问\">#</a> 配置 mc 访问</h2><p>Reference Link:</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ kubectl -n rook-ceph get secret rook-ceph-object-user-my-store-my-user -o <span class=\"token assign-left variable\">jsonpath</span><span class=\"token operator\">=</span><span class=\"token string\">'&#123;.data.AccessKey&#125;'</span> <span class=\"token operator\">|</span> base64 --decode</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  64ILG09702G1R3LQTUX6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ kubectl -n rook-ceph get secret rook-ceph-object-user-my-store-my-user -o <span class=\"token assign-left variable\">jsonpath</span><span class=\"token operator\">=</span><span class=\"token string\">'&#123;.data.SecretKey&#125;'</span> <span class=\"token operator\">|</span> base64 --decode</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  WAghMWZM1YSYrAXrUiZVKWUV78cWI6yNoELZP21s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">wget</span> https://dl.min.io/client/mc/release/linux-amd64/mc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ <span class=\"token function\">chmod</span> +x <span class=\"token function\">mc</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ ./mc --help</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$ ./mc --version</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>./mc config <span class=\"token function\">host</span> <span class=\"token function\">add</span> cephtls https://<span class=\"token operator\">&lt;</span>Node-IP<span class=\"token operator\">></span>:31434 64ILG09702G1R3LQTUX6 WAghMWZM1YSYrAXrUiZVKWUV78cWI6yNoELZP21s --api S3v4 --insecure</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>./mc <span class=\"token function\">ls</span> cephtls --insecure</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "storage",
                "ceph",
                "storage"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/07/02/linux/reboot/",
            "url": "https://kung-fu-master.github.io/2021/07/02/linux/reboot/",
            "title": "reboot",
            "date_published": "2021-07-02T07:00:45.516Z",
            "content_html": "<!-- build time:Fri Jul 02 2021 15:10:53 GMT+0800 (中国标准时间) --><h2 id=\"一般情况下重启命令\"><a class=\"anchor\" href=\"#一般情况下重启命令\">#</a> 一般情况下重启命令</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">reboot</span></pre></td></tr></table></figure><h2 id=\"强制重启命令\"><a class=\"anchor\" href=\"#强制重启命令\">#</a> 强制重启命令</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">reboot</span> -nf</pre></td></tr></table></figure><p>这样重启时可以指定跳过 init 的处理和 sync 操作，这样可以避免大多数情况下的问题.</p><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/07/02/linux/getFolderSize/",
            "url": "https://kung-fu-master.github.io/2021/07/02/linux/getFolderSize/",
            "title": "获取文件夹大小",
            "date_published": "2021-07-02T07:00:45.516Z",
            "content_html": "<!-- build time:Fri Jul 02 2021 15:10:53 GMT+0800 (中国标准时间) --><h2 id=\"du命令\"><a class=\"anchor\" href=\"#du命令\">#</a> du 命令</h2><ul><li>du 命令用于显示目录或文件的大小。</li><li>du 会显示指定的目录或文件所占用的磁盘空间。</li></ul><h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token punctuation\">[</span>-abcDhHklmsSx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-L <span class=\"token operator\">&lt;</span>符号连接<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-X <span class=\"token operator\">&lt;</span>文件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--block-size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--exclude<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>目录或文件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--max-depth<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>目录层数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>目录或文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"参数说明\"><a class=\"anchor\" href=\"#参数说明\">#</a> 参数说明：</h2><ul><li>-a 或 - all 显示目录中个别文件的大小。</li><li>-b 或 - bytes 显示目录或文件大小时，以 byte 为单位。</li><li>-c 或 --total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li>-D 或 --dereference-args 显示指定符号连接的源文件大小。</li><li>-h 或 --human-readable 以 K，M，G 为单位，提高信息的可读性。</li><li>-H 或 --si 与 - h 参数相同，但是 K，M，G 是以 1000 为换算单位。</li><li>-k 或 --kilobytes 以 1024 bytes 为单位。</li><li>-l 或 --count-links 重复计算硬件连接的文件。</li><li>-L &lt;符号连接&gt; 或 --dereference &lt; 符号连接 &gt; 显示选项中所指定符号连接的源文件大小。</li><li>-m 或 --megabytes 以 1MB 为单位。</li><li>-s 或 --summarize 仅显示总计。</li><li>-S 或 --separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</li><li>-x 或 --one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li>-X &lt;文件&gt; 或 --exclude-from=&lt; 文件 &gt; 在 &lt; 文件 &gt; 指定目录或文件。</li><li>--exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</li><li>--max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</li><li>--help 显示帮助。</li><li>--version 显示版本信息。</li></ul><h2 id=\"文件所占空间\"><a class=\"anchor\" href=\"#文件所占空间\">#</a> 文件所占空间</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">du</span> -sh log2012.log </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  300K     log2012.log</pre></td></tr></table></figure><h2 id=\"目录所占空间\"><a class=\"anchor\" href=\"#目录所占空间\">#</a> 目录所占空间</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">du</span> -h /home/download</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  40M     /home/download/linux-amd64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">4</span>.0K    /home/download/tools-master/.git/refs/heads</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">4</span>.0K    /home/download/tools-master/.git/refs/tags</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  12K     /home/download/tools-master/.git/refs/remotes/origin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  12K     /home/download/tools-master/.git/refs/remotes</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  20K     /home/download/tools-master/.git/refs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">0</span>       /home/download/tools-master/.git/branches</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  40K     /home/download/tools-master/.git/hooks</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">4</span>.0K    /home/download/tools-master/.git/info</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  19M     /home/download/tools-master/.git/objects/pack</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h2 id=\"目录总和大小\"><a class=\"anchor\" href=\"#目录总和大小\">#</a> 目录总和大小</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">du</span> -sh /home/download</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  19G     /home/download</pre></td></tr></table></figure><h2 id=\"子目录大小\"><a class=\"anchor\" href=\"#子目录大小\">#</a> 子目录大小</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">du</span> -h /home/download --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -nr <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  764M    /home/download/istio</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  258M    /home/download/rest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  131M    /home/download/openssl-1.1.1j</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  124M    /home/download/cmake-3.17.0-Linux-x86_64</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  79M     /home/download/docker</pre></td></tr></table></figure><h2 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">du</span> -h /home/download <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -nr <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  1020K   /home/download/storage/minIO/client/c++/aws-sdk-cpp-1.8.55/aws-cpp-sdk-iotanalytics/include/aws/iotanalytics</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  1020K   /home/download/storage/minIO/client/c++/aws-sdk-cpp-1.8.55/aws-cpp-sdk-iotanalytics/include/aws</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  1020K   /home/download/storage/minIO/client/c++/aws-sdk-cpp-1.8.55/aws-cpp-sdk-iotanalytics/include</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  1020K   /home/download/storage/ceph/rook-1.6.6/design</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  1020K   /home/download/openssl-1.1.1j/crypto/x509v3</pre></td></tr></table></figure><ul><li>sort -n, 依照数值的大小排序</li><li>sort -r, 以相反的顺序来排序</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/22/language/c/linkedList/",
            "url": "https://kung-fu-master.github.io/2021/06/22/language/c/linkedList/",
            "title": "c Linked List",
            "date_published": "2021-06-22T12:45:35.801Z",
            "content_html": "<!-- build time:Tue Jun 22 2021 20:57:17 GMT+0800 (中国标准时间) --><h2 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h2><p><img data-src=\"01.png\" alt=\"\"><br>链表实现了，内存零碎数据的有效组织。比如，当我们用 malloc 来进行内存申请的时候，当内存足够，但是由于碎片太多，没有连续内存时，只能以申请失败而告终，而用链表这种数据结构来组织数据，就可以解决上类问题.</p><h2 id=\"静态链表\"><a class=\"anchor\" href=\"#静态链表\">#</a> 静态链表</h2><p><img data-src=\"02.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 1. 定义链表节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 创建链表节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Node a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Node b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Node c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 3. 初始化节点数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    a<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    b<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    c<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 4. 链接节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    a<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    b<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    c<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 5. 创建链表头</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 6. 使用链表</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"动态链表\"><a class=\"anchor\" href=\"#动态链表\">#</a> 动态链表</h2><p>静态链表的意义不是很大，主要原因，数据存储在栈上，栈的存储空间有限，不能动态分配。所以链表要实现存储的自由，要动态的申请堆里的空间。</p><h2 id=\"空链表\"><a class=\"anchor\" href=\"#空链表\">#</a> 空链表</h2><p><img data-src=\"03.png\" alt=\"\"><br>头指针带了一个空链表节点，空链表节点中的 next 指向 NULL</p><h2 id=\"非空链表\"><a class=\"anchor\" href=\"#非空链表\">#</a> 非空链表</h2><p><img data-src=\"04.png\" alt=\"\"><br>头指针带了一个非空节点，最后一个节点中的 next 指向 NULL.</p><h2 id=\"动态链表头插法\"><a class=\"anchor\" href=\"#动态链表头插法\">#</a> 动态链表头插法</h2><ol><li>让新节点的下一个节点等于头结点的下一个节点</li><li>让头节点的下一个节点等于新节点</li></ol><div class=\"note info\"><p>上面 1,2 顺序不能放过来，否则头节点后面原来的其它节点都会丢失.</p></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 接收用户输入数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入节点数据:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 使用循环创建其它节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 3.1 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        Node<span class=\"token operator\">*</span> curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        curNode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 3.2 让新节点的下一个节点指向头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        curNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 3.3 让头节点的下一个节点指向新节点</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 3.4 再次接收用户输入数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 4. 返回创建好的节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * @brief printNodeList 遍历链表 </pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * @param node 链表指针头</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> * @brief destroyList 销毁链表</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> */ </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        head <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    Node<span class=\"token operator\">*</span> nodeHead <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"动态链表尾插法\"><a class=\"anchor\" href=\"#动态链表尾插法\">#</a> 动态链表尾插法</h2><ol><li>定义变量记录新节点的上一个节点</li><li>将新节点添加到上一个节点后面</li><li>让新节点成为下一个节点的上一个节点</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 接收用户输入数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入节点数据:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 使用循环创建其它节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 保留 head 指针在头部不动，创建另外一个指针进行插入新节点操作</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Node<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 3.1 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Node<span class=\"token operator\">*</span> curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        curNode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 3.2 让新节点链接到上一个节点后面</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 3.3 当前节点下一个节点等于 NULL</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        curNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 3.4 让当前节点变成下一个节点的上一个节点，也就是当前节点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        pre <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 3.4 再次接收用户输入数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 4. 返回创建好的节点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * @brief printNodeList 遍历链表 </pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * @param node 链表指针头</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> * @brief destroyList 销毁链表</pre></td></tr><tr><td data-num=\"66\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> */ </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        head <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    Node<span class=\"token operator\">*</span> nodeHead <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表销毁\"><a class=\"anchor\" href=\"#链表销毁\">#</a> 链表销毁</h2><pre><code class=\"language-C\">/**\n * @brief destroyList 销毁链表\n * @param head 链表头指针\n */\nvoid destroyList(Node *head){\n    Node *cur = NULL;\n    while(head != NULL){\n        cur = head-&gt;next;\n        free(head);\n        head = cur;\n    }\n}\n</code></pre><h2 id=\"链表长度计算\"><a class=\"anchor\" href=\"#链表长度计算\">#</a> 链表长度计算</h2><p>传进参数的是 <code>head</code> 而不是 head 的地址 <code>&amp;head</code> , 因此在 listLength () 形参 <code>head是值传递</code> ，不会改变主函数中 head 的值，执行完此 func 后，主函数 head 仍指向链表的第一个头节点.</p><div class=\"note info\"><p>但是如果函数修改 node-&gt;data 值会改变主函数创建的链表里相应节点 data 的值.</p></div><pre><code class=\"language-C\">/**\n * @brief listLength 计算链表长度\n * @param head 链表头指针\n * @return 链表长度\n */\nint listLength(Node* head){\n    int count = 0;\n    head = head-&gt;next;\n    while(head){\n       count++;\n       head = head-&gt;next;\n    }\n    return count;\n}\n</code></pre><h2 id=\"链表查找\"><a class=\"anchor\" href=\"#链表查找\">#</a> 链表查找</h2><pre><code class=\"language-C\">/**\n * @brief searchList 查找指定节点\n * @param head 链表头指针\n * @param key 需要查找的值\n * @return 链表头\n */\nNode *searchList(Node *head, int key){\n    head = head-&gt;next;\n    while(head){\n        if(head-&gt;data == key){\n            break;\n        }else{\n            head = head-&gt;next;\n        }\n    }\n    return head;\n}\n</code></pre><h2 id=\"节点删除\"><a class=\"anchor\" href=\"#节点删除\">#</a> 节点删除</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">deleteNodeList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span>find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> find<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"给链表排序\"><a class=\"anchor\" href=\"#给链表排序\">#</a> 给链表排序</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief bubbleSort 对链表进行排序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 计算链表长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">listLength</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 定义变量记录前后节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Node <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 3. 相邻元素进行比较，进行冒泡排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i, %i\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                cur<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief sortList 对链表进行排序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 0. 计算链表长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">listLength</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 定义变量保存前后两个节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Node <span class=\"token operator\">*</span>sh<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        sh <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pre <span class=\"token operator\">=</span> sh<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cur <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二个节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">-></span>data <span class=\"token operator\">></span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 交换节点位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                sh<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 恢复节点名称</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                Node <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 让所有节点往后移动</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            sh <span class=\"token operator\">=</span> sh<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            pre <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表反转\"><a class=\"anchor\" href=\"#链表反转\">#</a> 链表反转</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief reverseList 反转链表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 创建两个链表对象，原链表赋值给 pre, pre 读取每一个链表节点，cur 保留 pre 的 next 节点，避免下面的每次循环 pre 的 next 丢失</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Node <span class=\"token operator\">*</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pre <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 重新插入节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2.1 记录 pre 的下一个节点，因为后面 pre->next 会改变.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cur <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 2.2 再把原来变化前的 pre->next 赋值给现在的 pre.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/22/language/c/file/",
            "url": "https://kung-fu-master.github.io/2021/06/22/language/c/file/",
            "title": "c file",
            "date_published": "2021-06-22T12:45:35.799Z",
            "content_html": "<!-- build time:Sat Jun 26 2021 21:40:52 GMT+0800 (中国标准时间) --><h2 id=\"文件流\"><a class=\"anchor\" href=\"#文件流\">#</a> 文件流</h2><p>C 语言把文件看作是一个字符的序列，即文件是由一个一个字符组成的字符流，因此 c 语言将文件也称之为 <code>文件流</code> .</p><h2 id=\"文件分类\"><a class=\"anchor\" href=\"#文件分类\">#</a> 文件分类</h2><p><img data-src=\"01.png\" alt=\"\"></p><ol><li>文本文件</li></ol><ul><li>以 <code>ASCII 码格式</code> 存放，<strong><span class=\"black\">一个字节存放一个字符</span></strong>. <code>文本文件的每一个字节存放一个 ASCII 码，代表一个字符</code> 。这便于对字符的逐个处理，但占用存储空间<br>较多，而且要花费时间转换。</li><li>.c 文件就是以文本文件形式存放的</li></ul><ol start=\"2\"><li>二进制文件</li></ol><ul><li>以 <code>补码格式</code> 存放。二进制文件是把数据以二进制数的格式存放在文件中的，其占用存储空间较少。 <code>数据按其内存中的存储形式原样存放</code> .</li><li>.exe 文件就是以二进制文件形式存放的</li></ul><div class=\"note info\"><p>文本工具默认会按照 ASCII 码逐个直接解码文件，由于文本文件存储的就是 ASCII 码，所以可以正常解析显示，由于二进制文件存储的不是 ASCII 码，所以解析出来之后是乱码</p></div><h2 id=\"file-结构体\"><a class=\"anchor\" href=\"#file-结构体\">#</a> FILE 结构体</h2><p>FILE 结构体是对缓冲区和文件读写状态的记录者，所有对文件的操作，都是通过 FILE 结构体完成的。</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件输入的下一个位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> _cnt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前缓冲区的相对位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_base<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件的起始位置)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> _flag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件标志</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> _file<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件的有效性验证</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> _charbuf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查缓冲区状况，如果无缓冲区则不读取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> _bufsiz<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓冲区大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_tmpfname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时文件名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> FILE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"fileopen函数\"><a class=\"anchor\" href=\"#fileopen函数\">#</a> fileopen 函数</h2><ol><li>函数说明:</li></ol><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">FILE * fopen ( const char * filename, const char * mode );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">以 mode 的方式，打开一个 filename 命名的文件，返回一个指向该文件缓冲的 FILE 结构体指针。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char*filaname : 要打开，或是创建文件的路径。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char*mode : 打开文件的方式。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">FILE* 返回指向文件缓冲区的指针，该指针是后序操作文件的句柄。</td></tr></tbody></table><ol start=\"2\"><li>参数说明:</li></ol><table><thead><tr><th style=\"text-align:left\">mode</th><th style=\"text-align:left\">处理方式</th><th style=\"text-align:left\">当文件不存在时</th><th style=\"text-align:left\">当文件存在时</th><th style=\"text-align:left\">向文件输入</th><th style=\"text-align:left\">从文件输出</th></tr></thead><tbody><tr><td style=\"text-align:left\">r</td><td style=\"text-align:left\">读取</td><td style=\"text-align:left\">出错</td><td style=\"text-align:left\">打开文件</td><td style=\"text-align:left\">不能</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">w</td><td style=\"text-align:left\">写入</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">覆盖原有文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">不能</td></tr><tr><td style=\"text-align:left\">a</td><td style=\"text-align:left\">追加</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">在原有文件后追加</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">不能</td></tr><tr><td style=\"text-align:left\">r+</td><td style=\"text-align:left\">读取 / 写入</td><td style=\"text-align:left\">出错\t打开文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">w+</td><td style=\"text-align:left\">写入 / 读取</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">覆盖原有文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">a+</td><td style=\"text-align:left\">读取 / 追加</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">在原有文件后追加</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr></tbody></table><div class=\"note info\"><p>注意点:<br>Windows 如果读写的是二进制文件，则还要加 b, 比如 rb, r+b 等。 unix/linux 不区分文本和二进制文件</p></div><h2 id=\"fclose函数\"><a class=\"anchor\" href=\"#fclose函数\">#</a> fclose 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fclose ( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">fclose () 用来关闭先前 fopen () 打开的文件.</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">此动作会让缓冲区内的数据写入文件中，并释放系统所提供的文件资源</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* stream : 指向文件缓冲的指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功返回 0 ，失败返回 EOF (-1)。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一次读写一个字符\"><a class=\"anchor\" href=\"#一次读写一个字符\">#</a> 一次读写一个字符</h2><h3 id=\"写入\"><a class=\"anchor\" href=\"#写入\">#</a> 写入</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fputc (int ch, FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">将 ch 字符，写入文件。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* stream : 指向文件缓冲的指针。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">int : 需要写入的字符。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 写入成功，返回写入成功字符，如果失败，返回 EOF。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 打开一个文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 往文件中写入内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span> ch<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 一次写入一个字符</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">char</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res = %c\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 3. 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读取\"><a class=\"anchor\" href=\"#读取\">#</a> 读取</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fgetc ( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">从文件流中读取一个字符并返回。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* stream : 指向文件缓冲的指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 正常，返回读取的字符；读到文件尾或出错时，为 EOF。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 打开一个文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 从文件中读取内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> res <span class=\"token operator\">=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res = %c\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 3. 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"判断文件末尾\"><a class=\"anchor\" href=\"#判断文件末尾\">#</a> 判断文件末尾</h3><p>feof 函数</p><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int feof( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">判断文件是否读到文件结尾</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* stream : 指向文件缓冲的指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 0 未读到文件结尾，非零 读到文件结尾。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 打开一个文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 从文件中读取内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> res <span class=\"token operator\">=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 注意：由于只有先读了才会修改标志位，</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 所以通过 feof 判断是否到达文件末尾，一定要先读再判断，不能先判断再读</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res = %c\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 3. 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\"><p><strong>注意点:</strong></p><ul><li>feof 这个函数，是去读标志位判断文件是否结束的。</li><li>而标志位只有读完了才会被修改，所以如果先判断再读标志位会出现多打一次的的现象</li><li>所以企业开发中使用 feof 函数一定要先读后判断，而不能先判断后读</li></ul></div><h2 id=\"加密和解密\"><a class=\"anchor\" href=\"#加密和解密\">#</a> 加密和解密</h2><ul><li>main.c</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>encode.c</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> newName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> newName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"encodeFile.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encodeFile.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decodeFile.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @brief  encode 加密文件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @param name 需要加密的文件名称</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @param newName 加密之后的文件名称</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @param code  秘钥</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> newName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fr <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fw <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> code<span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> * @brief encode 解密文件</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * @param name 需要解密的文件名称</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * @param newName 解密之后的文件名称</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * @param code 秘钥</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> newName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fr <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fw <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> code<span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>encodeFile.c</li></ul><pre><code class=\"language-txt\">���������������򤐐����������ᐺ�����������������������������������������������\n</code></pre><ul><li>decodeFile.c</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一次读写一行字符\"><a class=\"anchor\" href=\"#一次读写一行字符\">#</a> 一次读写一行字符</h2><h3 id=\"什么是行\"><a class=\"anchor\" href=\"#什么是行\">#</a> 什么是行:</h3><pre><code>行是文本编辑器中的概念，文件流中就是一个字符。这个在不同的平台是有差异的。window 平台 ‘\\r\\n’，linux 平台是’\\n’\n</code></pre><p>### 平台差异</p><ul><li>windows 平台在写入 <code>\\n</code> 是会体现为 <code>\\r\\n</code> ，linux 平台在写入 <code>\\n</code> 时会体现为 <code>\\n</code> 。windows 平台在读入 <code>\\r\\n</code> 时，体现为一个字符 <code>\\n</code> ，linux 平台在读入 <code>\\n</code> 时，体现为一个字符 <code>\\n</code> .</li><li>linux 读 windows 中的换行，则会多读一个字符，windows 读 linux 中的换行，则没有问题</li></ul><h3 id=\"写入一行\"><a class=\"anchor\" href=\"#写入一行\">#</a> 写入一行</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fputs(char *str,FILE *fp)</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">把 str 指向的字符串写入 fp 指向的文件中。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char * str : 表示指向的字符串的指针。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE *fp : 指向文件流结构的指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 正常，返 0；出错返 EOF。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fw <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 注意: fputs 不会自动添加 \\n</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lnj\\n\"</span><span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it666\\n\"</span><span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 注意: fputs 写入时遇到 \\0 就会自动终止写入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lnj\\0it666\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读取一行\"><a class=\"anchor\" href=\"#读取一行\">#</a> 读取一行</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">char *fgets(char *str,int length,FILE *fp)</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">从 fp 所指向的文件中，至多读 length-1 个字符，送入字符数组 str 中， 如果在读入 length-1 个字符结束前遇 \\n 或 EOF，读入即结束，字符串读入后在最后加一个‘\\0’字符。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char * str : 指向需要读入数据的缓冲区。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">int length : 每一次读数字符的字数。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* fp : 文件流指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">char * 正常，返 str 指针；出错或遇到文件结尾 返空指针 NULL。</td></tr></tbody></table><ol><li><strong>最多只能读取 N-1 个字符</strong></li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 注意，fputs 不会自动添加 `\\n`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it123\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 FILE 结构体中的读写指针重新移动到最前面</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 注意: FILE 结构体中读写指针每读或写一个字符后都会往后移动</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 从 fp 中读取 4 个字符，存入到 str 中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 最多只能读取 N-1 个字符，会在最后自动添加 `\\0`</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str = %s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//it1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\"><li><strong>遇到 \\n 自动结束</strong></li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注意: fputs 不会自动添加 \\n</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lnj\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it123\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 将 FILE 结构体中的读写指针重新移动到最前面</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 注意: FILE 结构体中读写指针每读或写一个字符后都会往后移动</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 从 fp 中读取 1024 个字符，存入到 str 中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 但是读到第 4 个就是 \\n 了，函数会自动停止读取</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 注意点: \\n 会被读取进来</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str = %s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\"><li><strong>读取到 EOF 自动结束</strong></li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 注意: fputs 不会自动添加 \\n</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lnj\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it123\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 FILE 结构体中的读写指针重新移动到最前面</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 注意: FILE 结构体中读写指针每读或写一个字符后都会往后移动</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 每次从 fp 中读取 1024 个字符，存入到 str 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 读取到文件末尾自动结束</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str = %s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\"><p><strong>注意点:</strong></p><ul><li>企业开发中能不用 feof 函数就不用 feof 函数</li><li>如果最后一行，没有行‘\\n’的话则少读一行</li></ul></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 注意: fputs 不会自动添加 `\\n`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456678910\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456678910\\n\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456678910\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件最后没有添加 `\\n`, 则用 feof 判断文件结尾会少读一行.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 将 FILE 结构体中的读写指针重新移动到最前面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 注意: FILE 结构体中读写指针每读或写一个字符后都会往后移动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 每次从 fp 中读取 1024 个字符，存入到 str 中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 读取到文件末尾自动结束</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str = %s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * 输出:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * str = 123456678910</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * str = 123456678910</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</pre></td></tr></table></figure><h2 id=\"一次读写一块数据\"><a class=\"anchor\" href=\"#一次读写一块数据\">#</a> 一次读写一块数据</h2><ol><li>C 语言己经从接口的层面区分了，文本的读写方式和二进制的读写方式。前面我们讲的是文本的读写方式。</li><li>所有的文件接口函数，要么以 <code>\\0</code> ，表示输入结束，要么以 <code>\\n</code> ， <code>EOF(0xFF)</code> 表示读取结束。 <code>\\0</code> <code>\\n</code> 等都是文本文件的重要标识，而所有的二进制接口对于这些标识，是不敏感的。</li><li>二进制的接口可以读文本，而文本的接口不可以读二进制</li></ol><h3 id=\"一次写入一块数据\"><a class=\"anchor\" href=\"#一次写入一块数据\">#</a> 一次写入一块数据</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fwrite(void *buffer, int num_bytes, int count, FILE *fp)</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">把 buffer 指向的数据写入 fp 指向的文件中</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char * buffer : 指向要写入数据存储区的首地址的指针</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">int num_bytes: 每个要写的字段的字节数 count</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">int count : 要写的字段的个数</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">FILE* fp : 要写的文件指针</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功，返回写的字段数；出错或文件结束，返回 0。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 注意: fwrite 不会关心写入数据的格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\\0it666\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// lnj?it666</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 第一个参数：被写入数据指针</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 第二个参数：每次写入多少个字节</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 第三个参数：需要写入多少次</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 第四个参数：已打开文件结构体指针</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"一次读取一块数据\"><a class=\"anchor\" href=\"#一次读取一块数据\">#</a> 一次读取一块数据</h3><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fread(void *buffer, int num_bytes, int count, FILE *fp)</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">把 fp 指向的文件中的数据读到 buffer 中。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char * buffer : 指向要读入数据存储区的首地址的指针</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">int num_bytes: 每个要读的字段的字节数 count</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">int count : 要读的字段的个数</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">FILE* fp : 要读的文件指针</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功，返回读的字段数；出错或文件结束，返回 0。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//test.txt 中存放的是 \"lnj\\0it123\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fr <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//fread 函数读取成功返回读取到的字节数，读取失败返回 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 第一个参数：存储读取到数据的容器</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 第二个参数：每次读取多少个字节</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 第三个参数：需要读取多少次</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 第四个参数：已打开文件结构体指针</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */ </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\"><p><strong>注意点:</strong></p><ul><li>读取时 num_bytes 应该填写读取数据类型的最小单位，而 count 可以随意写</li><li>如果读取时 num_bytes 不是读取数据类型最小单位，会引发读取失败</li><li>例如：存储的是 char 类型 6C 6E 6A 00 69 74 36 36 36<ul><li>如果 num_bytes 等于 1, count 等于 1024, 那么依次取出 6C 6E 6A 00 69 74 36 36 36 , 直到取不到为止</li><li>如果 num_bytes 等于 4, count 等于 1024, 那么依次取出 [6C 6E 6A 00][69 74 36 36] , 但是最后还剩下一个 36, 但又不满足 4 个字节，那么最后一个 36 则取不到</li></ul></li></ul></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//test.txt 中存放的是 \"lnj\\0it123\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fr <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    while(fread(buf, 4, 1, fr) > 0)&#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        printf(\"%c\\n\", buf[0]);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        printf(\"%c\\n\", buf[1]);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        printf(\"%c\\n\", buf[2]);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        printf(\"%c\\n\", buf[3]);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    while(fread(buf, 1, 4, fr) > 0)&#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        printf(\"%c\\n\", buf[0]);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        printf(\"%c\\n\", buf[1]);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        printf(\"%c\\n\", buf[2]);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        printf(\"%c\\n\", buf[3]);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * 输出:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * l</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> * n</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * j</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * i</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * 1</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * 2</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> * 3</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> */</pre></td></tr></table></figure><div class=\"note info\"><p><strong>注意:</strong></p><ul><li>fwrite 和 fread 本质是用来操作二进制的</li><li>所以下面用法才是它们的正确打开姿势</li></ul></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp  <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> ages<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data = %i\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token operator\">*</span> 输出<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr></table></figure><h2 id=\"读写结构体\"><a class=\"anchor\" href=\"#读写结构体\">#</a> 读写结构体</h2><p>结构体中的数据类型不统一，此时最适合用二进制的方式进行读写.</p><h3 id=\"读写单个结构体\"><a class=\"anchor\" href=\"#读写单个结构体\">#</a> 读写单个结构体</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Person p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    printf(\"name = %s\\n\", p1.name);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//    printf(\"age = %i\\n\", p1.age);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//    printf(\"height = %lf\\n\", p1.height);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.stu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    Person p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = %i\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 35</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height = %lf\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.880000</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读写结构体数组\"><a class=\"anchor\" href=\"#读写结构体数组\">#</a> 读写结构体数组</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Person ps<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.65</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ww\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.9</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.stu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = %i\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height = %lf\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * 输出:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * name = zs</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * age = 18</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> * height = 1.650000</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * name = ls</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * age = 21</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * height = 1.880000</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * name = ww</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * age = 33</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * height = 1.900000</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> */</pre></td></tr></table></figure><h3 id=\"读写结构体链表\"><a class=\"anchor\" href=\"#读写结构体链表\">#</a> 读写结构体链表</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Person <span class=\"token operator\">*</span><span class=\"token function\">createEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">saveList</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Person <span class=\"token operator\">*</span><span class=\"token function\">loadList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//    Person *head = createEmpty();</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    insertNode(head, \"zs\", 18, 1.9);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//    insertNode(head, \"ls\", 22, 1.65);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//    insertNode(head, \"ws\", 31, 1.78);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    printfList(head);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//    saveList(head, \"person.list\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Person <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token function\">loadList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @brief loadList 从文件加载链表</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @param name 文件名称</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @return  加载好的链表头指针</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Person <span class=\"token operator\">*</span><span class=\"token function\">loadList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 1. 打开文件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 2. 创建一个空链表</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Person <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token function\">createEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 3. 创建一个节点</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Person <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 3. 进行插入</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 3.1 让新节点的下一个节点 等于 头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 3.2 让头结点的下一个节点 等于 新节点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 给下一个节点申请空间</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 释放多余的节点空间</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre> * @brief saveList 存储链表到文件</pre></td></tr><tr><td data-num=\"65\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"66\"></td><td><pre> * @param name 存储的文件名称</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> * @return  是否存储成功 -1 失败 0 成功</pre></td></tr><tr><td data-num=\"68\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">saveList</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 1. 打开文件</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 2. 取出头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    Person <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 3. 将所有有效节点保存到文件中</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre> * @brief printfList 遍历链表</pre></td></tr><tr><td data-num=\"87\"></td><td><pre> * @param head 链表的头指针</pre></td></tr><tr><td data-num=\"88\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 1. 取出头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    Person <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 2. 判断是否为 NULL, 如果不为 NULL 就开始遍历</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 2.1 取出当前节点的数据，打印</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = %i\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height = %lf\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next = %x\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// 2.2 让当前节点往后移动</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> * @brief insertNode 插入新的节点</pre></td></tr><tr><td data-num=\"107\"></td><td><pre> * @param head 链表的头指针</pre></td></tr><tr><td data-num=\"108\"></td><td><pre> * @param p 需要插入的结构体</pre></td></tr><tr><td data-num=\"109\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    Person <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">// 2. 将数据保存到新节点中</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    node<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    node<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    node<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">// 3. 进行插入</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 3.1 让新节点的下一个节点 等于 头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 3.2 让头结点的下一个节点 等于 新节点</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre> * @brief createEmpty 创建一个空链表</pre></td></tr><tr><td data-num=\"126\"></td><td><pre> * @return 链表头指针，创建失败返回 NULL</pre></td></tr><tr><td data-num=\"127\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>Person <span class=\"token operator\">*</span><span class=\"token function\">createEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">// 1. 定义头指针</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    Person <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 2. 创建一个空节点，并且赋值给头指针</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token comment\">// 3. 返回头指针</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ftell-函数\"><a class=\"anchor\" href=\"#ftell-函数\">#</a> ftell 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">long ftell ( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">得到流式文件的当前读写位置，其返回值是当前读写位置偏离文件头部的字节数.</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE * 流文件句柄</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功，返回当前读写位置偏离文件头部的字节数。失败， 返回 - 1</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">long</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp = %li\\n\"</span><span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 写入一个字节</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cp <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp = %li\\n\"</span><span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rewind-函数\"><a class=\"anchor\" href=\"#rewind-函数\">#</a> rewind 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void rewind ( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能 将文件指针重新指向一个流的开头。</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE * 流文件句柄</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void 无返回值</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">long</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp = %li\\n\"</span><span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 写入一个字节</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cp <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp = %li\\n\"</span><span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 新指向一个流的开头</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cp <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp = %li\\n\"</span><span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"fseek-函数\"><a class=\"anchor\" href=\"#fseek-函数\">#</a> fseek 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fseek ( FILE * stream, long offset, int where);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">偏移文件指针。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参 数</td><td style=\"text-align:left\">FILE * stream 文件句柄</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">long offset 偏移量</td></tr><tr><td style=\"text-align:left\"></td><td style=\"text-align:left\">int where 偏移起始位置</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功返回 0 ，失败返回 - 1</td></tr></tbody></table><h3 id=\"常用宏\"><a class=\"anchor\" href=\"#常用宏\">#</a> 常用宏</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEEK_CUR</span> <span class=\"token expression\"><span class=\"token number\">1</span> 当前文字</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEEK_END</span> <span class=\"token expression\"><span class=\"token number\">2</span> 文件结尾</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEEK_SET</span> <span class=\"token expression\"><span class=\"token number\">0</span> 文件开头</span></span></pre></td></tr></table></figure><h3 id=\"计算文件长度\"><a class=\"anchor\" href=\"#计算文件长度\">#</a> 计算文件长度</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将文件指针移动到文件结尾，并且偏移 0 个单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 计算文件长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len = %i\\n\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// len = 9</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入文件内容\"><a class=\"anchor\" href=\"#插入文件内容\">#</a> 插入文件内容</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * test.txt 内容:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * 1234567lnj</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/MLearning/matplotlib/03_barGraph/",
            "url": "https://kung-fu-master.github.io/2021/06/21/MLearning/matplotlib/03_barGraph/",
            "title": "03 条形图",
            "date_published": "2021-06-21T12:32:42.817Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"竖着画图\"><a class=\"anchor\" href=\"#竖着画图\">#</a> 竖着画图</h2><p><img data-src=\"01.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>variance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bar_label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># range (3) 等价于 range (0, 3), 是 [0, 1, 2] 没有 3.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bar_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># plt.bar: 表示竖着画图.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># yerr: 梯形图上方的误差棒</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># alpha: 条形图透明程度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># color: 条形图颜色</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> yerr<span class=\"token operator\">=</span>variance<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># zip (): 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># list (zip (mean_values, variance)) 返回： [(1, 0.2), (2, 0.4), (3, 0.5)]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># max (zip (mean_values, variance)) 返回: (3, 0.5)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>max_y <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">,</span> variance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>max_y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max_y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"variable y\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> bar_label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"横着画图\"><a class=\"anchor\" href=\"#横着画图\">#</a> 横着画图</h2><p><img data-src=\"02.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 生成 [1 2 3] 数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bar_labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 返回 [0 1 2] 数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>y_pos <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 返回 [0, 1, 2] 数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>y_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y_pos<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 横着画图</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>plt<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span>y_pos<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>plt<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span>y_pos<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"斜向上图\"><a class=\"anchor\" href=\"#斜向上图\">#</a> 斜向上图</h2><p><img data-src=\"03.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>y1 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>y2 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>y_mean <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.5</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ax<span class=\"token punctuation\">.</span>fill_between<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y_mean<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"误差棒\"><a class=\"anchor\" href=\"#误差棒\">#</a> 误差棒</h2><p><img data-src=\"04.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>variance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bar_label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bar1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bar_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># yerr: 误差范围</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># alpha: 透明程度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> yerr<span class=\"token operator\">=</span>variance<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>max_y <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">,</span> variance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>max_y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max_y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'variable y'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> bar_label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"分组条形图\"><a class=\"anchor\" href=\"#分组条形图\">#</a> 分组条形图</h2><p><img data-src=\"05.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>green_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>blue_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>red_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'group 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'group 2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'group 3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>green_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>width <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bar0 <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> green_data<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 画最小值所在位置的虚线</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>green_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p <span class=\"token operator\">+</span> width <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        blue_data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        width<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>blue_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        red_data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        width<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>red_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test Multi Group\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Group\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Data\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'05.png'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"color-map\"><a class=\"anchor\" href=\"#color-map\">#</a> color map</h2><p><img data-src=\"06.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>colors <span class=\"token keyword\">as</span> col</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>cm <span class=\"token keyword\">as</span> cm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cmap1 <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>ScalarMappable<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    col<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cmap2 <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>ScalarMappable<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>cmap1<span class=\"token punctuation\">.</span>to_rgba<span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>cmap2<span class=\"token punctuation\">.</span>to_rgba<span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"matplotlib/06.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"条形图填充\"><a class=\"anchor\" href=\"#条形图填充\">#</a> 条形图填充</h2><p><img data-src=\"07.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>patterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>gca<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mean_value <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>patterns<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mean_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bars <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_value<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> bar<span class=\"token punctuation\">,</span> pattern <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>bars<span class=\"token punctuation\">,</span> patterns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    bar<span class=\"token punctuation\">.</span>set_hatch<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"matplotlib/07.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "MLearning",
                "matplotlib",
                "MLearning"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/union/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/union/",
            "title": "c union",
            "date_published": "2021-06-21T12:31:55.035Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h2><ul><li>和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体所有的成员都占用同一块存储空间</li><li>和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量<br>定义共用体类型格式:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> 共用体名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    数据类型 属性名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    数据类型 属性名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定义共用体类型变量格式:</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> 共用体名 共用体变量名称<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>(特点：由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响){.red}</strong></p><p>示例:</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> Test<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">union</span> Test t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(p) = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.age = %i\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 33</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    t<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.ch = %c\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.age = %i\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 97</span></pre></td></tr></table></figure><h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2><ol><li>通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体的话就简单了，定义几种格式的包，收到包之后就可以根据包的格式取出数据。</li><li>节约内存。如果有 2 个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。</li><li>某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。</li></ol><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/typedef/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/typedef/",
            "title": "c typedef",
            "date_published": "2021-06-21T12:31:55.034Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"typedef关键字\"><a class=\"anchor\" href=\"#typedef关键字\">#</a> typedef 关键字</h2><p>C 语言不仅􏰀供了丰富的数据类型，而且还允许由用户自己定义类型说明符，也就是说允许由用户为数据类型取 “别名”。<br><code>格式: typedef 原类型名 新类型名;</code></p><ul><li>其中原类型名中含有定义部分，新类型名一般用大写表示，以便于区别.</li><li>有时也可用宏定义来代替 typedef 的功能，但是宏定义是由预处理完成的，而 typedef 则是在编译 时完成的，后者更为灵活方便.</li></ul><h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Integer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> Integer MyInteger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MyInteger a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 int a;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> String<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">String</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组类型\"><a class=\"anchor\" href=\"#数组类型\">#</a> 数组类型</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> NAME<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示 NAME 是字符数组类型，数组长度为 20。然后可用 NAME 说明变量，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 char a [20];</span></pre></td></tr></table></figure><h2 id=\"结构体类型\"><a class=\"anchor\" href=\"#结构体类型\">#</a> 结构体类型</h2><div class=\"tab\" data-id=\"id01\" data-title=\"第一种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id01\" data-title=\"第二种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id01\" data-title=\"第三种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2><div class=\"tab\" data-id=\"id02\" data-title=\"第一种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id02\" data-title=\"第二种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id02\" data-title=\"第三种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2><ul><li>typedef 与指向结构体的指针</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个结构体并起别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Point<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 起别名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> Point <span class=\"token operator\">*</span>PP<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>typedef 与指向函数的指针</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个 sum 函数，计算 a 跟 b 的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d + %d = %d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>MySum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义一个指向 sum 函数的指针变量 p</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MySum p <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/static/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/static/",
            "title": "c static",
            "date_published": "2021-06-21T12:31:55.029Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"static对局部变量作用\"><a class=\"anchor\" href=\"#static对局部变量作用\">#</a> static 对局部变量作用</h2><ul><li>延长局部变量的生命周期，从程序启动到程序退出，但是它并没有改变变量的作用域</li><li>定义变量的代码在整个程序运行期间仅仅会执行一次</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 如果不加 static 输出 1 1 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 如果添加 static 输出 1 2 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"static对全局变量作用\"><a class=\"anchor\" href=\"#static对全局变量作用\">#</a> static 对全局变量作用</h2><ul><li>外部变量：可以在其他文件中访问的变量，默认所有全局变量都是外部变量</li><li>默认情况下多个同名的全局变量共享一块空间，这样会导致全局变量污染问题</li><li>如果想让某个全局变量只在某个文件中使用，并且不和其他文件中同名全局变量共享同一块存储空间，那么就可以使用 static</li></ul><ol><li>不用 static 关键字</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/***ds.c***/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// A 文件中的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和 B 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ds.c中的 num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/***main.c***/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// B 文件中的代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ds.h\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和 A 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//test 中输出 666</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2.</span> 加上<span class=\"token keyword\">static</span>关键字</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>``` c</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/***ds.c***/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// A 文件中的代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不和 B 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ds.c中的 num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/***main.c***/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// B 文件中的代码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ds.h\"</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不和 A 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//test 中输出 0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"static对函数作用\"><a class=\"anchor\" href=\"#static对函数作用\">#</a> static 对函数作用</h2><p>默认情况下所有的函数都是外部函数.<br>内部函数：只能在本文件中访问的函数.</p><ul><li>声明一个内部函数</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>定义一个内部函数</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\"><p>如果只有函数声明添加了 static 与 extern, 而定义中没有添加 static 与 extern, 那么无效</p></div><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/memoryManagement/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/memoryManagement/",
            "title": "c Memory Management",
            "date_published": "2021-06-21T12:31:55.028Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"进程空间图示\"><a class=\"anchor\" href=\"#进程空间图示\">#</a> 进程空间图示</h2><p><img data-src=\"01.png\" alt=\"\"></p><h2 id=\"栈内存stack\"><a class=\"anchor\" href=\"#栈内存stack\">#</a> 栈内存 (Stack)</h2><ul><li>栈的最大尺寸固定，超出则引起栈溢出.</li><li>局部变量过多，过大 或 递归层数太多等就会导致栈溢出</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ages<span class=\"token punctuation\">[</span><span class=\"token number\">1024000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 程序会崩溃，栈溢出</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 存储在栈中，内存地址从大到小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &amp;a = 000000000061FE1C</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;b = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &amp;b = 000000000061FE18</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"堆内存heap\"><a class=\"anchor\" href=\"#堆内存heap\">#</a> 堆内存 (Heap)</h2><ul><li>堆内存可以存放任意类型的数据，但需要自己申请与释放</li><li>堆大小，想像中的无穷大，但实际使用中，受限于实际内存的大小和内存是否连续性</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10240</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不一定会崩溃</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 存储在栈中，内存地址从小到大，申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 = %x\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// p1 = 9b4a10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 = %x\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// p1 + 1 = 9b4a14</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2 = %x\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// p2 = 9b4a50</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"malloc函数\"><a class=\"anchor\" href=\"#malloc函数\">#</a> malloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void * malloc(size_t _Size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">申请堆内存空间并返回，所申请的空间并未初始化。</td></tr><tr><td style=\"text-align:left\">常见的初始化方法是</td><td style=\"text-align:left\">memset 字节初始化。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t _size 表示要申请的字符数</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void * 成功返回非空指针指向申请的空间，失败返回 NULL</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * malloc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 第一个参数：需要申请多少个字节空间</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 返回值类型: void *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */ </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存垃圾数据，如: -1163005939</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 第一个参数：需要初始化的内存地址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 第二个初始：需要初始化的值</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 第三个参数：需要初始化对少个字节</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */ </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对申请的内存空间进行初始化</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"free函数\"><a class=\"anchor\" href=\"#free函数\">#</a> free 函数</h2><div class=\"note info\"><p>注意：通过 malloc 申请的存储空间一定要释放，所以 malloc 和 free 函数总是成对出现</p></div><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void free(void *p);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">释放申请的堆内存</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">void* p 指向手动申请的空间</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void 无返回</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 2. 初始化 4 个字节存储空间为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 3. 释放申请的存储空间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"calloc函数\"><a class=\"anchor\" href=\"#calloc函数\">#</a> calloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void *calloc(size_t nmemb, size_t size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">申请堆内存空间并返回，所申请的空间，自动清零</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t nmemb 所需内存单元数量</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t size 内存单元字节数量</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void * 成功返回非空指针指向申请的空间，失败返回 NULL</td></tr></tbody></table><div class=\"note info\"><p><code>malloc</code> 与 <code>calloc</code> 的简单区别为 <code>malloc</code> 申请空间后不会自动清零，而 <code>calloc</code> 会自动清零.</p></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // 1. 申请 3 块 4 个字节存储空间</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    int *p = (int *) malloc (sizeof (int) * 3);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    // 2. 使用申请好的 3 块存储空间</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p [0] = 1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p [1] = 3;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p [2] = 5;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    printf (\"p [0] = % i\\n\", p [0]);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    printf (\"p [1] = % i\\n\", p [1]);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    printf (\"p [2] = % i\\n\", p [2]);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    // 3. 释放空间</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    free (p);</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 3 块 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的 3 块存储空间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[0] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[0] = 1, address = 994a10</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[1] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[1] = 3, address = 994a14</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[2] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[2] = 5, address = 994a18</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"realloc函数\"><a class=\"anchor\" href=\"#realloc函数\">#</a> realloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void *realloc(void *ptr, size_t size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">扩容 (缩小) 原有内存的大小。通常用于扩容，缩小会会导致内存缩去的部分数据丢失.</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">void * ptr 表示待扩容 (缩小) 的指针， ptr 为之前用 malloc 或者 calloc 分配的内存地址.</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t size 表示扩容 (缩小) 后内存的大小.</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void* 成功返回非空指针指向申请的空间，失败返回 NULL.</td></tr></tbody></table><ul><li>若参数 ptr==NULL，则该函数等同于 malloc</li><li>返回的指针，可能与 ptr 的值相同，也有可能不同。若相同，则说明在原空间后面申请，否则，则可能后续空间不足，重新申请的新的连续空间，原数据拷贝到新空间， 原有空间自动释放</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时等同于 malloc</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p = %i\\n\"</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 0000000000764A10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 如果能在传入存储空间地址后面扩容，返回传入存储空间地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果不能在传入存储空间地址后面扩容，返回一个新的存储空间地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 0000000000764A10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的空间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p = %i\\n\"</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 666</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/enum/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/enum/",
            "title": "c enum",
            "date_published": "2021-06-21T12:31:55.026Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"枚举类型\"><a class=\"anchor\" href=\"#枚举类型\">#</a> 枚举类型</h2><ul><li>在实际问题中，有些变量的取值被限定在一个有限的范围内。例如，一个星期内只有七天，一年只有十二个月，一个班每周有六门课程等等。如果把这些量说明为整型，字符型或其它类型 显然是不妥当的。</li><li>C 语言提供了一种称为 “枚举” 的类型。在 “枚举” 类型的定义中列举出所有可能的取值，被说明为该 “枚举” 类型的变量取值不能超过定义的范围。</li><li>该说明的是，枚举类型是一种基本数据类型，而不是一种构造类型，因为它不能再分解为任何基本类型。</li></ul><h2 id=\"枚举类型定义\"><a class=\"anchor\" href=\"#枚举类型定义\">#</a> 枚举类型定义</h2><ul><li>格式:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span>　枚举名　<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    枚举元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    枚举元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>示例:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示一年四季</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"枚举变量\"><a class=\"anchor\" href=\"#枚举变量\">#</a> 枚举变量</h2><ol><li>先定义枚举类型，再定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义枚举类型的同时定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>省略枚举名称，直接定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"赋值和使用\"><a class=\"anchor\" href=\"#赋值和使用\">#</a> 赋值和使用</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s <span class=\"token operator\">=</span> Spring<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 s = 0;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 s = winter;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">case</span> Autumn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今天是Autumn.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 也就是说 spring 的值为 0，summer 的值为 1，autumn 的值为 2，winter 的值为 3</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 也就是说 spring 的值为 9，summer 的值为 10，autumn 的值为 11，winter 的值为 12</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/define/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/define/",
            "title": "c define",
            "date_published": "2021-06-21T12:31:55.025Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"预处理指令概念\"><a class=\"anchor\" href=\"#预处理指令概念\">#</a> 预处理指令概念</h2><ul><li>为了区分预处理指令和一般的 C 语句，所有预处理指令都以符号 “#” 开头，并且结尾不用分号.</li><li>预处理指令可以出现在程序的任何位置，它的作用范围是从它出现的位置到文件尾。习惯上我们尽可能将预处理指令写在源程序开头，这种情况下，它的作用范围就是整个源程序文件.</li></ul><h2 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h2><ul><li>被定义为 <code>宏</code> 的标识符称为 <code>宏名</code> 。在编译预处理时，对程序中所有出现的 <code>宏名</code> ，都用宏定义中的字符串去代换，这称为 <code>宏代换</code> 或 <code>宏展开</code> .</li><li><code>宏定义</code> 是由源程序中的宏定义命令完成的. <code>宏代换</code> 是由预处理程序自动完成的。在 C 语言中， <code>宏</code> 分为有参数和无参数两种.</li><li><code>宏名</code> 一般用大写字母，以便与变量名区别开来，但用小写也没有语法错误</li></ul><h2 id=\"不带参数的宏定义\"><a class=\"anchor\" href=\"#不带参数的宏定义\">#</a> 不带参数的宏定义</h2><p>格式: <code>#define 标识符 字符串</code></p><ul><li>其中的 <code>#</code> 表示这是一条预处理命令。凡是以 <code>#</code> 开头的均为预处理命令。</li><li><code>define</code> 为宏定义命令. <code>标识符</code> 为所定义的宏名。</li><li><code>字符串</code> 可以是常数、表达式、格式串等。</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 源程序中所有的宏名 PI 在编译预处理的时候都会被 3.14 所代替</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 根据圆的半径计 radius 算周长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">girth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> PI <span class=\"token operator\">*</span>radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> <span class=\"token function\">girth</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周长为：%f\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li><code>宏名</code> 的有效范围是从定义位置到文件结束。如果需要终止宏定义的作用域，可以用 <code>#undef</code> 命令</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">PI</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>定义一个宏时可以引用已经定义的宏名</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">R</span>  <span class=\"token expression\"><span class=\"token number\">3.0</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L</span>  <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>PI<span class=\"token operator\">*</span>R</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">S</span>  <span class=\"token expression\">PI<span class=\"token operator\">*</span>R<span class=\"token operator\">*</span>R</span></span></pre></td></tr></table></figure><ul><li>可用宏定义表示数据类型，使书写方便</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">String</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"带参数宏定义\"><a class=\"anchor\" href=\"#带参数宏定义\">#</a> 带参数宏定义</h2><p>C 语言允许宏带有参数。在宏定义中的参数称为形式参数，在宏调用中的参数称为实际参数。对带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参</p><ul><li><code>格式: #define 宏名(形参表) 字符串</code></li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第 1 行中定义了一个带有 2 个参数的宏 average，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">average</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 第 4 行其实会被替换成：int a = (10 + 4)/2;，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 输出结果为：7 是不是感觉这个宏有点像函数呢？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均值：%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol><li>宏名和参数列表之间不能有空格，否则空格后面的所有字符串都作为替换的字符串.</li><li>带参数的宏在展开时，只作简单的字符和参数的替换，不进行任何计算操作。所以在定义宏时，一般用一个小括号括住字符串的参数.</li><li>计算结果最好也用括号括起来</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 计算结果用括号括起来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pow</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 代码被替换为:int b = ((10) * (10) ) / ( (2) * (2) );</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 简化之后：int b = (10 * 10) / (2 *2);，最后输出结果：25</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"条件编译\"><a class=\"anchor\" href=\"#条件编译\">#</a> 条件编译</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SCORE</span> <span class=\"token expression\"><span class=\"token number\">67</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SCORE <span class=\"token operator\">></span> <span class=\"token number\">90</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SCORE <span class=\"token operator\">></span> <span class=\"token number\">60</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/const/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/const/",
            "title": "c const",
            "date_published": "2021-06-21T12:31:55.023Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"const关键字\"><a class=\"anchor\" href=\"#const关键字\">#</a> const 关键字</h2><ol><li>可以定义 const 常量，具有不可变性</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Max<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> Array<span class=\"token punctuation\">[</span>Max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 编译器就会知道 i 是一个常量，不允许修改；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。 还是上面的例子，如果在 函数体内修改了 i, 编译器就会报错；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用const\"><a class=\"anchor\" href=\"#使用const\">#</a> 使用 const</h2><ol><li>修饰一般常量一般常量是指简单类型的常量。这种常量在定义时，修饰符 const 可以用在类型说明符前，也可以用在类型说明符后</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 或 <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然，我们可以偷梁换柱进行更新：通过强制类型转换，将地址赋给变量，再作修改即可以改变 const 常量值.</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const 对于基本数据类型，无论写在左边还是右边，变量中的值不能改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//a = 666; // 直接修改会报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 偷梁换柱，利用指针指向变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 利用指针间接修改变量中的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>修饰常数组 (值不能够再改变了) 定义或说明一个常数组可采用如下格式</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><ol start=\"3\"><li><p>修饰函数的常参数 const 修饰符也可以修饰函数的传递参数，格式如下:void Fun (const int Var); 告诉编译器 Var 在函数体中的无法改变，从而防止了使用者的一些无 意的或错误的修改</p></li><li><p>修饰函数的返回值: const 修饰符也可以修饰函数的返回值，是返回值不可被改变，格式如下</p></li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> MyClass <span class=\"token function\">Fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\"><li>修饰常指针</li></ol><ul><li>const int *A; //const 修饰指针，A 可变，A 指向的值不能被修改</li><li>int const *A; //const 修饰指向的对象，A 可变，A 指向的对象不可变</li><li>int *const A; //const 修饰指针 A, A 不可变，A 指向的对象可变</li><li>const int *const A;// 指针 A 和 A 指向的对象都不可变</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/16/language/c/struct/",
            "url": "https://kung-fu-master.github.io/2021/06/16/language/c/struct/",
            "title": "c struct",
            "date_published": "2021-06-16T12:57:21.817Z",
            "content_html": "<!-- build time:Tue Jun 22 2021 20:46:38 GMT+0800 (中国标准时间) --><h2 id=\"定义与初始化\"><a class=\"anchor\" href=\"#定义与初始化\">#</a> 定义与初始化</h2><p>格式: <code>struct 结构体名 结构体变量名;</code></p><ol><li>先定义结构体类型，再定义变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义结构体类型的同时定义变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>匿名结构体定义结构体变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>第三种方法与第二种方法的区别在于，第三种方法中省去了结构体类型名称，而直接给出结构变量，这种结构体最大的问题是结构体类型不能复用.</p></div><h2 id=\"结构体变量初始化\"><a class=\"anchor\" href=\"#结构体变量初始化\">#</a> 结构体变量初始化</h2><ol><li>定义的同时按顺序初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义的同时不按顺序初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>先定义后逐个初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\"><li>先定义后一次性初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"成员访问\"><a class=\"anchor\" href=\"#成员访问\">#</a> 成员访问</h2><p>一般对结构体变量的操作是以成员为单位进行的，引用的一般形式为： <code>结构体变量名.成员名</code></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 访问 stu 的 age 成员</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = %d\"</span><span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h2><p>定义局部结构体会 屏蔽 全局同名的结构体.</p><h2 id=\"结构体数组\"><a class=\"anchor\" href=\"#结构体数组\">#</a> 结构体数组</h2><p>结构体数组和普通数组并无太大差异，只不过是数组中的元素都是结构体而已<br>格式: <code>struct 结构体类型名称 数组名称[元素个数]</code></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol><li>定义同时初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>先定义后初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"结构体指针\"><a class=\"anchor\" href=\"#结构体指针\">#</a> 结构体指针</h2><p>一个指针变量当用来指向一个结构体变量时，称之为结构体指针变量<br>格式: <code>struct 结构名 *结构指针变量名</code></p><p>通过结构体指针访问结构体成员，可以通过以下两种方式</p><ul><li>(* 结构指针变量). 成员名</li><li>结构指针变量 -&gt; 成员名 (用熟)</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个结构体变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>“lnj\"<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义一个指向结构体的指针变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 指向结构体变量 stu</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方式 1：结构体变量名。成员名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 方式 2：(* 指针变量名). 成员名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 方式 3：指针变量名 -> 成员名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>(* 结构指针变量) 两侧的括号不可少，因为成员符 <code>.</code> 的优先级高于 <code>*</code> .<br>如去掉括号写作 <code>*pstu.num</code> 则等效于 <code>*(pstu.num)</code> , 这样，意义就完全不对了.</p></div><h2 id=\"结构体内存分析\"><a class=\"anchor\" href=\"#结构体内存分析\">#</a> 结构体内存分析</h2><ul><li><code>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</code></li><li><code>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</code></li><li><code>结构体变量占用的内存空间永远是所有成员中占用内存最大成员的倍数(对齐问题)</code></li></ul><div class=\"note info\"><p>多实际的计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是 某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数 (alignment modulus).</p><p>这种强制的要求一来简化了处理器与内存之间传输系统的设计，二来可以提升读取数据的速度。比如这么一种处理器，它每次读写内存的时候都从某个 8 倍数的地址开始，一次读出或写入 8 个字节的数据，假如软件能 保证 double 类型的数据都从 8 倍数地址开始，那么读或写一个 double 类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的 8 字节 内存块上.</p></div><h3 id=\"存储空间大小分析\"><a class=\"anchor\" href=\"#存储空间大小分析\">#</a> 存储空间大小分析</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span></pre></td></tr></table></figure><ul><li>占用内存最大属性是 score, 占 8 个字节，所以第一次计算机会先给结构体分配 8 个字节.</li><li>将第一次分配的 8 个字节分配给 age4 个，分配给 ch1 个，还剩下 3 个字节</li><li>当需要分配给 score 时，发现只剩下 3 个字节，所以会再次开辟 8 个字节存储空间</li><li>一共开辟了两次 8 个字节空间，所以最终 p 占用 16 个字节</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><ul><li>占用内存最大属性是 score, 占 8 个字节，所以第一次计算机会先给结构体分配 8 个字节.</li><li>将第一次分配的 8 个字节分配给 age4 个，还剩下 4 个字节</li><li>当需要分配给 score 时，发现只剩下 4 个字节，所以会再次开辟 8 个字节存储空间</li><li>将新分配的 8 个字节分配给 score, 还剩下 0 个字节</li><li>当需要分配给 ch 时，发现上一次分配的已经没有了，所以会再次开辟 8 个字节存储空间</li><li>一共开辟了 3 次 8 个字节空间，所以最终 p 占用 24 个字节</li></ul><h2 id=\"结构体嵌套\"><a class=\"anchor\" href=\"#结构体嵌套\">#</a> 结构体嵌套</h2><p><img data-src=\"01.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span>  <span class=\"token class-name\">stu</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> birthday<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Float score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info 注意\"><p>结构体不可以嵌套自己变量，可以嵌套指向自己这种类型的指针</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h3 id=\"对嵌套结构体成员的访问\"><a class=\"anchor\" href=\"#对嵌套结构体成员的访问\">#</a> 对嵌套结构体成员的访问</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> birthday<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1986</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>month <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"结构体值拷贝\"><a class=\"anchor\" href=\"#结构体值拷贝\">#</a> 结构体值拷贝</h2><ol><li>结构体虽然是构造类型，但是结构体之间赋值是值拷贝，而不是地址传递</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 p2 不会影响 p1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  zs</span></pre></td></tr></table></figure><ol start=\"2\"><li>所以结构体变量作为函数形参时也是值传递，在函数内修改形参，不会影响外界实参，除非以结构体指针变量作为函数形参地址传递，才会影响外界实参.</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.age = %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 18</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2->name = %s\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// zs</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2->age = %d\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 20</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    per<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    per<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    per<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    per<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/16/language/c/sorting_algorithm/",
            "url": "https://kung-fu-master.github.io/2021/06/16/language/c/sorting_algorithm/",
            "title": "c sort",
            "date_published": "2021-06-16T12:57:21.816Z",
            "content_html": "<!-- build time:Wed Jun 16 2021 20:58:20 GMT+0800 (中国标准时间) --><h2 id=\"总览\"><a class=\"anchor\" href=\"#总览\">#</a> 总览</h2><p>插，冒，选，希，快，堆，并，基；</p><p>插冒 (稳定) 选希快堆 (不稳定) 并基 (稳定)</p><p><img data-src=\"01.png\" alt=\"\"></p><ol><li>稳定性</li></ol><ul><li><p>归并排序、冒泡排序、插入排序、基数排序是稳定的</p></li><li><p>选择排序、快速排序、希尔排序、堆排序是不稳定的</p></li></ul><ol start=\"2\"><li>时间复杂度</li></ol><p>最基础的四个算法：冒泡、选择、插入、快排中，快排的时间复杂度最小 O (n*log2n)，其他都是 O（n2）</p><table><thead><tr><th style=\"text-align:center\">排序方法</th><th style=\"text-align:left\">最好时间</th><th style=\"text-align:center\">平均时间</th><th style=\"text-align:center\">最坏时间</th><th style=\"text-align:center\">辅助存储</th><th style=\"text-align:center\">稳定性</th><th style=\"text-align:center\">备注</th></tr></thead><tbody><tr><td style=\"text-align:center\">插入排序</td><td style=\"text-align:left\">O(n)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">大部分已排序时较好</td></tr><tr><td style=\"text-align:center\">冒泡排序</td><td style=\"text-align:left\">O(n)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">n 小时较好</td></tr><tr><td style=\"text-align:center\">选择排序</td><td style=\"text-align:left\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 小时较好</td></tr><tr><td style=\"text-align:center\">希尔排序</td><td style=\"text-align:left\">O(n^1.3)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td></tr><tr><td style=\"text-align:center\">快速排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(logn)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">堆排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">归并排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">基数排序</td><td style=\"text-align:left\">O(kn)</td><td style=\"text-align:center\">O(kn)</td><td style=\"text-align:center\">O(kn)</td><td style=\"text-align:center\">O(n)</td><td style=\"text-align:center\">稳定</td></tr></tbody></table><h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.</p><p><img data-src=\"insert-sort.gif\" alt=\"\"></p><h3 id=\"排序思路\"><a class=\"anchor\" href=\"#排序思路\">#</a> 排序思路</h3><p>假设按照升序排序</p><ol><li>从索引为 1 的元素开始向前比较，一旦前面一个元素大于自己就与前面的元素交换位置</li><li>直到没有可比较元素或者前面的元素小于自己的时候，就已经将自己交换到了当前空出来的位置</li></ol><h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 0. 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. 从第一个元素而不是第 0 个开始依次取出所有用于比较元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 2. 遍历取出前面元素进行比较</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 3. 如果前面一个元素大于当前元素，就交换位置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2><p>冒泡排序 (Bubble Sort) 是一种简单的排序算法。它重复 地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端.</p><p><img data-src=\"002.gif\" alt=\"\"></p><h3 id=\"排序思路-2\"><a class=\"anchor\" href=\"#排序思路-2\">#</a> 排序思路:</h3><ul><li>假设按照升序排序</li><li>1. 从第 0 个元素开始，每次都用相邻两个元素进行比较</li><li>2. 一旦发现后面一个元素小于前面一个元素就交换位置</li><li>3. 经过一轮比较之后最后一个元素就是最大值</li><li>4. 排除最后一个元素，以此类推，每次比较完成之后最大值都会出现再被比较所有元素的最后</li><li>直到当前元素没有可比较的元素，排序完成</li></ul><h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2><p>选择排序 (Selection sort) 是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕.</p><p><img data-src=\"001.gif\" alt=\"\"></p><h3 id=\"排序思路-3\"><a class=\"anchor\" href=\"#排序思路-3\">#</a> 排序思路</h3><ul><li>假设按照升序排序</li><li>1. 用第 0 个元素和后面所有元素依次比较</li><li>2. 判断第 0 个元素是否大于当前被比较元素，一旦小于就交换位置</li><li>3. 第 0 个元素和后续所有元素比较完成后，第 0 个元素就是最小值</li><li>4. 排除第 0 个元素，用第 1 个元素重复 1~3 操作，比较完成后第 1 个元素就是倒数第二小的值</li><li>以此类推，直到当前元素没有可比较的元素，排序完成</li></ul><h3 id=\"代码实现-3\"><a class=\"anchor\" href=\"#代码实现-3\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指针 (地址) 传递</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h2><p>1959 年 Shell 发明，第一个突破 O (n2) 的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序.</p><p><img data-src=\"shell-sort.gif\" alt=\"\"></p><p><img data-src=\"shell-01.JPG\" alt=\"\"></p><p><img data-src=\"shell-02.JPG\" alt=\"\"></p><p><img data-src=\"shell-03.JPG\" alt=\"\"></p><h3 id=\"排序思路-4\"><a class=\"anchor\" href=\"#排序思路-4\">#</a> 排序思路</h3><ol><li>希尔排序可以理解为插入排序的升级版，先将待排序数组按照指定步长划分为几个小数组</li><li>利用插入排序对小数组进行排序，然后将几个排序的小数组重新合并为原始数组</li><li>重复上述操作，直到步长为 1 时，再利用插入排序排序即可</li></ol><h3 id=\"代码实现-4\"><a class=\"anchor\" href=\"#代码实现-4\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 0. 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. 计算步长</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 1. 从第一个 (而非第 0 个) 元素 (gap 处元素) 开始往后依次取出待排序数组的所有元素，与各自所在当前组前面的元素进行简单插入排序.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 从 gap 处按顺序取待排序数组元素排序，而不是排完一组元素后再排另外一组元素，跟上图演示有些不一样.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 2. 遍历取出前面元素进行比较</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 3. 如果前面一个元素大于当前元素，就交换位置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 4. 继续往当前组的前一元素移动</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                j<span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>            </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 每个小数组排序完成，重新计算步长</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        gap <span class=\"token operator\">=</span> gap <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"计数排序counting-sort\"><a class=\"anchor\" href=\"#计数排序counting-sort\">#</a> 计数排序（Counting Sort）</h2><p>计数排序是一个非基于比较的排序算法，该算法于 1954 年由 Harold H. Seward 提出。它的优势在于在 <code>对一定范围内的整数排序</code> 时，快于任何比较排序算法</p><h3 id=\"排序思路-5\"><a class=\"anchor\" href=\"#排序思路-5\">#</a> 排序思路:</h3><ul><li>1. 找出待排序数组最大值</li><li>2. 定义一个索引最大值为待排序数组最大值的数组</li><li>3. 遍历待排序数组，将待排序数组遍历到的值作新数组索引</li><li>4. 在新数组对应索引存储值原有基础上 + 1</li></ul><p><img data-src=\"001.png\" alt=\"\"></p><h3 id=\"简单代码实现\"><a class=\"anchor\" href=\"#简单代码实现\">#</a> 简单代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 用于排序数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> newNums<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 编列待排序数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 去除待排序数组当前值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 将待排序数组当前值作为排序数组索引</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 将用于排序数组对应索引原有值 + 1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        newNums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newNums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 计算排序数组长度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 输出排序数组索引， 就是排序之后的结果</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 只有所在索引值大于 0，说明此索引值是原待排序数组中的值，可以输出.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> newNums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/11/language/c/two-dimensional-array/",
            "url": "https://kung-fu-master.github.io/2021/06/11/language/c/two-dimensional-array/",
            "title": "Two dimensional array of c language",
            "date_published": "2021-06-11T13:39:32.813Z",
            "content_html": "<!-- build time:Fri Jun 11 2021 21:45:53 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OC9hcnRpY2xlL2RldGFpbHMvMTE3NjU2ODEwP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19mZWVkX3YyLm5vbmUtdGFzay1ibG9nLWhvdF9yYW5rX2JvdHRvbWluZy04LnBjX3BlcnNvbnJlY2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX2ZlZWRfdjIubm9uZS10YXNrLWJsb2ctaG90X3JhbmtfYm90dG9taW5nLTgucGNfcGVyc29ucmVj\">https://blog.csdn.net/weixin_44617968/article/details/117656810?utm_medium=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrec</span></p><h2 id=\"字符串的基本概念\"><a class=\"anchor\" href=\"#字符串的基本概念\">#</a> 字符串的基本概念</h2><p>字符串是位于双引号中的字符序列，在内存中以 <code>\\0</code> 结束，所占字节比实际多一个.<br><img data-src=\"001.png\" alt=\"\"><br>在 C 语言中没有专门的字符串变量，通常用一个字符数组来存放一个字符串.</p><ul><li>当把一个字符串存入一个数组时，会把结束符 <code>\\0</code> 存入数组，并以此作为该字符串是否结束的标志.</li><li>有了 <code>\\0</code> 标志后，就不必再用字符数组的长度来判断字符串的长度了.</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// \"中间不能包含 \\0\", 因为 `\\0` 是字符串的结束标志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \\0 的作用：字符串结束的标志</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\\0ool\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>输出结果<span class=\"token operator\">:</span> c</pre></td></tr></table></figure><h2 id=\"字符串输出\"><a class=\"anchor\" href=\"#字符串输出\">#</a> 字符串输出</h2><ul><li><code>%s</code> 的本质就是根据传入的 name 的地址逐个去取数组中的元素然后输出，直到遇到 <code>\\0</code> 位置</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> chs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3><ol><li><code>\\0</code> 引发的脏读问题</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> name2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name2 = %s\\n\"</span><span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果: lnjcool</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实际开发中这样定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> name2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>对一个字符串数组，如果不做初始化赋值，必须指定数组长度</li><li>ch 最多存放由 9 个字符构成的字符串，其中最后一个字符的位置要留给字符串的结尾标示‘\\0’</li><li>当用 scanf 函数输入字符串时，字符串中不能含有空格，否则将以空格作为串的结束符</li></ul><h2 id=\"二维数组的初始化\"><a class=\"anchor\" href=\"#二维数组的初始化\">#</a> 二维数组的初始化</h2><p>二维数的初始化可分为两种:</p><ul><li>定义的同时初始化</li><li>先定义后初始化</li></ul><h3 id=\"定义的同时初始化\"><a class=\"anchor\" href=\"#定义的同时初始化\">#</a> 定义的同时初始化</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按行分段赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 按行连续赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">92</span><span class=\"token punctuation\">,</span><span class=\"token number\">61</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">71</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 完全初始化，省略第一维的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 部分初始化，可以省略第一维的长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 指定元素的初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>注意：有些人可能想不明白，为什么可以省略行数，但不可以省略列数。也有人可能会问，可不可以只指定行数，但是省略列数？其实这个问题很简单，如果我们这样写：<br>int a [2][] = {1, 2, 3, 4, 5, 6}; // 错误写法<br>大家都知道，二维数组会先存放第 1 行的元素，由于不确定列数，也就是不确定第 1 行要存放多少个元素，所以这里会产生很多种情况，可能 1、2 是属于第 1 行的，也可能 1、2、3、4 是第一行的，甚至 1、2、3、4、5、6 全部都是属于第 1 行的</p></div><h3 id=\"先定义后初始化\"><a class=\"anchor\" href=\"#先定义后初始化\">#</a> 先定义后初始化</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">92</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">61</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">71</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"作为函数参数注意点\"><a class=\"anchor\" href=\"#作为函数参数注意点\">#</a> 作为函数参数注意点</h2><ul><li>形参写法</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>二维数组作为函数参数，在被调函数中不能获得其有多少行，需要通过参数传入</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维数组长度，输出 8, 一维数组 (字符串) 在内存中以 “\\0” 结束，所占字节比实际多一个</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"row = %zu\\n\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>二维数组作为函数参数，在被调函数中可以计算出二维数组有多少列</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">size_t</span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col = %zd\\n\"</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"值传递\"><a class=\"anchor\" href=\"#值传递\">#</a> 值传递</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是基本类型在函数中修改形参不会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"地址传递\"><a class=\"anchor\" href=\"#地址传递\">#</a> 地址传递</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是数组类型在函数中修改形参会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是数组类型在函数中修改形参会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/11/language/c/pointer/",
            "url": "https://kung-fu-master.github.io/2021/06/11/language/c/pointer/",
            "title": "c pointer",
            "date_published": "2021-06-11T13:39:32.792Z",
            "content_html": "<!-- build time:Wed Jun 16 2021 20:58:20 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OC9hcnRpY2xlL2RldGFpbHMvMTE3NjU2ODEwP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19mZWVkX3YyLm5vbmUtdGFzay1ibG9nLWhvdF9yYW5rX2JvdHRvbWluZy04LnBjX3BlcnNvbnJlY2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX2ZlZWRfdjIubm9uZS10YXNrLWJsb2ctaG90X3JhbmtfYm90dG9taW5nLTgucGNfcGVyc29ucmVj\">https://blog.csdn.net/weixin_44617968/article/details/117656810?utm_medium=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrec</span></p><h2 id=\"定义初始化\"><a class=\"anchor\" href=\"#定义初始化\">#</a> 定义初始化</h2><p>C 语言中提供了 * 来定义指针变量和访问指针变量指向的内存存储空间.</p><ul><li>在定义变量的时候 * 是一个类型说明符，说明定义的这个变量是一个指针变量</li><li>在不是定义变量的时候 * 是一个操作符，代表访问指针所指向存储空间<br>C 语言中提供了地址运算符 &amp; 来表示变量的地址。其一般形式为: &amp; 变量名.</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义指针变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问指针变量</span></pre></td></tr></table></figure><h2 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h2><p>指针没有初始化里面是一个垃圾值，这时候的指针是一个野指针.</p><p><img data-src=\"001.png\" alt=\"\"></p><ul><li>野指针可能会导致程序崩溃</li><li>野指针访问你不该访问数据</li><li>所以指针必须初始化才可以访问其所指向存储区域</li></ul><h2 id=\"二级指针\"><a class=\"anchor\" href=\"#二级指针\">#</a> 二级指针</h2><p>如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。也称为 “二级指针”.</p><p><img data-src=\"Secondary-pointer.png\" alt=\"\"></p><h2 id=\"数组指针\"><a class=\"anchor\" href=\"#数组指针\">#</a> 数组指针</h2><p>只要一个指针变量保存了数组元素的地址，我们就称之为数组元素指针.<br><img data-src=\"array-pointer.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>p <span class=\"token operator\">%</span>p”<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果：0x1100, 0x1100</span></pre></td></tr></table></figure><div class=\"note info\"><p>注意：数组名 a 不代表整个数组，只代表数组首元素的地址。<br>“p=a;” 的作用是 “把 a 数组的首元素的地址赋给指针变量 p”, 而不是 “把数组 a 各元素的值赋给 p”</p></div><h3 id=\"访问数组元素\"><a class=\"anchor\" href=\"#访问数组元素\">#</a> 访问数组元素</h3><p>访问数组元素，可用下面两种方法:</p><ul><li>下标法，如 a [i] 形式</li><li>指针法，*(p+i) 形式</li></ul><h2 id=\"字符串指针\"><a class=\"anchor\" href=\"#字符串指针\">#</a> 字符串指针</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组名保存的是数组第 0 个元素的地址，指针也可以保存第 0 个元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span></pre></td></tr></table></figure><h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3><ol><li>可以查看字符串的每一个字符</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>har <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c-\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果:l-n-j</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\"><li>不可以修改字符串内容</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//   + 使用字符数组来保存的字符串是保存栈里的，保存栈里面东西是可读可写，所有可以修改字符串中的的字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//   + 使用字符指针来保存字符串，它保存的是字符串常量地址，常量区是只读的，所以我们不可以修改字符串中的字符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><ol start=\"3\"><li>不能够直接接收键盘输入</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误的原因是:str 是一个野指针，他并没有指向某一块内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 所以不允许这样写如果给 str 分配内存空间是可以这样用 的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h2><p>为什么指针可以指向一个函数？</p><ul><li>函数作为一段程序，在内存中也要占据部分存储空间，它也有一个起始地址</li><li>函数有自己的地址，那就好办了，我们的指针变量就是用来存储地址的。</li><li>因此可以利用一个指针指向一个函数。其中，函数名就代表着函数的地址。<br>指针函数的定义</li><li>格式: <code>返回值类型 (*指针变量名)(形参1, 形参2, ...);</code></li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h3><ul><li>调用函数</li><li>将函数作为参数在函数间传递</li></ul><h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3><ul><li>由于这类指针变量存储的是一个函数的入口地址，所以对它们作加减运算 (比如 p++) 是无意义的.</li><li>函数调用中 <code>(*指针变量名)</code> 的两边的括号不可少，其中的不应该理解为求值运算，在此处它只是一种表示符号.</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        }
    ]
}