{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://kung-fu-master.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://kung-fu-master.github.io",
    "items": [
        {
            "id": "https://kung-fu-master.github.io/2021/06/22/language/c/linkedList/",
            "url": "https://kung-fu-master.github.io/2021/06/22/language/c/linkedList/",
            "title": "c Linked List",
            "date_published": "2021-06-22T12:45:35.801Z",
            "content_html": "<!-- build time:Tue Jun 22 2021 20:57:17 GMT+0800 (中国标准时间) --><h2 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h2><p><img data-src=\"01.png\" alt=\"\"><br>链表实现了，内存零碎数据的有效组织。比如，当我们用 malloc 来进行内存申请的时候，当内存足够，但是由于碎片太多，没有连续内存时，只能以申请失败而告终，而用链表这种数据结构来组织数据，就可以解决上类问题.</p><h2 id=\"静态链表\"><a class=\"anchor\" href=\"#静态链表\">#</a> 静态链表</h2><p><img data-src=\"02.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 1. 定义链表节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 创建链表节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Node a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Node b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Node c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 3. 初始化节点数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    a<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    b<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    c<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 4. 链接节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    a<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    b<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    c<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 5. 创建链表头</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 6. 使用链表</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"动态链表\"><a class=\"anchor\" href=\"#动态链表\">#</a> 动态链表</h2><p>静态链表的意义不是很大，主要原因，数据存储在栈上，栈的存储空间有限，不能动态分配。所以链表要实现存储的自由，要动态的申请堆里的空间。</p><h2 id=\"空链表\"><a class=\"anchor\" href=\"#空链表\">#</a> 空链表</h2><p><img data-src=\"03.png\" alt=\"\"><br>头指针带了一个空链表节点，空链表节点中的 next 指向 NULL</p><h2 id=\"非空链表\"><a class=\"anchor\" href=\"#非空链表\">#</a> 非空链表</h2><p><img data-src=\"04.png\" alt=\"\"><br>头指针带了一个非空节点，最后一个节点中的 next 指向 NULL.</p><h2 id=\"动态链表头插法\"><a class=\"anchor\" href=\"#动态链表头插法\">#</a> 动态链表头插法</h2><ol><li>让新节点的下一个节点等于头结点的下一个节点</li><li>让头节点的下一个节点等于新节点</li></ol><div class=\"note info\"><p>上面 1,2 顺序不能放过来，否则头节点后面原来的其它节点都会丢失.</p></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 接收用户输入数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入节点数据:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 使用循环创建其它节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 3.1 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        Node<span class=\"token operator\">*</span> curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        curNode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 3.2 让新节点的下一个节点指向头节点的下一个节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        curNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 3.3 让头节点的下一个节点指向新节点</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 3.4 再次接收用户输入数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 4. 返回创建好的节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * @brief printNodeList 遍历链表 </pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * @param node 链表指针头</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> * @brief destroyList 销毁链表</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> */ </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        head <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    Node<span class=\"token operator\">*</span> nodeHead <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"动态链表尾插法\"><a class=\"anchor\" href=\"#动态链表尾插法\">#</a> 动态链表尾插法</h2><ol><li>定义变量记录新节点的上一个节点</li><li>将新节点添加到上一个节点后面</li><li>让新节点成为下一个节点的上一个节点</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 接收用户输入数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入节点数据:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 使用循环创建其它节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 保留 head 指针在头部不动，创建另外一个指针进行插入新节点操作</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Node<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 3.1 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Node<span class=\"token operator\">*</span> curNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        curNode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 3.2 让新节点链接到上一个节点后面</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 3.3 当前节点下一个节点等于 NULL</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        curNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 3.4 让当前节点变成下一个节点的上一个节点，也就是当前节点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        pre <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 3.4 再次接收用户输入数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 4. 返回创建好的节点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * @brief printNodeList 遍历链表 </pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * @param node 链表指针头</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">int</span> currentData <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentData = %i\\n\"</span><span class=\"token punctuation\">,</span> currentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> * @brief destroyList 销毁链表</pre></td></tr><tr><td data-num=\"66\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> */ </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        head <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    Node<span class=\"token operator\">*</span> nodeHead <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token function\">printNodeList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token function\">destroyList</span><span class=\"token punctuation\">(</span>nodeHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表销毁\"><a class=\"anchor\" href=\"#链表销毁\">#</a> 链表销毁</h2><pre><code class=\"language-C\">/**\n * @brief destroyList 销毁链表\n * @param head 链表头指针\n */\nvoid destroyList(Node *head){\n    Node *cur = NULL;\n    while(head != NULL){\n        cur = head-&gt;next;\n        free(head);\n        head = cur;\n    }\n}\n</code></pre><h2 id=\"链表长度计算\"><a class=\"anchor\" href=\"#链表长度计算\">#</a> 链表长度计算</h2><p>传进参数的是 <code>head</code> 而不是 head 的地址 <code>&amp;head</code> , 因此在 listLength () 形参 <code>head是值传递</code> ，不会改变主函数中 head 的值，执行完此 func 后，主函数 head 仍指向链表的第一个头节点.</p><div class=\"note info\"><p>但是如果函数修改 node-&gt;data 值会改变主函数创建的链表里相应节点 data 的值.</p></div><pre><code class=\"language-C\">/**\n * @brief listLength 计算链表长度\n * @param head 链表头指针\n * @return 链表长度\n */\nint listLength(Node* head){\n    int count = 0;\n    head = head-&gt;next;\n    while(head){\n       count++;\n       head = head-&gt;next;\n    }\n    return count;\n}\n</code></pre><h2 id=\"链表查找\"><a class=\"anchor\" href=\"#链表查找\">#</a> 链表查找</h2><pre><code class=\"language-C\">/**\n * @brief searchList 查找指定节点\n * @param head 链表头指针\n * @param key 需要查找的值\n * @return 链表头\n */\nNode *searchList(Node *head, int key){\n    head = head-&gt;next;\n    while(head){\n        if(head-&gt;data == key){\n            break;\n        }else{\n            head = head-&gt;next;\n        }\n    }\n    return head;\n}\n</code></pre><h2 id=\"节点删除\"><a class=\"anchor\" href=\"#节点删除\">#</a> 节点删除</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">deleteNodeList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span>find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> find<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"给链表排序\"><a class=\"anchor\" href=\"#给链表排序\">#</a> 给链表排序</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief bubbleSort 对链表进行排序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 计算链表长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">listLength</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 定义变量记录前后节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Node <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 3. 相邻元素进行比较，进行冒泡排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cur <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i, %i\\n\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                cur<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief sortList 对链表进行排序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 0. 计算链表长度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">listLength</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 定义变量保存前后两个节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Node <span class=\"token operator\">*</span>sh<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        sh <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pre <span class=\"token operator\">=</span> sh<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cur <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二个节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">-></span>data <span class=\"token operator\">></span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 交换节点位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                sh<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 恢复节点名称</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                Node <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 让所有节点往后移动</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            sh <span class=\"token operator\">=</span> sh<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            pre <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表反转\"><a class=\"anchor\" href=\"#链表反转\">#</a> 链表反转</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief reverseList 反转链表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param head 链表头指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 创建两个链表对象，原链表赋值给 pre, pre 读取每一个链表节点，cur 保留 pre 的 next 节点，避免下面的每次循环 pre 的 next 丢失</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Node <span class=\"token operator\">*</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pre <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 重新插入节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2.1 记录 pre 的下一个节点，因为后面 pre->next 会改变.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cur <span class=\"token operator\">=</span> pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 2.2 再把原来变化前的 pre->next 赋值给现在的 pre.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/22/language/c/file/",
            "url": "https://kung-fu-master.github.io/2021/06/22/language/c/file/",
            "title": "c file",
            "date_published": "2021-06-22T12:45:35.799Z",
            "content_html": "<!-- build time:Tue Jun 22 2021 20:57:17 GMT+0800 (中国标准时间) --><h2 id=\"文件流\"><a class=\"anchor\" href=\"#文件流\">#</a> 文件流</h2><p>C 语言把文件看作是一个字符的序列，即文件是由一个一个字符组成的字符流，因此 c 语言将文件也称之为 <code>文件流</code> .</p><h2 id=\"文件分类\"><a class=\"anchor\" href=\"#文件分类\">#</a> 文件分类</h2><p><img data-src=\"01.png\" alt=\"\"></p><ol><li>文本文件</li></ol><ul><li>以 <code>ASCII 码格式</code> 存放，<strong><span class=\"black\">一个字节存放一个字符</span></strong>. <code>文本文件的每一个字节存放一个 ASCII 码，代表一个字符</code> 。这便于对字符的逐个处理，但占用存储空间<br>较多，而且要花费时间转换。</li><li>.c 文件就是以文本文件形式存放的</li></ul><ol start=\"2\"><li>二进制文件</li></ol><ul><li>以 <code>补码格式</code> 存放。二进制文件是把数据以二进制数的格式存放在文件中的，其占用存储空间较少。 <code>数据按其内存中的存储形式原样存放</code> .</li><li>.exe 文件就是以二进制文件形式存放的</li></ul><div class=\"note info\"><p>文本工具默认会按照 ASCII 码逐个直接解码文件，由于文本文件存储的就是 ASCII 码，所以可以正常解析显示，由于二进制文件存储的不是 ASCII 码，所以解析出来之后是乱码</p></div><h2 id=\"file-结构体\"><a class=\"anchor\" href=\"#file-结构体\">#</a> FILE 结构体</h2><p>FILE 结构体是对缓冲区和文件读写状态的记录者，所有对文件的操作，都是通过 FILE 结构体完成的。</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件输入的下一个位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> _cnt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前缓冲区的相对位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_base<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件的起始位置)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> _flag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件标志</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> _file<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件的有效性验证</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> _charbuf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查缓冲区状况，如果无缓冲区则不读取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> _bufsiz<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓冲区大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_tmpfname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时文件名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> FILE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"fileopen函数\"><a class=\"anchor\" href=\"#fileopen函数\">#</a> fileopen 函数</h2><ol><li>函数说明:</li></ol><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">FILE * fopen ( const char * filename, const char * mode );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">以 mode 的方式，打开一个 filename 命名的文件，返回一个指向该文件缓冲的 FILE 结构体指针。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char*filaname : 要打开，或是创建文件的路径。</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">char*mode : 打开文件的方式。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">FILE* 返回指向文件缓冲区的指针，该指针是后序操作文件的句柄。</td></tr></tbody></table><ol start=\"2\"><li>参数说明:</li></ol><table><thead><tr><th style=\"text-align:left\">mode</th><th style=\"text-align:left\">处理方式</th><th style=\"text-align:left\">当文件不存在时</th><th style=\"text-align:left\">当文件存在时</th><th style=\"text-align:left\">向文件输入</th><th style=\"text-align:left\">从文件输出</th></tr></thead><tbody><tr><td style=\"text-align:left\">r</td><td style=\"text-align:left\">读取</td><td style=\"text-align:left\">出错</td><td style=\"text-align:left\">打开文件</td><td style=\"text-align:left\">不能</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">w</td><td style=\"text-align:left\">写入</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">覆盖原有文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">不能</td></tr><tr><td style=\"text-align:left\">a</td><td style=\"text-align:left\">追加</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">在原有文件后追加</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">不能</td></tr><tr><td style=\"text-align:left\">r+</td><td style=\"text-align:left\">读取 / 写入</td><td style=\"text-align:left\">出错\t打开文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">w+</td><td style=\"text-align:left\">写入 / 读取</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">覆盖原有文件</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr><tr><td style=\"text-align:left\">a+</td><td style=\"text-align:left\">读取 / 追加</td><td style=\"text-align:left\">建立新文件</td><td style=\"text-align:left\">在原有文件后追加</td><td style=\"text-align:left\">可以</td><td style=\"text-align:left\">可以</td></tr></tbody></table><div class=\"note info\"><p>注意点:<br>Windows 如果读写的是二进制文件，则还要加 b, 比如 rb, r+b 等。 unix/linux 不区分文本和二进制文件</p></div><h2 id=\"fclose函数\"><a class=\"anchor\" href=\"#fclose函数\">#</a> fclose 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">int fclose ( FILE * stream );</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdio.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">fclose () 用来关闭先前 fopen () 打开的文件.</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">此动作会让缓冲区内的数据写入文件中，并释放系统所提供的文件资源</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">FILE* stream : 指向文件缓冲的指针。</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">int 成功返回 0 ，失败返回 EOF (-1)。</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/MLearning/matplotlib/03_barGraph/",
            "url": "https://kung-fu-master.github.io/2021/06/21/MLearning/matplotlib/03_barGraph/",
            "title": "03 条形图",
            "date_published": "2021-06-21T12:32:42.817Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"竖着画图\"><a class=\"anchor\" href=\"#竖着画图\">#</a> 竖着画图</h2><p><img data-src=\"01.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>variance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bar_label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># range (3) 等价于 range (0, 3), 是 [0, 1, 2] 没有 3.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bar_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># plt.bar: 表示竖着画图.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># yerr: 梯形图上方的误差棒</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># alpha: 条形图透明程度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># color: 条形图颜色</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> yerr<span class=\"token operator\">=</span>variance<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># zip (): 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># list (zip (mean_values, variance)) 返回： [(1, 0.2), (2, 0.4), (3, 0.5)]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># max (zip (mean_values, variance)) 返回: (3, 0.5)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>max_y <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">,</span> variance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>max_y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max_y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"variable y\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> bar_label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"横着画图\"><a class=\"anchor\" href=\"#横着画图\">#</a> 横着画图</h2><p><img data-src=\"02.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 生成 [1 2 3] 数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bar_labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar3\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 返回 [0 1 2] 数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>y_pos <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 返回 [0, 1, 2] 数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>y_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y_pos<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 横着画图</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>plt<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span>y_pos<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>plt<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span>y_pos<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"斜向上图\"><a class=\"anchor\" href=\"#斜向上图\">#</a> 斜向上图</h2><p><img data-src=\"03.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>y1 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>y2 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>y_mean <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.5</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ax<span class=\"token punctuation\">.</span>fill_between<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y_mean<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"误差棒\"><a class=\"anchor\" href=\"#误差棒\">#</a> 误差棒</h2><p><img data-src=\"04.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>variance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bar_label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bar1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bar_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># yerr: 误差范围</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># alpha: 透明程度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> yerr<span class=\"token operator\">=</span>variance<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>max_y <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">,</span> variance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>max_y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max_y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'variable y'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> bar_label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"分组条形图\"><a class=\"anchor\" href=\"#分组条形图\">#</a> 分组条形图</h2><p><img data-src=\"05.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>green_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>blue_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>red_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'group 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'group 2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'group 3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>green_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>width <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bar0 <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> green_data<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 画最小值所在位置的虚线</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>green_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p <span class=\"token operator\">+</span> width <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        blue_data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        width<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>blue_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        red_data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        width<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        label<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>plt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>red_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test Multi Group\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Group\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Data\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'05.png'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"color-map\"><a class=\"anchor\" href=\"#color-map\">#</a> color map</h2><p><img data-src=\"06.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>colors <span class=\"token keyword\">as</span> col</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>cm <span class=\"token keyword\">as</span> cm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mean_values <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cmap1 <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>ScalarMappable<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    col<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cmap2 <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>ScalarMappable<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>cmap1<span class=\"token punctuation\">.</span>to_rgba<span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_values<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>cmap2<span class=\"token punctuation\">.</span>to_rgba<span class=\"token punctuation\">(</span>mean_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"matplotlib/06.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"条形图填充\"><a class=\"anchor\" href=\"#条形图填充\">#</a> 条形图填充</h2><p><img data-src=\"07.png\" alt=\"\"></p><figure class=\"highlight py\"><figcaption data-lang=\"Python\"><span>y</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>patterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>gca<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mean_value <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>patterns<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mean_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bars <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_pos<span class=\"token punctuation\">,</span> mean_value<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> bar<span class=\"token punctuation\">,</span> pattern <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>bars<span class=\"token punctuation\">,</span> patterns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    bar<span class=\"token punctuation\">.</span>set_hatch<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"matplotlib/07.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "MLearning",
                "matplotlib",
                "MLearning"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/union/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/union/",
            "title": "c union",
            "date_published": "2021-06-21T12:31:55.035Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h2><ul><li>和结构体不同的是，结构体的每个成员都是占用一块独立的存储空间，而共用体所有的成员都占用同一块存储空间</li><li>和结构体一样，共用体在使用之前必须先定义共用体类型，再定义共用体变量<br>定义共用体类型格式:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> 共用体名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    数据类型 属性名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    数据类型 属性名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定义共用体类型变量格式:</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> 共用体名 共用体变量名称<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>(特点：由于所有属性共享同一块内存空间，所以只要其中一个属性发生了改变，其它的属性都会受到影响){.red}</strong></p><p>示例:</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> Test<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">union</span> Test t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(p) = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.age = %i\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 33</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    t<span class=\"token punctuation\">.</span>ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.ch = %c\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t.age = %i\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 97</span></pre></td></tr></table></figure><h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2><ol><li>通信中的数据包会用到共用体，因为不知道对方会发送什么样的数据包过来，用共用体的话就简单了，定义几种格式的包，收到包之后就可以根据包的格式取出数据。</li><li>节约内存。如果有 2 个很长的数据结构，但不会同时使用，比如一个表示老师，一个表示学生，要统计老师和学生的情况，用结构体就比较浪费内存，这时就可以考虑用共用体来设计。</li><li>某些应用需要大量的临时变量，这些变量类型不同，而且会随时更换。而你的堆栈空间有限，不能同时分配那么多临时变量。这时可以使用共用体让这些变量共享同一个内存空间，这些临时变量不用长期保存，用完即丢，和寄存器差不多，不用维护。</li></ol><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/typedef/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/typedef/",
            "title": "c typedef",
            "date_published": "2021-06-21T12:31:55.034Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"typedef关键字\"><a class=\"anchor\" href=\"#typedef关键字\">#</a> typedef 关键字</h2><p>C 语言不仅􏰀供了丰富的数据类型，而且还允许由用户自己定义类型说明符，也就是说允许由用户为数据类型取 “别名”。<br><code>格式: typedef 原类型名 新类型名;</code></p><ul><li>其中原类型名中含有定义部分，新类型名一般用大写表示，以便于区别.</li><li>有时也可用宏定义来代替 typedef 的功能，但是宏定义是由预处理完成的，而 typedef 则是在编译 时完成的，后者更为灵活方便.</li></ul><h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Integer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> Integer MyInteger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MyInteger a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 int a;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> String<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">String</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组类型\"><a class=\"anchor\" href=\"#数组类型\">#</a> 数组类型</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> NAME<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示 NAME 是字符数组类型，数组长度为 20。然后可用 NAME 说明变量，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 char a [20];</span></pre></td></tr></table></figure><h2 id=\"结构体类型\"><a class=\"anchor\" href=\"#结构体类型\">#</a> 结构体类型</h2><div class=\"tab\" data-id=\"id01\" data-title=\"第一种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id01\" data-title=\"第二种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id01\" data-title=\"第三种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PersonType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2><div class=\"tab\" data-id=\"id02\" data-title=\"第一种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id02\" data-title=\"第二种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id02\" data-title=\"第三种形式\"><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SexMan<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SexWoman<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SexOther</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SexType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2><ul><li>typedef 与指向结构体的指针</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个结构体并起别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Point<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 起别名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> Point <span class=\"token operator\">*</span>PP<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>typedef 与指向函数的指针</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个 sum 函数，计算 a 跟 b 的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d + %d = %d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>MySum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义一个指向 sum 函数的指针变量 p</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MySum p <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/static/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/static/",
            "title": "c static",
            "date_published": "2021-06-21T12:31:55.029Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"static对局部变量作用\"><a class=\"anchor\" href=\"#static对局部变量作用\">#</a> static 对局部变量作用</h2><ul><li>延长局部变量的生命周期，从程序启动到程序退出，但是它并没有改变变量的作用域</li><li>定义变量的代码在整个程序运行期间仅仅会执行一次</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 如果不加 static 输出 1 1 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 如果添加 static 输出 1 2 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"static对全局变量作用\"><a class=\"anchor\" href=\"#static对全局变量作用\">#</a> static 对全局变量作用</h2><ul><li>外部变量：可以在其他文件中访问的变量，默认所有全局变量都是外部变量</li><li>默认情况下多个同名的全局变量共享一块空间，这样会导致全局变量污染问题</li><li>如果想让某个全局变量只在某个文件中使用，并且不和其他文件中同名全局变量共享同一块存储空间，那么就可以使用 static</li></ul><ol><li>不用 static 关键字</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/***ds.c***/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// A 文件中的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和 B 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ds.c中的 num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/***main.c***/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// B 文件中的代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ds.h\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和 A 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//test 中输出 666</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2.</span> 加上<span class=\"token keyword\">static</span>关键字</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>``` c</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/***ds.c***/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// A 文件中的代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不和 B 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ds.c中的 num = %i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/***main.c***/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// B 文件中的代码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ds.h\"</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不和 A 文件中的 num 共享</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//test 中输出 0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"static对函数作用\"><a class=\"anchor\" href=\"#static对函数作用\">#</a> static 对函数作用</h2><p>默认情况下所有的函数都是外部函数.<br>内部函数：只能在本文件中访问的函数.</p><ul><li>声明一个内部函数</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>定义一个内部函数</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\"><p>如果只有函数声明添加了 static 与 extern, 而定义中没有添加 static 与 extern, 那么无效</p></div><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/memoryManagement/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/memoryManagement/",
            "title": "c Memory Management",
            "date_published": "2021-06-21T12:31:55.028Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"进程空间图示\"><a class=\"anchor\" href=\"#进程空间图示\">#</a> 进程空间图示</h2><p><img data-src=\"01.png\" alt=\"\"></p><h2 id=\"栈内存stack\"><a class=\"anchor\" href=\"#栈内存stack\">#</a> 栈内存 (Stack)</h2><ul><li>栈的最大尺寸固定，超出则引起栈溢出.</li><li>局部变量过多，过大 或 递归层数太多等就会导致栈溢出</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ages<span class=\"token punctuation\">[</span><span class=\"token number\">1024000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 程序会崩溃，栈溢出</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 存储在栈中，内存地址从大到小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &amp;a = 000000000061FE1C</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;b = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &amp;b = 000000000061FE18</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"堆内存heap\"><a class=\"anchor\" href=\"#堆内存heap\">#</a> 堆内存 (Heap)</h2><ul><li>堆内存可以存放任意类型的数据，但需要自己申请与释放</li><li>堆大小，想像中的无穷大，但实际使用中，受限于实际内存的大小和内存是否连续性</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10240</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不一定会崩溃</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 存储在栈中，内存地址从小到大，申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 = %x\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// p1 = 9b4a10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 = %x\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// p1 + 1 = 9b4a14</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2 = %x\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// p2 = 9b4a50</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"malloc函数\"><a class=\"anchor\" href=\"#malloc函数\">#</a> malloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void * malloc(size_t _Size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">申请堆内存空间并返回，所申请的空间并未初始化。</td></tr><tr><td style=\"text-align:left\">常见的初始化方法是</td><td style=\"text-align:left\">memset 字节初始化。</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t _size 表示要申请的字符数</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void * 成功返回非空指针指向申请的空间，失败返回 NULL</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * malloc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 第一个参数：需要申请多少个字节空间</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 返回值类型: void *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */ </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存垃圾数据，如: -1163005939</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 第一个参数：需要初始化的内存地址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 第二个初始：需要初始化的值</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 第三个参数：需要初始化对少个字节</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */ </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对申请的内存空间进行初始化</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"free函数\"><a class=\"anchor\" href=\"#free函数\">#</a> free 函数</h2><div class=\"note info\"><p>注意：通过 malloc 申请的存储空间一定要释放，所以 malloc 和 free 函数总是成对出现</p></div><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void free(void *p);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">释放申请的堆内存</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">void* p 指向手动申请的空间</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void 无返回</td></tr></tbody></table><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 2. 初始化 4 个字节存储空间为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 3. 释放申请的存储空间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"calloc函数\"><a class=\"anchor\" href=\"#calloc函数\">#</a> calloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void *calloc(size_t nmemb, size_t size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">申请堆内存空间并返回，所申请的空间，自动清零</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t nmemb 所需内存单元数量</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t size 内存单元字节数量</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void * 成功返回非空指针指向申请的空间，失败返回 NULL</td></tr></tbody></table><div class=\"note info\"><p><code>malloc</code> 与 <code>calloc</code> 的简单区别为 <code>malloc</code> 申请空间后不会自动清零，而 <code>calloc</code> 会自动清零.</p></div><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // 1. 申请 3 块 4 个字节存储空间</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    int *p = (int *) malloc (sizeof (int) * 3);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    // 2. 使用申请好的 3 块存储空间</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p [0] = 1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p [1] = 3;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p [2] = 5;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    printf (\"p [0] = % i\\n\", p [0]);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    printf (\"p [1] = % i\\n\", p [1]);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    printf (\"p [2] = % i\\n\", p [2]);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    // 3. 释放空间</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    free (p);</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 3 块 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的 3 块存储空间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[0] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[0] = 1, address = 994a10</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[1] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[1] = 3, address = 994a14</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[2] = %i, address = %x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p[2] = 5, address = 994a18</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"realloc函数\"><a class=\"anchor\" href=\"#realloc函数\">#</a> realloc 函数</h2><table><thead><tr><th style=\"text-align:left\">函数声明</th><th style=\"text-align:left\">void *realloc(void *ptr, size_t size);</th></tr></thead><tbody><tr><td style=\"text-align:left\">所在文件</td><td style=\"text-align:left\">stdlib.h</td></tr><tr><td style=\"text-align:left\">函数功能</td><td style=\"text-align:left\">扩容 (缩小) 原有内存的大小。通常用于扩容，缩小会会导致内存缩去的部分数据丢失.</td></tr><tr><td style=\"text-align:left\">参数及返回解析</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">void * ptr 表示待扩容 (缩小) 的指针， ptr 为之前用 malloc 或者 calloc 分配的内存地址.</td></tr><tr><td style=\"text-align:left\">参数</td><td style=\"text-align:left\">size_t size 表示扩容 (缩小) 后内存的大小.</td></tr><tr><td style=\"text-align:left\">返回值</td><td style=\"text-align:left\">void* 成功返回非空指针指向申请的空间，失败返回 NULL.</td></tr></tbody></table><ul><li>若参数 ptr==NULL，则该函数等同于 malloc</li><li>返回的指针，可能与 ptr 的值相同，也有可能不同。若相同，则说明在原空间后面申请，否则，则可能后续空间不足，重新申请的新的连续空间，原数据拷贝到新空间， 原有空间自动释放</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时等同于 malloc</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p = %i\\n\"</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 申请 4 个字节存储空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 0000000000764A10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 如果能在传入存储空间地址后面扩容，返回传入存储空间地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果不能在传入存储空间地址后面扩容，返回一个新的存储空间地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 0000000000764A10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 使用申请好的空间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p = %i\\n\"</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 666</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 3. 释放空间</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/enum/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/enum/",
            "title": "c enum",
            "date_published": "2021-06-21T12:31:55.026Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"枚举类型\"><a class=\"anchor\" href=\"#枚举类型\">#</a> 枚举类型</h2><ul><li>在实际问题中，有些变量的取值被限定在一个有限的范围内。例如，一个星期内只有七天，一年只有十二个月，一个班每周有六门课程等等。如果把这些量说明为整型，字符型或其它类型 显然是不妥当的。</li><li>C 语言提供了一种称为 “枚举” 的类型。在 “枚举” 类型的定义中列举出所有可能的取值，被说明为该 “枚举” 类型的变量取值不能超过定义的范围。</li><li>该说明的是，枚举类型是一种基本数据类型，而不是一种构造类型，因为它不能再分解为任何基本类型。</li></ul><h2 id=\"枚举类型定义\"><a class=\"anchor\" href=\"#枚举类型定义\">#</a> 枚举类型定义</h2><ul><li>格式:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span>　枚举名　<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    枚举元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    枚举元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>示例:</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示一年四季</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"枚举变量\"><a class=\"anchor\" href=\"#枚举变量\">#</a> 枚举变量</h2><ol><li>先定义枚举类型，再定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义枚举类型的同时定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>省略枚举名称，直接定义枚举变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"赋值和使用\"><a class=\"anchor\" href=\"#赋值和使用\">#</a> 赋值和使用</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s <span class=\"token operator\">=</span> Spring<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 s = 0;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 s = winter;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">case</span> Autumn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今天是Autumn.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 也就是说 spring 的值为 0，summer 的值为 1，autumn 的值为 2，winter 的值为 3</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Spring <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Summer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Autumn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Winter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 也就是说 spring 的值为 9，summer 的值为 10，autumn 的值为 11，winter 的值为 12</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/define/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/define/",
            "title": "c define",
            "date_published": "2021-06-21T12:31:55.025Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"预处理指令概念\"><a class=\"anchor\" href=\"#预处理指令概念\">#</a> 预处理指令概念</h2><ul><li>为了区分预处理指令和一般的 C 语句，所有预处理指令都以符号 “#” 开头，并且结尾不用分号.</li><li>预处理指令可以出现在程序的任何位置，它的作用范围是从它出现的位置到文件尾。习惯上我们尽可能将预处理指令写在源程序开头，这种情况下，它的作用范围就是整个源程序文件.</li></ul><h2 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h2><ul><li>被定义为 <code>宏</code> 的标识符称为 <code>宏名</code> 。在编译预处理时，对程序中所有出现的 <code>宏名</code> ，都用宏定义中的字符串去代换，这称为 <code>宏代换</code> 或 <code>宏展开</code> .</li><li><code>宏定义</code> 是由源程序中的宏定义命令完成的. <code>宏代换</code> 是由预处理程序自动完成的。在 C 语言中， <code>宏</code> 分为有参数和无参数两种.</li><li><code>宏名</code> 一般用大写字母，以便与变量名区别开来，但用小写也没有语法错误</li></ul><h2 id=\"不带参数的宏定义\"><a class=\"anchor\" href=\"#不带参数的宏定义\">#</a> 不带参数的宏定义</h2><p>格式: <code>#define 标识符 字符串</code></p><ul><li>其中的 <code>#</code> 表示这是一条预处理命令。凡是以 <code>#</code> 开头的均为预处理命令。</li><li><code>define</code> 为宏定义命令. <code>标识符</code> 为所定义的宏名。</li><li><code>字符串</code> 可以是常数、表达式、格式串等。</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 源程序中所有的宏名 PI 在编译预处理的时候都会被 3.14 所代替</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 根据圆的半径计 radius 算周长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">girth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> PI <span class=\"token operator\">*</span>radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> <span class=\"token function\">girth</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周长为：%f\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li><code>宏名</code> 的有效范围是从定义位置到文件结束。如果需要终止宏定义的作用域，可以用 <code>#undef</code> 命令</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">PI</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>定义一个宏时可以引用已经定义的宏名</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">R</span>  <span class=\"token expression\"><span class=\"token number\">3.0</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L</span>  <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>PI<span class=\"token operator\">*</span>R</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">S</span>  <span class=\"token expression\">PI<span class=\"token operator\">*</span>R<span class=\"token operator\">*</span>R</span></span></pre></td></tr></table></figure><ul><li>可用宏定义表示数据类型，使书写方便</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">String</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     String str <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"带参数宏定义\"><a class=\"anchor\" href=\"#带参数宏定义\">#</a> 带参数宏定义</h2><p>C 语言允许宏带有参数。在宏定义中的参数称为形式参数，在宏调用中的参数称为实际参数。对带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参</p><ul><li><code>格式: #define 宏名(形参表) 字符串</code></li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第 1 行中定义了一个带有 2 个参数的宏 average，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">average</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 第 4 行其实会被替换成：int a = (10 + 4)/2;，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 输出结果为：7 是不是感觉这个宏有点像函数呢？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均值：%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol><li>宏名和参数列表之间不能有空格，否则空格后面的所有字符串都作为替换的字符串.</li><li>带参数的宏在展开时，只作简单的字符和参数的替换，不进行任何计算操作。所以在定义宏时，一般用一个小括号括住字符串的参数.</li><li>计算结果最好也用括号括起来</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 计算结果用括号括起来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pow</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 代码被替换为:int b = ((10) * (10) ) / ( (2) * (2) );</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 简化之后：int b = (10 * 10) / (2 *2);，最后输出结果：25</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"条件编译\"><a class=\"anchor\" href=\"#条件编译\">#</a> 条件编译</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SCORE</span> <span class=\"token expression\"><span class=\"token number\">67</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SCORE <span class=\"token operator\">></span> <span class=\"token number\">90</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SCORE <span class=\"token operator\">></span> <span class=\"token number\">60</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/21/language/c/const/",
            "url": "https://kung-fu-master.github.io/2021/06/21/language/c/const/",
            "title": "c const",
            "date_published": "2021-06-21T12:31:55.023Z",
            "content_html": "<!-- build time:Mon Jun 21 2021 20:33:32 GMT+0800 (中国标准时间) --><h2 id=\"const关键字\"><a class=\"anchor\" href=\"#const关键字\">#</a> const 关键字</h2><ol><li>可以定义 const 常量，具有不可变性</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Max<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> Array<span class=\"token punctuation\">[</span>Max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 编译器就会知道 i 是一个常量，不允许修改；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。 还是上面的例子，如果在 函数体内修改了 i, 编译器就会报错；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用const\"><a class=\"anchor\" href=\"#使用const\">#</a> 使用 const</h2><ol><li>修饰一般常量一般常量是指简单类型的常量。这种常量在定义时，修饰符 const 可以用在类型说明符前，也可以用在类型说明符后</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 或 <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然，我们可以偷梁换柱进行更新：通过强制类型转换，将地址赋给变量，再作修改即可以改变 const 常量值.</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const 对于基本数据类型，无论写在左边还是右边，变量中的值不能改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//a = 666; // 直接修改会报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 偷梁换柱，利用指针指向变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 利用指针间接修改变量中的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>修饰常数组 (值不能够再改变了) 定义或说明一个常数组可采用如下格式</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><ol start=\"3\"><li><p>修饰函数的常参数 const 修饰符也可以修饰函数的传递参数，格式如下:void Fun (const int Var); 告诉编译器 Var 在函数体中的无法改变，从而防止了使用者的一些无 意的或错误的修改</p></li><li><p>修饰函数的返回值: const 修饰符也可以修饰函数的返回值，是返回值不可被改变，格式如下</p></li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> MyClass <span class=\"token function\">Fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\"><li>修饰常指针</li></ol><ul><li>const int *A; //const 修饰指针，A 可变，A 指向的值不能被修改</li><li>int const *A; //const 修饰指向的对象，A 可变，A 指向的对象不可变</li><li>int *const A; //const 修饰指针 A, A 不可变，A 指向的对象可变</li><li>const int *const A;// 指针 A 和 A 指向的对象都不可变</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/16/language/c/struct/",
            "url": "https://kung-fu-master.github.io/2021/06/16/language/c/struct/",
            "title": "c struct",
            "date_published": "2021-06-16T12:57:21.817Z",
            "content_html": "<!-- build time:Tue Jun 22 2021 20:46:38 GMT+0800 (中国标准时间) --><h2 id=\"定义与初始化\"><a class=\"anchor\" href=\"#定义与初始化\">#</a> 定义与初始化</h2><p>格式: <code>struct 结构体名 结构体变量名;</code></p><ol><li>先定义结构体类型，再定义变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义结构体类型的同时定义变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>匿名结构体定义结构体变量</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> stu<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>第三种方法与第二种方法的区别在于，第三种方法中省去了结构体类型名称，而直接给出结构变量，这种结构体最大的问题是结构体类型不能复用.</p></div><h2 id=\"结构体变量初始化\"><a class=\"anchor\" href=\"#结构体变量初始化\">#</a> 结构体变量初始化</h2><ol><li>定义的同时按顺序初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>定义的同时不按顺序初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\"><li>先定义后逐个初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\"><li>先定义后一次性初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"成员访问\"><a class=\"anchor\" href=\"#成员访问\">#</a> 成员访问</h2><p>一般对结构体变量的操作是以成员为单位进行的，引用的一般形式为： <code>结构体变量名.成员名</code></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 访问 stu 的 age 成员</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = %d\"</span><span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h2><p>定义局部结构体会 屏蔽 全局同名的结构体.</p><h2 id=\"结构体数组\"><a class=\"anchor\" href=\"#结构体数组\">#</a> 结构体数组</h2><p>结构体数组和普通数组并无太大差异，只不过是数组中的元素都是结构体而已<br>格式: <code>struct 结构体类型名称 数组名称[元素个数]</code></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol><li>定义同时初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>先定义后初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stu<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stu<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"结构体指针\"><a class=\"anchor\" href=\"#结构体指针\">#</a> 结构体指针</h2><p>一个指针变量当用来指向一个结构体变量时，称之为结构体指针变量<br>格式: <code>struct 结构名 *结构指针变量名</code></p><p>通过结构体指针访问结构体成员，可以通过以下两种方式</p><ul><li>(* 结构指针变量). 成员名</li><li>结构指针变量 -&gt; 成员名 (用熟)</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个结构体变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>“lnj\"<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义一个指向结构体的指针变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 指向结构体变量 stu</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方式 1：结构体变量名。成员名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 方式 2：(* 指针变量名). 成员名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 方式 3：指针变量名 -> 成员名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%s, age = %d \\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>(* 结构指针变量) 两侧的括号不可少，因为成员符 <code>.</code> 的优先级高于 <code>*</code> .<br>如去掉括号写作 <code>*pstu.num</code> 则等效于 <code>*(pstu.num)</code> , 这样，意义就完全不对了.</p></div><h2 id=\"结构体内存分析\"><a class=\"anchor\" href=\"#结构体内存分析\">#</a> 结构体内存分析</h2><ul><li><code>给结构体变量开辟存储空间和给普通开辟存储空间一样, 会从内存地址大的位置开始开辟</code></li><li><code>给结构体成员开辟存储空间和给数组元素开辟存储空间一样, 会从所占用内存地址小的位置开始开辟</code></li><li><code>结构体变量占用的内存空间永远是所有成员中占用内存最大成员的倍数(对齐问题)</code></li></ul><div class=\"note info\"><p>多实际的计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的起始地址的值是 某个数 k 的倍数，这就是所谓的内存对齐，而这个 k 则被称为该数据类型的对齐模数 (alignment modulus).</p><p>这种强制的要求一来简化了处理器与内存之间传输系统的设计，二来可以提升读取数据的速度。比如这么一种处理器，它每次读写内存的时候都从某个 8 倍数的地址开始，一次读出或写入 8 个字节的数据，假如软件能 保证 double 类型的数据都从 8 倍数地址开始，那么读或写一个 double 类型数据就只需要一次内存操作。否则，我们就可能需要两次内存操作才能完成这个动作，因为数据或许恰好横跨在两个符合对齐要求的 8 字节 内存块上.</p></div><h3 id=\"存储空间大小分析\"><a class=\"anchor\" href=\"#存储空间大小分析\">#</a> 存储空间大小分析</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span></pre></td></tr></table></figure><ul><li>占用内存最大属性是 score, 占 8 个字节，所以第一次计算机会先给结构体分配 8 个字节.</li><li>将第一次分配的 8 个字节分配给 age4 个，分配给 ch1 个，还剩下 3 个字节</li><li>当需要分配给 score 时，发现只剩下 3 个字节，所以会再次开辟 8 个字节存储空间</li><li>一共开辟了两次 8 个字节空间，所以最终 p 占用 16 个字节</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof = %i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><ul><li>占用内存最大属性是 score, 占 8 个字节，所以第一次计算机会先给结构体分配 8 个字节.</li><li>将第一次分配的 8 个字节分配给 age4 个，还剩下 4 个字节</li><li>当需要分配给 score 时，发现只剩下 4 个字节，所以会再次开辟 8 个字节存储空间</li><li>将新分配的 8 个字节分配给 score, 还剩下 0 个字节</li><li>当需要分配给 ch 时，发现上一次分配的已经没有了，所以会再次开辟 8 个字节存储空间</li><li>一共开辟了 3 次 8 个字节空间，所以最终 p 占用 24 个字节</li></ul><h2 id=\"结构体嵌套\"><a class=\"anchor\" href=\"#结构体嵌套\">#</a> 结构体嵌套</h2><p><img data-src=\"01.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span>  <span class=\"token class-name\">stu</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> birthday<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Float score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info 注意\"><p>结构体不可以嵌套自己变量，可以嵌套指向自己这种类型的指针</p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div><h3 id=\"对嵌套结构体成员的访问\"><a class=\"anchor\" href=\"#对嵌套结构体成员的访问\">#</a> 对嵌套结构体成员的访问</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> birthday<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1986</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>month <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> stu<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"结构体值拷贝\"><a class=\"anchor\" href=\"#结构体值拷贝\">#</a> 结构体值拷贝</h2><ol><li>结构体虽然是构造类型，但是结构体之间赋值是值拷贝，而不是地址传递</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 p2 不会影响 p1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  zs</span></pre></td></tr></table></figure><ol start=\"2\"><li>所以结构体变量作为函数形参时也是值传递，在函数内修改形参，不会影响外界实参，除非以结构体指针变量作为函数形参地址传递，才会影响外界实参.</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.name = %s\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// lnj</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1.age = %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 18</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2->name = %s\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// zs</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2->age = %d\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">-></span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 20</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    per<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    per<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">*</span> per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    per<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    per<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/16/language/c/sorting_algorithm/",
            "url": "https://kung-fu-master.github.io/2021/06/16/language/c/sorting_algorithm/",
            "title": "c sort",
            "date_published": "2021-06-16T12:57:21.816Z",
            "content_html": "<!-- build time:Wed Jun 16 2021 20:58:20 GMT+0800 (中国标准时间) --><h2 id=\"总览\"><a class=\"anchor\" href=\"#总览\">#</a> 总览</h2><p>插，冒，选，希，快，堆，并，基；</p><p>插冒 (稳定) 选希快堆 (不稳定) 并基 (稳定)</p><p><img data-src=\"01.png\" alt=\"\"></p><ol><li>稳定性</li></ol><ul><li><p>归并排序、冒泡排序、插入排序、基数排序是稳定的</p></li><li><p>选择排序、快速排序、希尔排序、堆排序是不稳定的</p></li></ul><ol start=\"2\"><li>时间复杂度</li></ol><p>最基础的四个算法：冒泡、选择、插入、快排中，快排的时间复杂度最小 O (n*log2n)，其他都是 O（n2）</p><table><thead><tr><th style=\"text-align:center\">排序方法</th><th style=\"text-align:left\">最好时间</th><th style=\"text-align:center\">平均时间</th><th style=\"text-align:center\">最坏时间</th><th style=\"text-align:center\">辅助存储</th><th style=\"text-align:center\">稳定性</th><th style=\"text-align:center\">备注</th></tr></thead><tbody><tr><td style=\"text-align:center\">插入排序</td><td style=\"text-align:left\">O(n)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">大部分已排序时较好</td></tr><tr><td style=\"text-align:center\">冒泡排序</td><td style=\"text-align:left\">O(n)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">n 小时较好</td></tr><tr><td style=\"text-align:center\">选择排序</td><td style=\"text-align:left\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 小时较好</td></tr><tr><td style=\"text-align:center\">希尔排序</td><td style=\"text-align:left\">O(n^1.3)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td></tr><tr><td style=\"text-align:center\">快速排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n^2)</td><td style=\"text-align:center\">O(logn)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">堆排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(1)</td><td style=\"text-align:center\">不稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">归并排序</td><td style=\"text-align:left\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(nlogn)</td><td style=\"text-align:center\">O(n)</td><td style=\"text-align:center\">稳定</td><td style=\"text-align:center\">n 大时较好</td></tr><tr><td style=\"text-align:center\">基数排序</td><td style=\"text-align:left\">O(kn)</td><td style=\"text-align:center\">O(kn)</td><td style=\"text-align:center\">O(kn)</td><td style=\"text-align:center\">O(n)</td><td style=\"text-align:center\">稳定</td></tr></tbody></table><h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.</p><p><img data-src=\"insert-sort.gif\" alt=\"\"></p><h3 id=\"排序思路\"><a class=\"anchor\" href=\"#排序思路\">#</a> 排序思路</h3><p>假设按照升序排序</p><ol><li>从索引为 1 的元素开始向前比较，一旦前面一个元素大于自己就与前面的元素交换位置</li><li>直到没有可比较元素或者前面的元素小于自己的时候，就已经将自己交换到了当前空出来的位置</li></ol><h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 0. 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. 从第一个元素而不是第 0 个开始依次取出所有用于比较元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 2. 遍历取出前面元素进行比较</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 3. 如果前面一个元素大于当前元素，就交换位置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2><p>冒泡排序 (Bubble Sort) 是一种简单的排序算法。它重复 地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端.</p><p><img data-src=\"002.gif\" alt=\"\"></p><h3 id=\"排序思路-2\"><a class=\"anchor\" href=\"#排序思路-2\">#</a> 排序思路:</h3><ul><li>假设按照升序排序</li><li>1. 从第 0 个元素开始，每次都用相邻两个元素进行比较</li><li>2. 一旦发现后面一个元素小于前面一个元素就交换位置</li><li>3. 经过一轮比较之后最后一个元素就是最大值</li><li>4. 排除最后一个元素，以此类推，每次比较完成之后最大值都会出现再被比较所有元素的最后</li><li>直到当前元素没有可比较的元素，排序完成</li></ul><h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2><p>选择排序 (Selection sort) 是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕.</p><p><img data-src=\"001.gif\" alt=\"\"></p><h3 id=\"排序思路-3\"><a class=\"anchor\" href=\"#排序思路-3\">#</a> 排序思路</h3><ul><li>假设按照升序排序</li><li>1. 用第 0 个元素和后面所有元素依次比较</li><li>2. 判断第 0 个元素是否大于当前被比较元素，一旦小于就交换位置</li><li>3. 第 0 个元素和后续所有元素比较完成后，第 0 个元素就是最小值</li><li>4. 排除第 0 个元素，用第 1 个元素重复 1~3 操作，比较完成后第 1 个元素就是倒数第二小的值</li><li>以此类推，直到当前元素没有可比较的元素，排序完成</li></ul><h3 id=\"代码实现-3\"><a class=\"anchor\" href=\"#代码实现-3\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指针 (地址) 传递</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h2><p>1959 年 Shell 发明，第一个突破 O (n2) 的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序.</p><p><img data-src=\"shell-sort.gif\" alt=\"\"></p><p><img data-src=\"shell-01.JPG\" alt=\"\"></p><p><img data-src=\"shell-02.JPG\" alt=\"\"></p><p><img data-src=\"shell-03.JPG\" alt=\"\"></p><h3 id=\"排序思路-4\"><a class=\"anchor\" href=\"#排序思路-4\">#</a> 排序思路</h3><ol><li>希尔排序可以理解为插入排序的升级版，先将待排序数组按照指定步长划分为几个小数组</li><li>利用插入排序对小数组进行排序，然后将几个排序的小数组重新合并为原始数组</li><li>重复上述操作，直到步长为 1 时，再利用插入排序排序即可</li></ol><h3 id=\"代码实现-4\"><a class=\"anchor\" href=\"#代码实现-4\">#</a> 代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 0. 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. 计算步长</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 1. 从第一个 (而非第 0 个) 元素 (gap 处元素) 开始往后依次取出待排序数组的所有元素，与各自所在当前组前面的元素进行简单插入排序.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 从 gap 处按顺序取待排序数组元素排序，而不是排完一组元素后再排另外一组元素，跟上图演示有些不一样.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 2. 遍历取出前面元素进行比较</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 3. 如果前面一个元素大于当前元素，就交换位置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">swapElement</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 4. 继续往当前组的前一元素移动</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                j<span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>            </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 每个小数组排序完成，重新计算步长</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        gap <span class=\"token operator\">=</span> gap <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"计数排序counting-sort\"><a class=\"anchor\" href=\"#计数排序counting-sort\">#</a> 计数排序（Counting Sort）</h2><p>计数排序是一个非基于比较的排序算法，该算法于 1954 年由 Harold H. Seward 提出。它的优势在于在 <code>对一定范围内的整数排序</code> 时，快于任何比较排序算法</p><h3 id=\"排序思路-5\"><a class=\"anchor\" href=\"#排序思路-5\">#</a> 排序思路:</h3><ul><li>1. 找出待排序数组最大值</li><li>2. 定义一个索引最大值为待排序数组最大值的数组</li><li>3. 遍历待排序数组，将待排序数组遍历到的值作新数组索引</li><li>4. 在新数组对应索引存储值原有基础上 + 1</li></ul><p><img data-src=\"001.png\" alt=\"\"></p><h3 id=\"简单代码实现\"><a class=\"anchor\" href=\"#简单代码实现\">#</a> 简单代码实现</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 待排序数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 用于排序数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> newNums<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 计算待排序数组长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 编列待排序数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 去除待排序数组当前值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 将待排序数组当前值作为排序数组索引</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 将用于排序数组对应索引原有值 + 1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        newNums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newNums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 计算排序数组长度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 输出排序数组索引， 就是排序之后的结果</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 只有所在索引值大于 0，说明此索引值是原待排序数组中的值，可以输出.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> newNums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/11/language/c/two-dimensional-array/",
            "url": "https://kung-fu-master.github.io/2021/06/11/language/c/two-dimensional-array/",
            "title": "Two dimensional array of c language",
            "date_published": "2021-06-11T13:39:32.813Z",
            "content_html": "<!-- build time:Fri Jun 11 2021 21:45:53 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OC9hcnRpY2xlL2RldGFpbHMvMTE3NjU2ODEwP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19mZWVkX3YyLm5vbmUtdGFzay1ibG9nLWhvdF9yYW5rX2JvdHRvbWluZy04LnBjX3BlcnNvbnJlY2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX2ZlZWRfdjIubm9uZS10YXNrLWJsb2ctaG90X3JhbmtfYm90dG9taW5nLTgucGNfcGVyc29ucmVj\">https://blog.csdn.net/weixin_44617968/article/details/117656810?utm_medium=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrec</span></p><h2 id=\"字符串的基本概念\"><a class=\"anchor\" href=\"#字符串的基本概念\">#</a> 字符串的基本概念</h2><p>字符串是位于双引号中的字符序列，在内存中以 <code>\\0</code> 结束，所占字节比实际多一个.<br><img data-src=\"001.png\" alt=\"\"><br>在 C 语言中没有专门的字符串变量，通常用一个字符数组来存放一个字符串.</p><ul><li>当把一个字符串存入一个数组时，会把结束符 <code>\\0</code> 存入数组，并以此作为该字符串是否结束的标志.</li><li>有了 <code>\\0</code> 标志后，就不必再用字符数组的长度来判断字符串的长度了.</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// \"中间不能包含 \\0\", 因为 `\\0` 是字符串的结束标志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \\0 的作用：字符串结束的标志</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\\0ool\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = %s\\n\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>输出结果<span class=\"token operator\">:</span> c</pre></td></tr></table></figure><h2 id=\"字符串输出\"><a class=\"anchor\" href=\"#字符串输出\">#</a> 字符串输出</h2><ul><li><code>%s</code> 的本质就是根据传入的 name 的地址逐个去取数组中的元素然后输出，直到遇到 <code>\\0</code> 位置</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> chs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3><ol><li><code>\\0</code> 引发的脏读问题</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> name2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name2 = %s\\n\"</span><span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果: lnjcool</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实际开发中这样定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> name2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\"><li>初始化</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul><li>对一个字符串数组，如果不做初始化赋值，必须指定数组长度</li><li>ch 最多存放由 9 个字符构成的字符串，其中最后一个字符的位置要留给字符串的结尾标示‘\\0’</li><li>当用 scanf 函数输入字符串时，字符串中不能含有空格，否则将以空格作为串的结束符</li></ul><h2 id=\"二维数组的初始化\"><a class=\"anchor\" href=\"#二维数组的初始化\">#</a> 二维数组的初始化</h2><p>二维数的初始化可分为两种:</p><ul><li>定义的同时初始化</li><li>先定义后初始化</li></ul><h3 id=\"定义的同时初始化\"><a class=\"anchor\" href=\"#定义的同时初始化\">#</a> 定义的同时初始化</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按行分段赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 按行连续赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">92</span><span class=\"token punctuation\">,</span><span class=\"token number\">61</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">71</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 完全初始化，省略第一维的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 部分初始化，可以省略第一维的长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 指定元素的初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\"><p>注意：有些人可能想不明白，为什么可以省略行数，但不可以省略列数。也有人可能会问，可不可以只指定行数，但是省略列数？其实这个问题很简单，如果我们这样写：<br>int a [2][] = {1, 2, 3, 4, 5, 6}; // 错误写法<br>大家都知道，二维数组会先存放第 1 行的元素，由于不确定列数，也就是不确定第 1 行要存放多少个元素，所以这里会产生很多种情况，可能 1、2 是属于第 1 行的，也可能 1、2、3、4 是第一行的，甚至 1、2、3、4、5、6 全部都是属于第 1 行的</p></div><h3 id=\"先定义后初始化\"><a class=\"anchor\" href=\"#先定义后初始化\">#</a> 先定义后初始化</h3><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">92</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">61</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">71</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"作为函数参数注意点\"><a class=\"anchor\" href=\"#作为函数参数注意点\">#</a> 作为函数参数注意点</h2><ul><li>形参写法</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>二维数组作为函数参数，在被调函数中不能获得其有多少行，需要通过参数传入</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维数组长度，输出 8, 一维数组 (字符串) 在内存中以 “\\0” 结束，所占字节比实际多一个</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"row = %zu\\n\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul><li>二维数组作为函数参数，在被调函数中可以计算出二维数组有多少列</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">size_t</span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col = %zd\\n\"</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"值传递\"><a class=\"anchor\" href=\"#值传递\">#</a> 值传递</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是基本类型在函数中修改形参不会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"地址传递\"><a class=\"anchor\" href=\"#地址传递\">#</a> 地址传递</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是数组类型在函数中修改形参会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 和一位数组一样，只看形参是基本类型还是数组类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是数组类型在函数中修改形参会影响实参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cs[0][0] = %c\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/11/language/c/pointer/",
            "url": "https://kung-fu-master.github.io/2021/06/11/language/c/pointer/",
            "title": "c pointer",
            "date_published": "2021-06-11T13:39:32.792Z",
            "content_html": "<!-- build time:Wed Jun 16 2021 20:58:20 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OC9hcnRpY2xlL2RldGFpbHMvMTE3NjU2ODEwP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19mZWVkX3YyLm5vbmUtdGFzay1ibG9nLWhvdF9yYW5rX2JvdHRvbWluZy04LnBjX3BlcnNvbnJlY2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX2ZlZWRfdjIubm9uZS10YXNrLWJsb2ctaG90X3JhbmtfYm90dG9taW5nLTgucGNfcGVyc29ucmVj\">https://blog.csdn.net/weixin_44617968/article/details/117656810?utm_medium=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot_rank_bottoming-8.pc_personrec</span></p><h2 id=\"定义初始化\"><a class=\"anchor\" href=\"#定义初始化\">#</a> 定义初始化</h2><p>C 语言中提供了 * 来定义指针变量和访问指针变量指向的内存存储空间.</p><ul><li>在定义变量的时候 * 是一个类型说明符，说明定义的这个变量是一个指针变量</li><li>在不是定义变量的时候 * 是一个操作符，代表访问指针所指向存储空间<br>C 语言中提供了地址运算符 &amp; 来表示变量的地址。其一般形式为: &amp; 变量名.</li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义指针变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问指针变量</span></pre></td></tr></table></figure><h2 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h2><p>指针没有初始化里面是一个垃圾值，这时候的指针是一个野指针.</p><p><img data-src=\"001.png\" alt=\"\"></p><ul><li>野指针可能会导致程序崩溃</li><li>野指针访问你不该访问数据</li><li>所以指针必须初始化才可以访问其所指向存储区域</li></ul><h2 id=\"二级指针\"><a class=\"anchor\" href=\"#二级指针\">#</a> 二级指针</h2><p>如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。也称为 “二级指针”.</p><p><img data-src=\"Secondary-pointer.png\" alt=\"\"></p><h2 id=\"数组指针\"><a class=\"anchor\" href=\"#数组指针\">#</a> 数组指针</h2><p>只要一个指针变量保存了数组元素的地址，我们就称之为数组元素指针.<br><img data-src=\"array-pointer.png\" alt=\"\"></p><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>p <span class=\"token operator\">%</span>p”<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果：0x1100, 0x1100</span></pre></td></tr></table></figure><div class=\"note info\"><p>注意：数组名 a 不代表整个数组，只代表数组首元素的地址。<br>“p=a;” 的作用是 “把 a 数组的首元素的地址赋给指针变量 p”, 而不是 “把数组 a 各元素的值赋给 p”</p></div><h3 id=\"访问数组元素\"><a class=\"anchor\" href=\"#访问数组元素\">#</a> 访问数组元素</h3><p>访问数组元素，可用下面两种方法:</p><ul><li>下标法，如 a [i] 形式</li><li>指针法，*(p+i) 形式</li></ul><h2 id=\"字符串指针\"><a class=\"anchor\" href=\"#字符串指针\">#</a> 字符串指针</h2><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组名保存的是数组第 0 个元素的地址，指针也可以保存第 0 个元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span></pre></td></tr></table></figure><h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3><ol><li>可以查看字符串的每一个字符</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>har <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c-\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出结果:l-n-j</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\"><li>不可以修改字符串内容</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//   + 使用字符数组来保存的字符串是保存栈里的，保存栈里面东西是可读可写，所有可以修改字符串中的的字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//   + 使用字符指针来保存字符串，它保存的是字符串常量地址，常量区是只读的，所以我们不可以修改字符串中的字符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"lnj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><ol start=\"3\"><li>不能够直接接收键盘输入</li></ol><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误的原因是:str 是一个野指针，他并没有指向某一块内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 所以不允许这样写如果给 str 分配内存空间是可以这样用 的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h2><p>为什么指针可以指向一个函数？</p><ul><li>函数作为一段程序，在内存中也要占据部分存储空间，它也有一个起始地址</li><li>函数有自己的地址，那就好办了，我们的指针变量就是用来存储地址的。</li><li>因此可以利用一个指针指向一个函数。其中，函数名就代表着函数的地址。<br>指针函数的定义</li><li>格式: <code>返回值类型 (*指针变量名)(形参1, 形参2, ...);</code></li></ul><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h3><ul><li>调用函数</li><li>将函数作为参数在函数间传递</li></ul><h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3><ul><li>由于这类指针变量存储的是一个函数的入口地址，所以对它们作加减运算 (比如 p++) 是无意义的.</li><li>函数调用中 <code>(*指针变量名)</code> 的两边的括号不可少，其中的不应该理解为求值运算，在此处它只是一种表示符号.</li></ul><!-- rebuild by hrmmi -->",
            "tags": [
                "language",
                "c"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/10/linux/shrink_home_and_expand_root_space/",
            "url": "https://kung-fu-master.github.io/2021/06/10/linux/shrink_home_and_expand_root_space/",
            "title": "缩小home并扩充增大root和根目录空间",
            "date_published": "2021-06-10T12:12:50.709Z",
            "content_html": "<!-- build time:Fri Jun 11 2021 00:17:16 GMT+0800 (中国标准时间) --><p>Reference Link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzc3MTkyMS9ob3ctdG8tc2hyaW5rLWhvbWUtYW5kLWFkZC1tb3JlLXNwYWNlLW9uLWNlbnRvczc=\">https://serverfault.com/questions/771921/how-to-shrink-home-and-add-more-space-on-centos7</span></p><h2 id=\"查看磁盘空间\"><a class=\"anchor\" href=\"#查看磁盘空间\">#</a> 查看磁盘空间</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">df</span> -h</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Filesystem               Size  Used Avail Use% Mounted on</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  devtmpfs                  16G  <span class=\"token number\">4</span>.0K   16G   <span class=\"token number\">1</span>% /dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  tmpfs                     16G  <span class=\"token number\">4</span>.0K   16G   <span class=\"token number\">1</span>% /dev/shm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  tmpfs                     16G  <span class=\"token number\">1</span>.6G   14G  <span class=\"token number\">11</span>% /run</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  tmpfs                     16G     <span class=\"token number\">0</span>   16G   <span class=\"token number\">0</span>% /sys/fs/cgroup</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  /dev/mapper/centos-root   50G   28G   23G  <span class=\"token number\">55</span>% /</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  /dev/nvme0n1p2          1014M  221M  794M  <span class=\"token number\">22</span>% /boot</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  /dev/nvme0n1p1           200M   12M  189M   <span class=\"token number\">6</span>% /boot/efi</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  /dev/mapper/centos-home  410G   13G  398G   <span class=\"token number\">4</span>% /home</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ lvs -v</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  LV   VG     <span class=\"token comment\">#Seg Attr       LSize   Maj Min KMaj KMin Pool Origin Data%  Meta%  Move Cpy%Sync Log Convert LV UUID                                LProfile</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  home centos    <span class=\"token number\">1</span> -wi-ao---- <span class=\"token number\">410</span>.05g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">2</span>                                                     8fo1p0-XK0U-N3zw-MjcU-ZBFI-JMrp-NhqJN9</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  root centos    <span class=\"token number\">1</span> -wi-ao----  <span class=\"token number\">50</span>.00g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">0</span>                                                     ZXqpMd-OaaD-c3U0-VWDx-2ysu-ptZk-sE02xr</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  swap centos    <span class=\"token number\">1</span> -wi-a----- <span class=\"token operator\">&lt;</span><span class=\"token number\">15</span>.69g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">1</span>                                                     7lNXQY-I3Wa-jfTX-20Ti-vbee-7RmK-v5zH14</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>$ vgs -v</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  VG     Attr   Ext   <span class=\"token comment\">#PV #LV #SN VSize   VFree VG UUID                                VProfile</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  centos wz--n- <span class=\"token number\">4</span>.00m   <span class=\"token number\">1</span>   <span class=\"token number\">3</span>   <span class=\"token number\">0</span> <span class=\"token number\">475</span>.74g <span class=\"token number\">4</span>.00m G4DGmH-S9n4-BDqF-fbsV-xWNC-2BiL-xYVvar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>$ pvs -v</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  PV             VG     Fmt  Attr PSize   PFree DevSize PV UUID</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  /dev/nvme0n1p3 centos lvm2 a--  <span class=\"token number\">475</span>.74g <span class=\"token number\">4</span>.00m <span class=\"token number\">475</span>.74g ggeHwe-NAVG-wngq-gpry-cKgt-8HoM-0ZL2J0</pre></td></tr></table></figure><h2 id=\"创建备份磁盘目录\"><a class=\"anchor\" href=\"#创建备份磁盘目录\">#</a> 创建备份磁盘目录</h2><p>mount 一个磁盘足够容纳 /root 和 /home 目录空间大小，并 mount 到一个目录.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ lsblk</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sda               <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>   <span class=\"token number\">3</span>.7T  <span class=\"token number\">0</span> disk</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ├─sda1            <span class=\"token number\">8</span>:1    <span class=\"token number\">0</span>    10G  <span class=\"token number\">0</span> part</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ├─sda2            <span class=\"token number\">8</span>:2    <span class=\"token number\">0</span>    10G  <span class=\"token number\">0</span> part /mnt/test</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ├─sda3            <span class=\"token number\">8</span>:3    <span class=\"token number\">0</span>    30G  <span class=\"token number\">0</span> part</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ├─sda4            <span class=\"token number\">8</span>:4    <span class=\"token number\">0</span>   200G  <span class=\"token number\">0</span> part</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  └─sda5            <span class=\"token number\">8</span>:5    <span class=\"token number\">0</span>   500G  <span class=\"token number\">0</span> part</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$ mkfs.ext4 /dev/sda5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ <span class=\"token function\">mount</span> /dev/sda5 /mnt/tmp/</pre></td></tr></table></figure><h2 id=\"压缩备份home\"><a class=\"anchor\" href=\"#压缩备份home\">#</a> 压缩备份 home</h2><p>Backup the contents of <code>/home</code> .</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /mnt/tmp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 将/home目录仅打包, 不压缩</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">tar</span> -cvf /mnt/tmp/home.tgz -C /home <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//<span class=\"token punctuation\">(</span>推荐<span class=\"token punctuation\">)</span>将/home目录打包后, 以gzip压缩</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">tar</span> -czvf /mnt/tmp/home.tgz -C /home <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>Test the backup.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 查看压缩文件内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">tar</span> -tvf home.tgz</pre></td></tr></table></figure><h2 id=\"umount-home\"><a class=\"anchor\" href=\"#umount-home\">#</a> umount home</h2><p>Unmount home</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">umount</span> /dev/mapper/centos-home</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  umount: /home: target is busy.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token punctuation\">(</span>In some cases useful info about processes that use</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           the device is found by lsof<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> or fuser<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// mount报磁盘busy, 可以用如下命令</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">umount</span> -l /dev/mapper/centos-home</pre></td></tr></table></figure><h2 id=\"remove-home-logical-volume\"><a class=\"anchor\" href=\"#remove-home-logical-volume\">#</a> remove home logical volume</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 移除home逻辑卷时候可能会报filesystem <span class=\"token keyword\">in</span> use信息.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ lvremove /dev/mapper/centos-home</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Logical volume centos/home contains a filesystem <span class=\"token keyword\">in</span> use.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 解决方法如下</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">fuser</span> -kuc /dev/mapper/centos-home</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ lvremove /dev/mapper/centos-home</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Do you really want to remove active logical volume centos/home? <span class=\"token punctuation\">[</span>y/n<span class=\"token punctuation\">]</span>: y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Logical volume <span class=\"token string\">\"home\"</span> successfully removed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>// 再次查看发现已经没有/home逻辑卷</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>$ lvs -v</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  LV   VG     <span class=\"token comment\">#Seg Attr       LSize   Maj Min KMaj KMin Pool Origin Data%  Meta%  Move Cpy%Sync Log Convert LV UUID                                LProfile</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  root centos    <span class=\"token number\">1</span> -wi-ao----  <span class=\"token number\">50</span>.00g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">0</span>                                                     ZXqpMd-OaaD-c3U0-VWDx-2ysu-ptZk-sE02xr       </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  swap centos    <span class=\"token number\">1</span> -wi-a----- <span class=\"token operator\">&lt;</span><span class=\"token number\">15</span>.69g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">1</span>                                                     7lNXQY-I3Wa-jfTX-20Ti-vbee-7RmK-v5zH14</pre></td></tr></table></figure><h2 id=\"recreate-a-logical-volume-for-home\"><a class=\"anchor\" href=\"#recreate-a-logical-volume-for-home\">#</a> Recreate a logical volume for home</h2><p>Recreate a new 300GB logical volume for /home, format and mount it.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ lvcreate -L 300GB -n home centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ lvs -v</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  LV   VG     <span class=\"token comment\">#Seg Attr       LSize   Maj Min KMaj KMin Pool Origin Data%  Meta%  Move Cpy%Sync Log Convert LV UUID                                LProfile</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  home centos    <span class=\"token number\">1</span> -wi-a----- <span class=\"token number\">300</span>.00g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">2</span>                                                     CbNJO2-DWMb-VvES-3gNv-YufK-VpvN-IQw2ch       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  root centos    <span class=\"token number\">1</span> -wi-ao----  <span class=\"token number\">50</span>.00g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">0</span>                                                     ZXqpMd-OaaD-c3U0-VWDx-2ysu-ptZk-sE02xr       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  swap centos    <span class=\"token number\">1</span> -wi-a----- <span class=\"token operator\">&lt;</span><span class=\"token number\">15</span>.69g  -1  -1  <span class=\"token number\">253</span>    <span class=\"token number\">1</span>                                                     7lNXQY-I3Wa-jfTX-20Ti-vbee-7RmK-v5zH14       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ mkfs.xfs /dev/centos/home</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$ <span class=\"token function\">mount</span> /dev/mapper/centos-home</pre></td></tr></table></figure><h2 id=\"extend-root-space\"><a class=\"anchor\" href=\"#extend-root-space\">#</a> Extend root space</h2><p>Extend your /root volume with ALL of the remaining space and resize (-r) the file system while doing so.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ lvextend -r -l +100%FREE /dev/mapper/centos-root</pre></td></tr></table></figure><h2 id=\"restore-your-backup\"><a class=\"anchor\" href=\"#restore-your-backup\">#</a> Restore your backup</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -xzvf /mnt/tmp/home.tgz -C /home</pre></td></tr></table></figure><h2 id=\"update-etcfstab\"><a class=\"anchor\" href=\"#update-etcfstab\">#</a> Update /etc/fstab</h2><p>Check <code>/etc/fstab</code> for any mapping of <code>/home</code> volume. IF it is using UUID you should update the UUID portion. (Since we created a new volume, UUID has changed).</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">vim</span> /etc/fstab</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  /dev/mapper/centos-home /home                   xfs     defaults        <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h2 id=\"sync-the-changes\"><a class=\"anchor\" href=\"#sync-the-changes\">#</a> Sync the changes</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ dracut --regenerate-all --force</pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/09/linux/xargs/",
            "url": "https://kung-fu-master.github.io/2021/06/09/linux/xargs/",
            "title": "xargs",
            "date_published": "2021-06-09T12:02:25.271Z",
            "content_html": "<!-- build time:Wed Jun 09 2021 20:03:37 GMT+0800 (中国标准时间) --><h2 id=\"xargs介绍\"><a class=\"anchor\" href=\"#xargs介绍\">#</a> xargs 介绍</h2><p>xargs 用作替换工具，读取输入数据重新格式化后输出</p><h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2><h3 id=\"读文本数据\"><a class=\"anchor\" href=\"#读文本数据\">#</a> 读文本数据</h3><p>读多行文本数据并一行输出</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> test.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a b c d e f g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>h i j k l m n</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>o p q</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>r s t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>u <span class=\"token function\">v</span> w x y z</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ <span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a b c d e f g h i j k l m n o p q r s t u <span class=\"token function\">v</span> w x y z</pre></td></tr></table></figure><h3 id=\"获取ping输出\"><a class=\"anchor\" href=\"#获取ping输出\">#</a> 获取 ping 输出</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ping</span> hci-node01 -c <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span></pre></td></tr></table></figure><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/07/linux/environment_variable/",
            "url": "https://kung-fu-master.github.io/2021/06/07/linux/environment_variable/",
            "title": "环境变量加载顺序",
            "date_published": "2021-06-07T12:53:07.242Z",
            "content_html": "<!-- build time:Mon Jun 07 2021 20:55:25 GMT+0800 (中国标准时间) --><h2 id=\"环境变量分类\"><a class=\"anchor\" href=\"#环境变量分类\">#</a> 环境变量分类</h2><p>环境变量可以简单的分成 <code>用户自定义的环境变量</code> 以及 <code>系统级别的环境变量</code> .<br><strong><span class=\"red\">后加载的环境变量会替换先加载的同名的环境变量</span></strong></p><ul><li>用户级别环境变量定义文件： <code>~/.bashrc</code> 、 <code>~/.profile</code> （部分系统为： <code>~/.bash_profile</code> ）</li><li>系统级别环境变量定义文件： <code>/etc/bashrc</code> 、 <code>/etc/profile</code> (部分系统为： <code>/etc/bash_profile</code> ）、 <code>/etc/environment</code></li></ul><p>另外在用户环境变量中，系统会首先读取 <code>~/.bash_profile</code> （或者 <code>~/.profile</code> ）文件，如果没有该文件则读取 <code>~/.bash_login</code> ，根据这些文件中内容再去读取 <code>~/.bashrc</code> .</p><h2 id=\"加载顺序\"><a class=\"anchor\" href=\"#加载顺序\">#</a> 加载顺序</h2><p>在每个文件中的第一行都加上下面这句代码，并相应的把冒号后的内容修改为当前文件的绝对文件名。</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">UU_ORDER</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$UU_ORDER</span>:/Path/to/this/file\"</span></pre></td></tr></table></figure><p><strong><span class=\"red\">Linux 加载环境变量的顺序如下：</span></strong></p><p>系统环境变量 -&gt; 用户自定义环境变量<br><code>/etc/environment</code> -&gt; <code>/etc/profile</code> -&gt; <code>~/.profile</code></p><p><strong><span class=\"red\">Linux 加载环境变量的顺序如下：</span></strong></p><ol><li><code>/etc/environment</code></li><li><code>/etc/profile</code></li><li><code>/etc/bash.bashrc</code></li><li><code>/etc/profile.d/test.sh</code></li><li><code>~/.profile</code></li><li><code>~/.bashrc</code></li></ol><h2 id=\"自定义环境变量\"><a class=\"anchor\" href=\"#自定义环境变量\">#</a> 自定义环境变量</h2><p>比如在某个项目下定义 <code>uusama.profile</code> ，在这个文件中使用 <code>export</code> 定义一系列变量，然后在 <code>~/.profile</code> 文件后面加上： <code>sourc uusama.profile</code> ，这样你每次登陆都可以在 Shell 脚本中使用自己定义的一系列变量。</p><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/07/technologies/docker/docker_copy_file/",
            "url": "https://kung-fu-master.github.io/2021/06/07/technologies/docker/docker_copy_file/",
            "title": "docker container/image 复制(copy)文件/文件夹",
            "date_published": "2021-06-07T12:52:51.407Z",
            "content_html": "<!-- build time:Mon Jun 07 2021 20:55:25 GMT+0800 (中国标准时间) --><h2 id=\"container-copy-files\"><a class=\"anchor\" href=\"#container-copy-files\">#</a> container copy files</h2><p>从容器中 copy 文件或文件夹到 host 机器.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker  <span class=\"token function\">cp</span>  <span class=\"token operator\">&lt;</span>ImageID<span class=\"token operator\">></span>:/Image/path/to/file  /Host/path/to/destination</pre></td></tr></table></figure><p>从 host 机器 copy 文件或文件夹到容器中.</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker  <span class=\"token function\">cp</span>  /Host/path/to/destination  <span class=\"token operator\">&lt;</span>ImageID<span class=\"token operator\">></span>:/Image/path/to/file</pre></td></tr></table></figure><h2 id=\"image-copy-files\"><a class=\"anchor\" href=\"#image-copy-files\">#</a> image copy files</h2><p>从 image 中直接 copy 文件或文件夹到 host 机器.</p><div class=\"tab\" data-id=\"id10\" data-title=\"第一种 copy file\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run --rm --entrypoint <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;</span>Image-Name<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>Tag<span class=\"token operator\">></span>  /Image/path/to/file <span class=\"token operator\">></span>  /Host/path/to/destination</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id10\" data-title=\"第二种 copy file/folder\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker <span class=\"token function\">cp</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker create --rm <span class=\"token operator\">&lt;</span>Image-Name<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>Tag<span class=\"token operator\">></span><span class=\"token variable\">)</span></span>:/Image/path/to/file  /Host/path/to/destination</pre></td></tr></table></figure></div><!-- rebuild by hrmmi -->",
            "tags": [
                "technologies",
                "docker",
                "docker"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/03/linux/mount_umount/",
            "url": "https://kung-fu-master.github.io/2021/06/03/linux/mount_umount/",
            "title": "mount/umount",
            "date_published": "2021-06-03T14:21:24.897Z",
            "content_html": "<!-- build time:Wed Jun 09 2021 20:03:37 GMT+0800 (中国标准时间) --><h2 id=\"mount\"><a class=\"anchor\" href=\"#mount\">#</a> mount</h2><p><strong>语法</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> <span class=\"token punctuation\">[</span>-fnrsvw<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-t vfstype<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-o options<span class=\"token punctuation\">]</span> device <span class=\"token function\">dir</span></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 将 /dev/hda1 挂在 /mnt 之下。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mount</span> /dev/hda1 /mnt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 将 /dev/hda1 用唯读模式挂在 /mnt 之下。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mount</span> -o ro /dev/hda1 /mnt</pre></td></tr></table></figure><h2 id=\"umount\"><a class=\"anchor\" href=\"#umount\">#</a> umount</h2><p><strong>语法</strong></p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">umount</span> <span class=\"token punctuation\">[</span>-ahnrvV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-t <span class=\"token operator\">&lt;</span>文件系统类型<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件系统<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-a 卸除 /etc/mtab 中记录的所有文件系统。</li><li>-h 显示帮助。</li><li>-n 卸除时不要将信息存入 /etc/mtab 文件中。</li><li>-r 若无法成功卸除，则尝试以只读的方式重新挂入文件系统。</li><li>-t &lt;文件系统类型&gt; 仅卸除选项中所指定的文件系统。</li><li>-v 执行时显示详细的信息。</li><li>-V 显示版本信息。<br>[文件系统] 除了直接指定文件系统外，也可以用设备名称或挂入点来表示文件系统。</li></ul><p><strong>实例</strong></p><p>下面两条命令分别通过设备名和挂载点卸载文件系统，同时输出详细信息：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># umount -v /dev/sda1          通过设备名卸载  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/dev/sda1 umounted  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># umount -v /mnt/mymount/      通过挂载点卸载  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/tmp/diskboot.img umounted</pre></td></tr></table></figure><p>如果设备正忙，卸载即告失败。卸载失败的常见原因是，某个打开的 shell 当前目录为挂载点里的某个目录：</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># umount -v /mnt/mymount/  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>umount: /mnt/mymount: device is busy  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>umount: /mnt/mymount: device is busy</pre></td></tr></table></figure><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2><h3 id=\"mount挂载磁盘\"><a class=\"anchor\" href=\"#mount挂载磁盘\">#</a> mount 挂载磁盘</h3><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> /dev/sda8 /mnt/minio_data/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  mount: /dev/sda8 is write-protected, mounting read-only</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  mount: unknown filesystem <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'(null)'</span></pre></td></tr></table></figure><p>原因是磁盘分区之后直接挂载出现这样的错误， 解决方法</p><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkfs.ext4  /dev/sda8</pre></td></tr></table></figure><p>不是刚分区的磁盘慎用，防止格式化.</p><h3 id=\"unmount出错\"><a class=\"anchor\" href=\"#unmount出错\">#</a> unmount 出错</h3><p>Linux 下挂载后的分区或者磁盘某些时候需要 umount 的时候出现类似 “umount: /mnt: target is busy.” 等字样，或者 “umount: /xxx: device is busy.”。</p><p>解决办法：</p><div class=\"tab\" data-id=\"id001\" data-title=\"使用fuser命令处理\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ yum <span class=\"token function\">install</span> psmisc </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 查看挂载的磁盘目录使用进程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">fuser</span> -mv /mnt/disk01</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       <span class=\"token environment constant\">USER</span>        PID ACCESS COMMAND</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  /mnt:                root     kernel <span class=\"token function\">mount</span> /mnt/disk01</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                       root      <span class=\"token number\">13830</span> <span class=\"token punctuation\">..</span>c<span class=\"token punctuation\">..</span> <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// 杀死占用的进程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token function\">kill</span> -9 <span class=\"token number\">13830</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>// 发现 <span class=\"token function\">bash</span> 退出了，新开shell并再次查看</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ <span class=\"token function\">fuser</span> -mv /mnt/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                       <span class=\"token environment constant\">USER</span>        PID ACCESS COMMAND</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  /mnt:                root     kernel <span class=\"token function\">mount</span> /mnt/disk01</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>// 确认无进程连接后，使用卸载命令</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>$ <span class=\"token function\">umount</span> /mnt/disk01</pre></td></tr></table></figure></div><div class=\"tab\" data-id=\"id001\" data-title=\"通过lsof命令处理\"><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">lsof</span> /mnt/disk01</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  COMMAND   PID <span class=\"token environment constant\">USER</span>   FD   TYPE DEVICE SIZE/OFF NODE NAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">bash</span>    <span class=\"token number\">16302</span> root  cwd    DIR   <span class=\"token number\">8,17</span>       <span class=\"token number\">50</span>   <span class=\"token number\">64</span> /mnt/disk01</pre></td></tr></table></figure><p>找到 PID 对应的进程或者服务，然后杀死或者停止相应服务即可.</p></div><div class=\"tab\" data-id=\"id001\" data-title=\"重启系统\"><p>重启后挂载自动解除.</p></div><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://kung-fu-master.github.io/2021/06/01/linux/shell/",
            "url": "https://kung-fu-master.github.io/2021/06/01/linux/shell/",
            "title": "shell",
            "date_published": "2021-06-01T13:12:28.905Z",
            "content_html": "<!-- build time:Tue Jun 01 2021 21:13:20 GMT+0800 (中国标准时间) --><h2 id=\"切换目录\"><a class=\"anchor\" href=\"#切换目录\">#</a> 切换目录</h2><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> a.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 用 vi 打开 a.sh 文件进行编写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#!/bin/sh  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /data/usr/data/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">ls</span> -l</pre></td></tr></table></figure><p>如果只执行 <code>./a.sh</code> , 可以看到 <code>/data/usr/data/</code> 下的内容。但 shell 退出后还是原来的工作目录。</p><p>如果执行 <code>source ./a.sh</code> , shell 程序运行完成后不仅能看到 <code>/data/usr/data/</code> 下的内容，而且工作目录变成了 <code>/data/usr/data/</code> .</p><!-- rebuild by hrmmi -->",
            "tags": [
                "linux"
            ]
        }
    ]
}